!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=87)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(20);Object.defineProperty(t,"ViewFactory",{enumerable:!0,get:function(){return r(o).default}});var i=n(35);Object.defineProperty(t,"ColumnView",{enumerable:!0,get:function(){return r(i).default}});var a=n(37);Object.defineProperty(t,"RowView",{enumerable:!0,get:function(){return r(a).default}});var u=n(38);Object.defineProperty(t,"EdgePointView",{enumerable:!0,get:function(){return r(u).default}});var l=n(44);Object.defineProperty(t,"EdgeView",{enumerable:!0,get:function(){return r(l).default}});var c=n(12);Object.defineProperty(t,"NodeView",{enumerable:!0,get:function(){return r(c).default}});var s=n(9);Object.defineProperty(t,"ComponentView",{enumerable:!0,get:function(){return r(s).default}});var f=n(36);Object.defineProperty(t,"LineView",{enumerable:!0,get:function(){return r(f).default}});var p=n(39);Object.defineProperty(t,"move",{enumerable:!0,get:function(){return r(p).default}});var d=n(22);Object.defineProperty(t,"select",{enumerable:!0,get:function(){return r(d).default}});var y=n(103);Object.defineProperty(t,"resize",{enumerable:!0,get:function(){return r(y).default}});var h=n(43);Object.defineProperty(t,"HierarchyRelation",{enumerable:!0,get:function(){return r(h).default}});var v=n(45);Object.defineProperty(t,"Row",{enumerable:!0,get:function(){return r(v).default}});var b=n(46);Object.defineProperty(t,"Column",{enumerable:!0,get:function(){return r(b).default}});var m=n(14);Object.defineProperty(t,"Edge",{enumerable:!0,get:function(){return r(m).default}});var g=n(7);Object.defineProperty(t,"Node",{enumerable:!0,get:function(){return r(g).default}});var _=n(13);Object.defineProperty(t,"Relation",{enumerable:!0,get:function(){return r(_).default}});var w=n(21);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return r(w).default}});var O=n(10);Object.defineProperty(t,"Point",{enumerable:!0,get:function(){return r(O).default}});var P=n(42);Object.defineProperty(t,"Model",{enumerable:!0,get:function(){return r(P).default}})},function(e,t,n){"use strict";e.exports=n(88)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){function r(e,t){function n(){this.constructor=e}tn(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function o(e){return e.interceptors&&e.interceptors.length>0}function i(e,t){var n=e.interceptors||(e.interceptors=[]);return n.push(t),Te(function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)})}function a(e,t){var n=kt();try{var r=e.interceptors;if(r)for(var o=0,i=r.length;o<i&&(t=r[o](t),xe(!t||t.type,"Intercept handlers should return nothing or a change object"),t);o++);return t}finally{xt(n)}}function u(e){return e.changeListeners&&e.changeListeners.length>0}function l(e,t){var n=e.changeListeners||(e.changeListeners=[]);return n.push(t),Te(function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)})}function c(e,t){var n=kt(),r=e.changeListeners;if(r){r=r.slice();for(var o=0,i=r.length;o<i;o++)r[o](t);xt(n)}}function s(){return!!Kn.spyListeners.length}function f(e){if(Kn.spyListeners.length)for(var t=Kn.spyListeners,n=0,r=t.length;n<r;n++)t[n](e)}function p(e){f(De({},e,{spyReportStart:!0}))}function d(e){f(e?De({},e,an):an)}function y(e){return Kn.spyListeners.push(e),Te(function(){var t=Kn.spyListeners.indexOf(e);-1!==t&&Kn.spyListeners.splice(t,1)})}function h(){return"function"==typeof Symbol&&Symbol.iterator||"@@iterator"}function v(e){xe(!0!==e[un],"Illegal state: cannot recycle array as iterator"),Ae(e,un,!0);var t=-1;return Ae(e,"next",function(){return t++,{done:t>=this.length,value:t<this.length?this[t]:void 0}}),e}function b(e,t){Ae(e,h(),t)}function m(e){return{enumerable:!1,configurable:!1,get:function(){return this.get(e)},set:function(t){this.set(e,t)}}}function g(e){Object.defineProperty(pn.prototype,""+e,m(e))}function _(e){for(var t=cn;t<e;t++)g(t);cn=e}function w(e){return Ie(e)&&yn(e.$mobx)}function O(e){return mn[e]}function P(e,t){xe("function"==typeof t,O("m026")),xe("string"==typeof e&&e.length>0,"actions should have valid names, got: '"+e+"'");var n=function(){return j(e,t,this,arguments)};return n.originalFn=t,n.isMobxAction=!0,n}function j(e,t,n,r){var o=C(e,t,n,r);try{return t.apply(n,r)}finally{k(o)}}function C(e,t,n,r){var o=s()&&!!e,i=0;if(o){i=Date.now();var a=r&&r.length||0,u=new Array(a);if(a>0)for(var l=0;l<a;l++)u[l]=r[l];p({type:"action",name:e,fn:t,object:n,arguments:u})}var c=kt();return st(),{prevDerivation:c,prevAllowStateChanges:S(!0),notifySpy:o,startTime:i}}function k(e){M(e.prevAllowStateChanges),ft(),xt(e.prevDerivation),e.notifySpy&&d({time:Date.now()-e.startTime})}function x(e){xe(null===Kn.trackingDerivation,O("m028")),Kn.strictMode=e,Kn.allowStateChanges=!e}function E(){return Kn.strictMode}function T(e,t){var n,r=S(e);try{n=t()}finally{M(r)}return n}function S(e){var t=Kn.allowStateChanges;return Kn.allowStateChanges=e,t}function M(e){Kn.allowStateChanges=e}function I(e,t,n,r,o){function i(i,a,u,l,c){if(void 0===c&&(c=0),xe(o||R(arguments),"This function is a decorator, but it wasn't invoked like a decorator"),u){Re(i,"__mobxLazyInitializers")||ze(i,"__mobxLazyInitializers",i.__mobxLazyInitializers&&i.__mobxLazyInitializers.slice()||[]);var s=u.value,f=u.initializer;return i.__mobxLazyInitializers.push(function(t){e(t,a,f?f.call(t):s,l,u)}),{enumerable:r,configurable:!0,get:function(){return!0!==this.__mobxDidRunLazyInitializers&&D(this),t.call(this,a)},set:function(e){!0!==this.__mobxDidRunLazyInitializers&&D(this),n.call(this,a,e)}}}var p={enumerable:r,configurable:!0,get:function(){return this.__mobxInitializedProps&&!0===this.__mobxInitializedProps[a]||N(this,a,void 0,e,l,u),t.call(this,a)},set:function(t){this.__mobxInitializedProps&&!0===this.__mobxInitializedProps[a]?n.call(this,a,t):N(this,a,t,e,l,u)}};return(arguments.length<3||5===arguments.length&&c<3)&&Object.defineProperty(i,a,p),p}return o?function(){if(R(arguments))return i.apply(null,arguments);var e=arguments,t=arguments.length;return function(n,r,o){return i(n,r,o,e,t)}}:i}function N(e,t,n,r,o,i){Re(e,"__mobxInitializedProps")||ze(e,"__mobxInitializedProps",{}),e.__mobxInitializedProps[t]=!0,r(e,t,n,o,i)}function D(e){!0!==e.__mobxDidRunLazyInitializers&&e.__mobxLazyInitializers&&(ze(e,"__mobxDidRunLazyInitializers",!0),e.__mobxDidRunLazyInitializers&&e.__mobxLazyInitializers.forEach(function(t){return t(e)}))}function R(e){return(2===e.length||3===e.length)&&"string"==typeof e[1]}function z(e){return function(t,n,r){if(r&&"function"==typeof r.value)return r.value=P(e,r.value),r.enumerable=!1,r.configurable=!0,r;if(void 0!==r&&void 0!==r.get)throw new Error("[mobx] action is not expected to be used with getters");return gn(e).apply(this,arguments)}}function A(e,t,n){var r="string"==typeof e?e:e.name||"<unnamed action>",o="function"==typeof e?e:t,i="function"==typeof e?t:n;return xe("function"==typeof o,O("m002")),xe(0===o.length,O("m003")),xe("string"==typeof r&&r.length>0,"actions should have valid names, got: '"+r+"'"),j(r,o,i,void 0)}function F(e){return"function"==typeof e&&!0===e.isMobxAction}function U(e,t,n){var r=function(){return j(t,n,e,arguments)};r.isMobxAction=!0,ze(e,t,r)}function V(e,t){return L(e,t)}function L(e,t,n,r){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!==e)return t!==t;var o=typeof e;return("function"===o||"object"===o||"object"==typeof t)&&B(e,t,n,r)}function B(e,t,n,r){e=H(e),t=H(t);var o=On.call(e);if(o!==On.call(t))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t)}var i="[object Array]"===o;if(!i){if("object"!=typeof e||"object"!=typeof t)return!1;var a=e.constructor,u=t.constructor;if(a!==u&&!("function"==typeof a&&a instanceof a&&"function"==typeof u&&u instanceof u)&&"constructor"in e&&"constructor"in t)return!1}n=n||[],r=r||[];for(var l=n.length;l--;)if(n[l]===e)return r[l]===t;if(n.push(e),r.push(t),i){if((l=e.length)!==t.length)return!1;for(;l--;)if(!L(e[l],t[l],n,r))return!1}else{var c,s=Object.keys(e);if(l=s.length,Object.keys(t).length!==l)return!1;for(;l--;)if(c=s[l],!W(t,c)||!L(e[c],t[c],n,r))return!1}return n.pop(),r.pop(),!0}function H(e){return w(e)?e.peek():Un(e)?e.entries():He(e)?$e(e.entries()):e}function W(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function $(e,t){return e===t}function K(e,t){return V(e,t)}function G(e,t){return Le(e,t)||$(e,t)}function q(e,t,n){function r(){i(u)}var o,i,a;"string"==typeof e?(o=e,i=t,a=n):(o=e.name||"Autorun@"+Ce(),i=e,a=t),xe("function"==typeof i,O("m004")),xe(!1===F(i),O("m005")),a&&(i=i.bind(a));var u=new er(o,function(){this.track(r)});return u.schedule(),u.getDisposer()}function X(e,t,n,r){var o,i,a,u;return"string"==typeof e?(o=e,i=t,a=n,u=r):(o="When@"+Ce(),i=e,a=t,u=n),q(o,function(e){if(i.call(u)){e.dispose();var t=kt();a.call(u),xt(t)}})}function Y(e,t,n,r){function o(){a(s)}var i,a,u,l;"string"==typeof e?(i=e,a=t,u=n,l=r):(i=e.name||"AutorunAsync@"+Ce(),a=e,u=t,l=n),xe(!1===F(a),O("m006")),void 0===u&&(u=1),l&&(a=a.bind(l));var c=!1,s=new er(i,function(){c||(c=!0,setTimeout(function(){c=!1,s.isDisposed||s.track(o)},u))});return s.schedule(),s.getDisposer()}function Q(e,t,n){function r(){if(!c.isDisposed){var n=!1;c.track(function(){var t=e(c);n=a||!l(i,t),i=t}),a&&o.fireImmediately&&t(i,c),a||!0!==n||t(i,c),a&&(a=!1)}}arguments.length>3&&ke(O("m007")),he(e)&&ke(O("m008"));var o;o="object"==typeof n?n:{},o.name=o.name||e.name||t.name||"Reaction@"+Ce(),o.fireImmediately=!0===n||!0===o.fireImmediately,o.delay=o.delay||0,o.compareStructural=o.compareStructural||o.struct||!1,t=wn(o.name,o.context?t.bind(o.context):t),o.context&&(e=e.bind(o.context));var i,a=!0,u=!1,l=o.equals?o.equals:o.compareStructural||o.struct?Pn.structural:Pn.default,c=new er(o.name,function(){a||o.delay<1?r():u||(u=!0,setTimeout(function(){u=!1,r()},o.delay))});return c.schedule(),c.getDisposer()}function J(e,t){if(ue(e)&&e.hasOwnProperty("$mobx"))return e.$mobx;xe(Object.isExtensible(e),O("m035")),Ne(e)||(t=(e.constructor.name||"ObservableObject")+"@"+Ce()),t||(t="ObservableObject@"+Ce());var n=new kn(e,t);return Ae(e,"$mobx",n),n}function Z(e,t,n,r){if(e.values[t]&&!Cn(e.values[t]))return xe("value"in n,"The property "+t+" in "+e.name+" is already observable, cannot redefine it as computed property"),void(e.target[t]=n.value);if("value"in n)if(he(n.value)){var o=n.value;ee(e,t,o.initialValue,o.enhancer)}else F(n.value)&&!0===n.value.autoBind?U(e.target,t,n.value.originalFn):Cn(n.value)?ne(e,t,n.value):ee(e,t,n.value,r);else te(e,t,n.get,n.set,Pn.default,!0)}function ee(e,t,n,r){if(Ue(e.target,t),o(e)){var i=a(e,{object:e.target,name:t,type:"add",newValue:n});if(!i)return;n=i.newValue}n=(e.values[t]=new vn(n,r,e.name+"."+t,!1)).value,Object.defineProperty(e.target,t,re(t)),ae(e,e.target,t,n)}function te(e,t,n,r,o,i){i&&Ue(e.target,t),e.values[t]=new jn(n,e.target,o,e.name+"."+t,r),i&&Object.defineProperty(e.target,t,oe(t))}function ne(e,t,n){var r=e.name+"."+t;n.name=r,n.scope||(n.scope=e.target),e.values[t]=n,Object.defineProperty(e.target,t,oe(t))}function re(e){return xn[e]||(xn[e]={configurable:!0,enumerable:!0,get:function(){return this.$mobx.values[e].get()},set:function(t){ie(this,e,t)}})}function oe(e){return En[e]||(En[e]={configurable:!0,enumerable:!1,get:function(){return this.$mobx.values[e].get()},set:function(t){return this.$mobx.values[e].set(t)}})}function ie(e,t,n){var r=e.$mobx,i=r.values[t];if(o(r)){var l=a(r,{type:"update",object:e,name:t,newValue:n});if(!l)return;n=l.newValue}if((n=i.prepareNewValue(n))!==hn){var f=u(r),y=s(),l=f||y?{type:"update",object:e,oldValue:i.value,name:t,newValue:n}:null;y&&p(l),i.setNewValue(n),f&&c(r,l),y&&d()}}function ae(e,t,n,r){var o=u(e),i=s(),a=o||i?{type:"add",object:t,name:n,newValue:r}:null;i&&p(a),o&&c(e,a),i&&d()}function ue(e){return!!Ie(e)&&(D(e),Tn(e.$mobx))}function le(e,t){if(null===e||void 0===e)return!1;if(void 0!==t){if(w(e)||Un(e))throw new Error(O("m019"));if(ue(e)){var n=e.$mobx;return n.values&&!!n.values[t]}return!1}return ue(e)||!!e.$mobx||on(e)||rr(e)||Cn(e)}function ce(e){return xe(!!e,":("),I(function(t,n,r,o,i){Ue(t,n),xe(!i||!i.get,O("m022")),ee(J(t,void 0),n,r,e)},function(e){var t=this.$mobx.values[e];if(void 0!==t)return t.get()},function(e,t){ie(this,e,t)},!0,!1)}function se(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return pe(e,be,t)}function fe(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return pe(e,ge,t)}function pe(e,t,n){xe(arguments.length>=2,O("m014")),xe("object"==typeof e,O("m015")),xe(!Un(e),O("m016")),n.forEach(function(e){xe("object"==typeof e,O("m017")),xe(!le(e),O("m018"))});for(var r=J(e),o={},i=n.length-1;i>=0;i--){var a=n[i];for(var u in a)if(!0!==o[u]&&Re(a,u)){if(o[u]=!0,e===a&&!Fe(e,u))continue;var l=Object.getOwnPropertyDescriptor(a,u);Z(r,u,l,t)}}return e}function de(e){if(void 0===e&&(e=void 0),"string"==typeof arguments[1])return Sn.apply(null,arguments);if(xe(arguments.length<=1,O("m021")),xe(!he(e),O("m020")),le(e))return e;var t=be(e,void 0,void 0);return t!==e?t:zn.box(e)}function ye(e){ke("Expected one or two arguments to observable."+e+". Did you accidentally try to use observable."+e+" as decorator?")}function he(e){return"object"==typeof e&&null!==e&&!0===e.isMobxModifierDescriptor}function ve(e,t){return xe(!he(t),"Modifiers cannot be nested"),{isMobxModifierDescriptor:!0,initialValue:t,enhancer:e}}function be(e,t,n){return he(e)&&ke("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it"),le(e)?e:Array.isArray(e)?zn.array(e,n):Ne(e)?zn.object(e,n):He(e)?zn.map(e,n):e}function me(e,t,n){return he(e)&&ke("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it"),void 0===e||null===e?e:ue(e)||w(e)||Un(e)?e:Array.isArray(e)?zn.shallowArray(e,n):Ne(e)?zn.shallowObject(e,n):He(e)?zn.shallowMap(e,n):ke("The shallow modifier / decorator can only used in combination with arrays, objects and maps")}function ge(e){return e}function _e(e,t,n){if(V(e,t))return t;if(le(e))return e;if(Array.isArray(e))return new pn(e,_e,n);if(He(e))return new Fn(e,_e,n);if(Ne(e)){var r={};return J(r,n),pe(r,_e,[e]),r}return e}function we(e,t,n){return V(e,t)?t:e}function Oe(e,t){void 0===t&&(t=void 0),st();try{return e.apply(t)}finally{ft()}}function Pe(e){return Ee("`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead"),zn.map(e)}function je(){return"undefined"!=typeof window?window:e}function Ce(){return++Kn.mobxGuid}function ke(e,t){throw xe(!1,e,t),"X"}function xe(e,t,n){if(!e)throw new Error("[mobx] Invariant failed: "+t+(n?" in '"+n+"'":""))}function Ee(e){return-1===Ln.indexOf(e)&&(Ln.push(e),console.error("[mobx] Deprecated: "+e),!0)}function Te(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}function Se(e){var t=[];return e.forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),t}function Me(e,t,n){return void 0===t&&(t=100),void 0===n&&(n=" - "),e?e.slice(0,t).join(n)+(e.length>t?" (... and "+(e.length-t)+"more)":""):""}function Ie(e){return null!==e&&"object"==typeof e}function Ne(e){if(null===e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}function De(){for(var e=arguments[0],t=1,n=arguments.length;t<n;t++){var r=arguments[t];for(var o in r)Re(r,o)&&(e[o]=r[o])}return e}function Re(e,t){return Hn.call(e,t)}function ze(e,t,n){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function Ae(e,t,n){Object.defineProperty(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function Fe(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!n||!1!==n.configurable&&!1!==n.writable}function Ue(e,t){xe(Fe(e,t),"Cannot make property '"+t+"' observable, it is not configurable and writable in the target object")}function Ve(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return Ie(e)&&!0===e[n]}}function Le(e,t){return"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}function Be(e){return Array.isArray(e)||w(e)}function He(e){return void 0!==je().Map&&e instanceof je().Map}function We(e){return Ne(e)?Object.keys(e):Array.isArray(e)?e.map(function(e){return e[0]}):He(e)?Array.from(e.keys()):Un(e)?e.keys():ke("Cannot get keys from "+e)}function $e(e){for(var t=[];;){var n=e.next();if(n.done)break;t.push(n.value)}return t}function Ke(){return"function"==typeof Symbol&&Symbol.toPrimitive||"@@toPrimitive"}function Ge(e){return null===e?null:"object"==typeof e?""+e:e}function qe(){qn=!0,je().__mobxInstanceCount--}function Xe(){Ee("Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details."),Gn=!0;var e=je(),t=Kn;if(e.__mobservableTrackingStack||e.__mobservableViewStack)throw new Error("[mobx] An incompatible version of mobservable is already loaded.");if(e.__mobxGlobal&&e.__mobxGlobal.version!==t.version)throw new Error("[mobx] An incompatible version of mobx is already loaded.");e.__mobxGlobal?Kn=e.__mobxGlobal:e.__mobxGlobal=t}function Ye(){return Kn}function Qe(){Kn.resetId++;var e=new $n;for(var t in e)-1===Wn.indexOf(t)&&(Kn[t]=e[t]);Kn.allowStateChanges=!Kn.strictMode}function Je(e,t){if("object"==typeof e&&null!==e){if(w(e))return xe(void 0===t,O("m036")),e.$mobx.atom;if(Un(e)){var n=e;if(void 0===t)return Je(n._keys);var r=n._data[t]||n._hasMap[t];return xe(!!r,"the entry '"+t+"' does not exist in the observable map '"+et(e)+"'"),r}if(D(e),t&&!e.$mobx&&e[t],ue(e)){if(!t)return ke("please specify a property");var r=e.$mobx.values[t];return xe(!!r,"no observable property '"+t+"' found on the observable object '"+et(e)+"'"),r}if(on(e)||Cn(e)||rr(e))return e}else if("function"==typeof e&&rr(e.$mobx))return e.$mobx;return ke("Cannot obtain atom from "+e)}function Ze(e,t){return xe(e,"Expecting some object"),void 0!==t?Ze(Je(e,t)):on(e)||Cn(e)||rr(e)?e:Un(e)?e:(D(e),e.$mobx?e.$mobx:void xe(!1,"Cannot obtain administration from "+e))}function et(e,t){var n;return n=void 0!==t?Je(e,t):ue(e)||Un(e)?Ze(e):Je(e),n.name}function tt(e,t){return nt(Je(e,t))}function nt(e){var t={name:e.name};return e.observing&&e.observing.length>0&&(t.dependencies=Se(e.observing).map(nt)),t}function rt(e,t){return ot(Je(e,t))}function ot(e){var t={name:e.name};return it(e)&&(t.observers=at(e).map(ot)),t}function it(e){return e.observers&&e.observers.length>0}function at(e){return e.observers}function ut(e,t){var n=e.observers.length;n&&(e.observersIndexes[t.__mapid]=n),e.observers[n]=t,e.lowestObserverState>t.dependenciesState&&(e.lowestObserverState=t.dependenciesState)}function lt(e,t){if(1===e.observers.length)e.observers.length=0,ct(e);else{var n=e.observers,r=e.observersIndexes,o=n.pop();if(o!==t){var i=r[t.__mapid]||0;i?r[o.__mapid]=i:delete r[o.__mapid],n[i]=o}delete r[t.__mapid]}}function ct(e){e.isPendingUnobservation||(e.isPendingUnobservation=!0,Kn.pendingUnobservations.push(e))}function st(){Kn.inBatch++}function ft(){if(0==--Kn.inBatch){Rt();for(var e=Kn.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation=!1,0===n.observers.length&&n.onBecomeUnobserved()}Kn.pendingUnobservations=[]}}function pt(e){var t=Kn.trackingDerivation;null!==t?t.runId!==e.lastAccessedBy&&(e.lastAccessedBy=t.runId,t.newObserving[t.unboundDepsCount++]=e):0===e.observers.length&&ct(e)}function dt(e){if(e.lowestObserverState!==Qn.STALE){e.lowestObserverState=Qn.STALE;for(var t=e.observers,n=t.length;n--;){var r=t[n];r.dependenciesState===Qn.UP_TO_DATE&&(r.isTracing!==Jn.NONE&&vt(r,e),r.onBecomeStale()),r.dependenciesState=Qn.STALE}}}function yt(e){if(e.lowestObserverState!==Qn.STALE){e.lowestObserverState=Qn.STALE;for(var t=e.observers,n=t.length;n--;){var r=t[n];r.dependenciesState===Qn.POSSIBLY_STALE?r.dependenciesState=Qn.STALE:r.dependenciesState===Qn.UP_TO_DATE&&(e.lowestObserverState=Qn.UP_TO_DATE)}}}function ht(e){if(e.lowestObserverState===Qn.UP_TO_DATE){e.lowestObserverState=Qn.POSSIBLY_STALE;for(var t=e.observers,n=t.length;n--;){var r=t[n];r.dependenciesState===Qn.UP_TO_DATE&&(r.dependenciesState=Qn.POSSIBLY_STALE,r.isTracing!==Jn.NONE&&vt(r,e),r.onBecomeStale())}}}function vt(e,t){if(console.log("[mobx.trace] '"+e.name+"' is invalidated due to a change in: '"+t.name+"'"),e.isTracing===Jn.BREAK){var n=[];bt(tt(e),n,1),new Function("debugger;\n/*\nTracing '"+e.name+"'\n\nYou are entering this break point because derivation '"+e.name+"' is being traced and '"+t.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(e instanceof jn?e.derivation.toString():"")+"\n\nThe dependencies for this derivation are:\n\n"+n.join("\n")+"\n*/\n    ")()}}function bt(e,t,n){if(t.length>=1e3)return void t.push("(and many more)");t.push(""+new Array(n).join("\t")+e.name),e.dependencies&&e.dependencies.forEach(function(e){return bt(e,t,n+1)})}function mt(e){return e instanceof Zn}function gt(e){switch(e.dependenciesState){case Qn.UP_TO_DATE:return!1;case Qn.NOT_TRACKING:case Qn.STALE:return!0;case Qn.POSSIBLY_STALE:for(var t=kt(),n=e.observing,r=n.length,o=0;o<r;o++){var i=n[o];if(Cn(i)){try{i.get()}catch(e){return xt(t),!0}if(e.dependenciesState===Qn.STALE)return xt(t),!0}}return Et(e),xt(t),!1}}function _t(){return null!==Kn.trackingDerivation}function wt(e){var t=e.observers.length>0;Kn.computationDepth>0&&t&&ke(O("m031")+e.name),!Kn.allowStateChanges&&t&&ke(O(Kn.strictMode?"m030a":"m030b")+e.name)}function Ot(e,t,n){Et(e),e.newObserving=new Array(e.observing.length+100),e.unboundDepsCount=0,e.runId=++Kn.runId;var r=Kn.trackingDerivation;Kn.trackingDerivation=e;var o;try{o=t.call(n)}catch(e){o=new Zn(e)}return Kn.trackingDerivation=r,Pt(e),o}function Pt(e){for(var t=e.observing,n=e.observing=e.newObserving,r=Qn.UP_TO_DATE,o=0,i=e.unboundDepsCount,a=0;a<i;a++){var u=n[a];0===u.diffValue&&(u.diffValue=1,o!==a&&(n[o]=u),o++),u.dependenciesState>r&&(r=u.dependenciesState)}for(n.length=o,e.newObserving=null,i=t.length;i--;){var u=t[i];0===u.diffValue&&lt(u,e),u.diffValue=0}for(;o--;){var u=n[o];1===u.diffValue&&(u.diffValue=0,ut(u,e))}r!==Qn.UP_TO_DATE&&(e.dependenciesState=r,e.onBecomeStale())}function jt(e){var t=e.observing;e.observing=[];for(var n=t.length;n--;)lt(t[n],e);e.dependenciesState=Qn.NOT_TRACKING}function Ct(e){var t=kt(),n=e();return xt(t),n}function kt(){var e=Kn.trackingDerivation;return Kn.trackingDerivation=null,e}function xt(e){Kn.trackingDerivation=e}function Et(e){if(e.dependenciesState!==Qn.UP_TO_DATE){e.dependenciesState=Qn.UP_TO_DATE;for(var t=e.observing,n=t.length;n--;)t[n].lowestObserverState=Qn.UP_TO_DATE}}function Tt(e){return console.log(e),e}function St(e,t){return Ee("`whyRun` is deprecated in favor of `trace`"),e=It(arguments),e?Cn(e)||rr(e)?Tt(e.whyRun()):ke(O("m025")):Tt(O("m024"))}function Mt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=!1;"boolean"==typeof e[e.length-1]&&(n=e.pop());var r=It(e);if(!r)return ke("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");r.isTracing===Jn.NONE&&console.log("[mobx.trace] '"+r.name+"' tracing enabled"),r.isTracing=n?Jn.BREAK:Jn.LOG}function It(e){switch(e.length){case 0:return Kn.trackingDerivation;case 1:return Je(e[0]);case 2:return Je(e[0],e[1])}}function Nt(e){xe(this&&this.$mobx&&rr(this.$mobx),"Invalid `this`"),xe(!this.$mobx.errorHandler,"Only one onErrorHandler can be registered"),this.$mobx.errorHandler=e}function Dt(e){return Kn.globalReactionErrorHandlers.push(e),function(){var t=Kn.globalReactionErrorHandlers.indexOf(e);t>=0&&Kn.globalReactionErrorHandlers.splice(t,1)}}function Rt(){Kn.inBatch>0||Kn.isRunningReactions||nr(zt)}function zt(){Kn.isRunningReactions=!0;for(var e=Kn.pendingReactions,t=0;e.length>0;){++t===tr&&(console.error("Reaction doesn't converge to a stable state after "+tr+" iterations. Probably there is a cycle in the reactive function: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,o=n.length;r<o;r++)n[r].runReaction()}Kn.isRunningReactions=!1}function At(e){var t=nr;nr=function(n){return e(function(){return t(n)})}}function Ft(e){return Ee("asReference is deprecated, use observable.ref instead"),zn.ref(e)}function Ut(e){return Ee("asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead."),zn.struct(e)}function Vt(e){return Ee("asFlat is deprecated, use observable.shallow instead"),zn.shallow(e)}function Lt(e){return Ee("asMap is deprecated, use observable.map or observable.shallowMap instead"),zn.map(e||{})}function Bt(e){return I(function(t,n,r,o,i){xe(void 0!==i,O("m009")),xe("function"==typeof i.get,O("m010")),te(J(t,""),n,i.get,i.set,e,!1)},function(e){var t=this.$mobx.values[e];if(void 0!==t)return t.get()},function(e,t){this.$mobx.values[e].set(t)},!1,!1)}function Ht(e,t){if(null===e||void 0===e)return!1;if(void 0!==t){if(!1===ue(e))return!1;if(!e.$mobx.values[t])return!1;var n=Je(e,t);return Cn(n)}return Cn(e)}function Wt(e,t,n,r){return"function"==typeof n?Kt(e,t,n,r):$t(e,t,n)}function $t(e,t,n){return Ze(e).observe(t,n)}function Kt(e,t,n,r){return Ze(e,t).observe(n,r)}function Gt(e,t,n){return"function"==typeof n?Xt(e,t,n):qt(e,t)}function qt(e,t){return Ze(e).intercept(t)}function Xt(e,t,n){return Ze(e,t).intercept(n)}function Yt(e,t){return _t()||console.warn(O("m013")),ar(e,{context:t}).get()}function Qt(e,t,n){function r(r){return t&&n.push([e,r]),r}if(void 0===t&&(t=!0),void 0===n&&(n=[]),le(e)){if(t&&null===n&&(n=[]),t&&null!==e&&"object"==typeof e)for(var o=0,i=n.length;o<i;o++)if(n[o][0]===e)return n[o][1];if(w(e)){var a=r([]),u=e.map(function(e){return Qt(e,t,n)});a.length=u.length;for(var o=0,i=u.length;o<i;o++)a[o]=u[o];return a}if(ue(e)){var a=r({});for(var l in e)a[l]=Qt(e[l],t,n);return a}if(Un(e)){var c=r({});return e.forEach(function(e,r){return c[r]=Qt(e,t,n)}),c}if(bn(e))return Qt(e.get(),t,n)}return e}function Jt(e,t){xe("function"==typeof e&&e.length<2,"createTransformer expects a function that accepts one argument");var n={},o=Kn.resetId,i=function(o){function i(t,n){var r=o.call(this,function(){return e(n)},void 0,Pn.default,"Transformer-"+e.name+"-"+t,void 0)||this;return r.sourceIdentifier=t,r.sourceObject=n,r}return r(i,o),i.prototype.onBecomeUnobserved=function(){var e=this.value;o.prototype.onBecomeUnobserved.call(this),delete n[this.sourceIdentifier],t&&t(e,this.sourceObject)},i}(jn);return function(e){o!==Kn.resetId&&(n={},o=Kn.resetId);var t=Zt(e),r=n[t];return r?r.get():(r=n[t]=new i(t,e),r.get())}}function Zt(e){if("string"==typeof e||"number"==typeof e)return e;if(null===e||"object"!=typeof e)throw new Error("[mobx] transform expected some kind of object or primitive value, got: "+e);var t=e.$transformId;return void 0===t&&(t=Ce(),ze(e,"$transformId",t)),t}function en(e,t,n){var r;if(Un(e)||w(e)||bn(e))r=Ze(e);else{if(!ue(e))return ke("Expected observable map, object or array as first array");if("string"!=typeof t)return ke("InterceptReads can only be used with a specific property, not with an object in general");r=Ze(e,t)}return void 0!==r.dehancer?ke("An intercept reader was already established"):(r.dehancer="function"==typeof t?t:n,function(){r.dehancer=void 0})}n.d(t,"extras",function(){return ur}),n.d(t,"Reaction",function(){return er}),n.d(t,"untracked",function(){return Ct}),n.d(t,"IDerivationState",function(){return Qn}),n.d(t,"Atom",function(){return rn}),n.d(t,"BaseAtom",function(){return nn}),n.d(t,"useStrict",function(){return x}),n.d(t,"isStrictModeEnabled",function(){return E}),n.d(t,"spy",function(){return y}),n.d(t,"comparer",function(){return Pn}),n.d(t,"asReference",function(){return Ft}),n.d(t,"asFlat",function(){return Vt}),n.d(t,"asStructure",function(){return Ut}),n.d(t,"asMap",function(){return Lt}),n.d(t,"isModifierDescriptor",function(){return he}),n.d(t,"isObservableObject",function(){return ue}),n.d(t,"isBoxedObservable",function(){return bn}),n.d(t,"isObservableArray",function(){return w}),n.d(t,"ObservableMap",function(){return Fn}),n.d(t,"isObservableMap",function(){return Un}),n.d(t,"map",function(){return Pe}),n.d(t,"transaction",function(){return Oe}),n.d(t,"observable",function(){return zn}),n.d(t,"computed",function(){return ar}),n.d(t,"isObservable",function(){return le}),n.d(t,"isComputed",function(){return Ht}),n.d(t,"extendObservable",function(){return se}),n.d(t,"extendShallowObservable",function(){return fe}),n.d(t,"observe",function(){return Wt}),n.d(t,"intercept",function(){return Gt}),n.d(t,"autorun",function(){return q}),n.d(t,"autorunAsync",function(){return Y}),n.d(t,"when",function(){return X}),n.d(t,"reaction",function(){return Q}),n.d(t,"action",function(){return wn}),n.d(t,"isAction",function(){return F}),n.d(t,"runInAction",function(){return A}),n.d(t,"expr",function(){return Yt}),n.d(t,"toJS",function(){return Qt}),n.d(t,"createTransformer",function(){return Jt}),n.d(t,"whyRun",function(){return St}),n.d(t,"trace",function(){return Mt}),n.d(t,"isArrayLike",function(){return Be});/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var tn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},nn=function(){function e(e){void 0===e&&(e="Atom@"+Ce()),this.name=e,this.isPendingUnobservation=!0,this.observers=[],this.observersIndexes={},this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=Qn.NOT_TRACKING}return e.prototype.onBecomeUnobserved=function(){},e.prototype.reportObserved=function(){pt(this)},e.prototype.reportChanged=function(){st(),dt(this),ft()},e.prototype.toString=function(){return this.name},e}(),rn=function(e){function t(t,n,r){void 0===t&&(t="Atom@"+Ce()),void 0===n&&(n=Bn),void 0===r&&(r=Bn);var o=e.call(this,t)||this;return o.name=t,o.onBecomeObservedHandler=n,o.onBecomeUnobservedHandler=r,o.isPendingUnobservation=!1,o.isBeingTracked=!1,o}return r(t,e),t.prototype.reportObserved=function(){return st(),e.prototype.reportObserved.call(this),this.isBeingTracked||(this.isBeingTracked=!0,this.onBecomeObservedHandler()),ft(),!!Kn.trackingDerivation},t.prototype.onBecomeUnobserved=function(){this.isBeingTracked=!1,this.onBecomeUnobservedHandler()},t}(nn),on=Ve("Atom",nn),an={spyReportEnd:!0},un="__$$iterating",ln=function(){var e=!1,t={};return Object.defineProperty(t,"0",{set:function(){e=!0}}),Object.create(t)[0]=1,!1===e}(),cn=0,sn=function(){function e(){}return e}();!function(e,t){void 0!==Object.setPrototypeOf?Object.setPrototypeOf(e.prototype,t):void 0!==e.prototype.__proto__?e.prototype.__proto__=t:e.prototype=t}(sn,Array.prototype),Object.isFrozen(Array)&&["constructor","push","shift","concat","pop","unshift","replace","find","findIndex","splice","reverse","sort"].forEach(function(e){Object.defineProperty(sn.prototype,e,{configurable:!0,writable:!0,value:Array.prototype[e]})});var fn=function(){function e(e,t,n,r){this.array=n,this.owned=r,this.values=[],this.lastKnownLength=0,this.interceptors=null,this.changeListeners=null,this.atom=new nn(e||"ObservableArray@"+Ce()),this.enhancer=function(n,r){return t(n,r,e+"[..]")}}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.dehanceValues=function(e){return void 0!==this.dehancer?e.map(this.dehancer):e},e.prototype.intercept=function(e){return i(this,e)},e.prototype.observe=function(e,t){return void 0===t&&(t=!1),t&&e({object:this.array,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),l(this,e)},e.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},e.prototype.setArrayLength=function(e){if("number"!=typeof e||e<0)throw new Error("[mobx.array] Out of range: "+e);var t=this.values.length;if(e!==t)if(e>t){for(var n=new Array(e-t),r=0;r<e-t;r++)n[r]=void 0;this.spliceWithArray(t,0,n)}else this.spliceWithArray(e,t-e)},e.prototype.updateArrayLength=function(e,t){if(e!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");this.lastKnownLength+=t,t>0&&e+t+1>cn&&_(e+t+1)},e.prototype.spliceWithArray=function(e,t,n){var r=this;wt(this.atom);var i=this.values.length;if(void 0===e?e=0:e>i?e=i:e<0&&(e=Math.max(0,i+e)),t=1===arguments.length?i-e:void 0===t||null===t?0:Math.max(0,Math.min(t,i-e)),void 0===n&&(n=[]),o(this)){var u=a(this,{object:this.array,type:"splice",index:e,removedCount:t,added:n});if(!u)return Vn;t=u.removedCount,n=u.added}n=n.map(function(e){return r.enhancer(e,void 0)});var l=n.length-t;this.updateArrayLength(i,l);var c=this.spliceItemsIntoValues(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice(e,n,c),this.dehanceValues(c)},e.prototype.spliceItemsIntoValues=function(e,t,n){if(n.length<1e4)return(o=this.values).splice.apply(o,[e,t].concat(n));var r=this.values.slice(e,e+t);return this.values=this.values.slice(0,e).concat(n,this.values.slice(e+t)),r;var o},e.prototype.notifyArrayChildUpdate=function(e,t,n){var r=!this.owned&&s(),o=u(this),i=o||r?{object:this.array,type:"update",index:e,newValue:t,oldValue:n}:null;r&&p(i),this.atom.reportChanged(),o&&c(this,i),r&&d()},e.prototype.notifyArraySplice=function(e,t,n){var r=!this.owned&&s(),o=u(this),i=o||r?{object:this.array,type:"splice",index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;r&&p(i),this.atom.reportChanged(),o&&c(this,i),r&&d()},e}(),pn=function(e){function t(t,n,r,o){void 0===r&&(r="ObservableArray@"+Ce()),void 0===o&&(o=!1);var i=e.call(this)||this,a=new fn(r,n,i,o);return Ae(i,"$mobx",a),t&&t.length&&i.spliceWithArray(0,0,t),ln&&Object.defineProperty(a.array,"0",dn),i}return r(t,e),t.prototype.intercept=function(e){return this.$mobx.intercept(e)},t.prototype.observe=function(e,t){return void 0===t&&(t=!1),this.$mobx.observe(e,t)},t.prototype.clear=function(){return this.splice(0)},t.prototype.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.$mobx.atom.reportObserved(),Array.prototype.concat.apply(this.peek(),e.map(function(e){return w(e)?e.peek():e}))},t.prototype.replace=function(e){return this.$mobx.spliceWithArray(0,this.$mobx.values.length,e)},t.prototype.toJS=function(){return this.slice()},t.prototype.toJSON=function(){return this.toJS()},t.prototype.peek=function(){return this.$mobx.atom.reportObserved(),this.$mobx.dehanceValues(this.$mobx.values)},t.prototype.find=function(e,t,n){void 0===n&&(n=0);var r=this.findIndex.apply(this,arguments);return-1===r?void 0:this.get(r)},t.prototype.findIndex=function(e,t,n){void 0===n&&(n=0);for(var r=this.peek(),o=r.length,i=n;i<o;i++)if(e.call(t,r[i],i,this))return i;return-1},t.prototype.splice=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];switch(arguments.length){case 0:return[];case 1:return this.$mobx.spliceWithArray(e);case 2:return this.$mobx.spliceWithArray(e,t)}return this.$mobx.spliceWithArray(e,t,n)},t.prototype.spliceWithArray=function(e,t,n){return this.$mobx.spliceWithArray(e,t,n)},t.prototype.push=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.$mobx;return n.spliceWithArray(n.values.length,0,e),n.values.length},t.prototype.pop=function(){return this.splice(Math.max(this.$mobx.values.length-1,0),1)[0]},t.prototype.shift=function(){return this.splice(0,1)[0]},t.prototype.unshift=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.$mobx;return n.spliceWithArray(0,0,e),n.values.length},t.prototype.reverse=function(){var e=this.slice();return e.reverse.apply(e,arguments)},t.prototype.sort=function(e){var t=this.slice();return t.sort.apply(t,arguments)},t.prototype.remove=function(e){var t=this.$mobx.dehanceValues(this.$mobx.values).indexOf(e);return t>-1&&(this.splice(t,1),!0)},t.prototype.move=function(e,t){function n(e){if(e<0)throw new Error("[mobx.array] Index out of bounds: "+e+" is negative");var t=this.$mobx.values.length;if(e>=t)throw new Error("[mobx.array] Index out of bounds: "+e+" is not smaller than "+t)}if(n.call(this,e),n.call(this,t),e!==t){var r,o=this.$mobx.values;r=e<t?o.slice(0,e).concat(o.slice(e+1,t+1),[o[e]],o.slice(t+1)):o.slice(0,t).concat([o[e]],o.slice(t,e),o.slice(e+1)),this.replace(r)}},t.prototype.get=function(e){var t=this.$mobx;if(t){if(e<t.values.length)return t.atom.reportObserved(),t.dehanceValue(t.values[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+t.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},t.prototype.set=function(e,t){var n=this.$mobx,r=n.values;if(e<r.length){wt(n.atom);var i=r[e];if(o(n)){var u=a(n,{type:"update",object:this,index:e,newValue:t});if(!u)return;t=u.newValue}t=n.enhancer(t,i);t!==i&&(r[e]=t,n.notifyArrayChildUpdate(e,t,i))}else{if(e!==r.length)throw new Error("[mobx.array] Index out of bounds, "+e+" is larger than "+r.length);n.spliceWithArray(e,0,[t])}},t}(sn);b(pn.prototype,function(){return v(this.slice())}),Object.defineProperty(pn.prototype,"length",{enumerable:!1,configurable:!0,get:function(){return this.$mobx.getArrayLength()},set:function(e){this.$mobx.setArrayLength(e)}}),["every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach(function(e){var t=Array.prototype[e];xe("function"==typeof t,"Base function not defined on Array prototype: '"+e+"'"),ze(pn.prototype,e,function(){return t.apply(this.peek(),arguments)})}),function(e,t){for(var n=0;n<t.length;n++)ze(e,t[n],e[t[n]])}(pn.prototype,["constructor","intercept","observe","clear","concat","get","replace","toJS","toJSON","peek","find","findIndex","splice","spliceWithArray","push","pop","set","shift","unshift","reverse","sort","remove","move","toString","toLocaleString"]);var dn=m(0);_(1e3);var yn=Ve("ObservableArrayAdministration",fn),hn={},vn=function(e){function t(t,n,r,o){void 0===r&&(r="ObservableValue@"+Ce()),void 0===o&&(o=!0);var i=e.call(this,r)||this;return i.enhancer=n,i.hasUnreportedChange=!1,i.dehancer=void 0,i.value=n(t,void 0,r),o&&s()&&f({type:"create",object:i,newValue:i.value}),i}return r(t,e),t.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.prototype.set=function(e){var t=this.value;if((e=this.prepareNewValue(e))!==hn){var n=s();n&&p({type:"update",object:this,newValue:e,oldValue:t}),this.setNewValue(e),n&&d()}},t.prototype.prepareNewValue=function(e){if(wt(this),o(this)){var t=a(this,{object:this,type:"update",newValue:e});if(!t)return hn;e=t.newValue}return e=this.enhancer(e,this.value,this.name),this.value!==e?e:hn},t.prototype.setNewValue=function(e){var t=this.value;this.value=e,this.reportChanged(),u(this)&&c(this,{type:"update",object:this,newValue:e,oldValue:t})},t.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},t.prototype.intercept=function(e){return i(this,e)},t.prototype.observe=function(e,t){return t&&e({object:this,type:"update",newValue:this.value,oldValue:void 0}),l(this,e)},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.value+"]"},t.prototype.valueOf=function(){return Ge(this.get())},t}(nn);vn.prototype[Ke()]=vn.prototype.valueOf;var bn=Ve("ObservableValue",vn),mn={m001:"It is not allowed to assign new values to @action fields",m002:"`runInAction` expects a function",m003:"`runInAction` expects a function without arguments",m004:"autorun expects a function",m005:"Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",m006:"Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",m007:"reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object",m008:"wrapping reaction expression in `asReference` is no longer supported, use options object instead",m009:"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.",m010:"@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'",m011:"First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments",m012:"computed takes one or two arguments if used as function",m013:"[mobx.expr] 'expr' should only be used inside other reactive functions.",m014:"extendObservable expected 2 or more arguments",m015:"extendObservable expects an object as first argument",m016:"extendObservable should not be used on maps, use map.merge instead",m017:"all arguments of extendObservable should be objects",m018:"extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540",m019:"[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.",m020:"modifiers can only be used for individual object properties",m021:"observable expects zero or one arguments",m022:"@observable can not be used on getters, use @computed instead",m024:"whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.",m025:"whyRun can only be used on reactions and computed values",m026:"`action` can only be invoked on functions",m028:"It is not allowed to set `useStrict` when a derivation is running",m029:"INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row",m030a:"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ",m030b:"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ",m031:"Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ",m032:"* This computation is suspended (not in use by any reaction) and won't run automatically.\n\tDidn't expect this computation to be suspended at this point?\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).",m033:"`observe` doesn't support the fire immediately property for observable maps.",m034:"`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead",m035:"Cannot make the designated object observable; it is not extensible",m036:"It is not possible to get index atoms from arrays",m037:'Hi there! I\'m sorry you have just run into an exception.\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\n\nHowever, more interesting is the actual stack trace of the error itself.\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\nSee `error.stack` property, or press the very subtle "(...)" link you see near the console.error message that probably brought you here.\nThat stack is more interesting than the stack of this console.error itself.\n\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error("Oops")` instead of `throw "Oops"`,\nbecause the javascript environment will only preserve the original stack trace in the first form.\n\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling "Pause on caught exception".\n(Note that it might pause on many other, unrelated exception as well).\n\nIf that all doesn\'t help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\n',m038:"Missing items in this list?\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n"},gn=I(function(e,t,n,r,o){var i=r&&1===r.length?r[0]:n.name||t||"<unnamed action>";ze(e,t,wn(i,n))},function(e){return this[e]},function(){xe(!1,O("m001"))},!1,!0),_n=I(function(e,t,n){U(e,t,n)},function(e){return this[e]},function(){xe(!1,O("m001"))},!1,!1),wn=function(e,t,n,r){return 1===arguments.length&&"function"==typeof e?P(e.name||"<unnamed action>",e):2===arguments.length&&"function"==typeof t?P(e,t):1===arguments.length&&"string"==typeof e?z(e):z(t).apply(null,arguments)};wn.bound=function(e,t,n){if("function"==typeof e){var r=P("<not yet bound action>",e);return r.autoBind=!0,r}return _n.apply(null,arguments)};var On=Object.prototype.toString,Pn={identity:$,structural:K,default:G},jn=function(){function e(e,t,n,r,o){this.derivation=e,this.scope=t,this.equals=n,this.dependenciesState=Qn.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isPendingUnobservation=!1,this.observers=[],this.observersIndexes={},this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=Qn.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+Ce(),this.value=new Zn(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=Jn.NONE,this.name=r||"ComputedValue@"+Ce(),o&&(this.setter=P(r+"-setter",o))}return e.prototype.onBecomeStale=function(){ht(this)},e.prototype.onBecomeUnobserved=function(){jt(this),this.value=void 0},e.prototype.get=function(){xe(!this.isComputing,"Cycle detected in computation "+this.name,this.derivation),0===Kn.inBatch?(st(),gt(this)&&(this.isTracing!==Jn.NONE&&console.log("[mobx.trace] '"+this.name+"' is being read outside a reactive context and doing a full recompute"),this.value=this.computeValue(!1)),ft()):(pt(this),gt(this)&&this.trackAndCompute()&&yt(this));var e=this.value;if(mt(e))throw e.cause;return e},e.prototype.peek=function(){var e=this.computeValue(!1);if(mt(e))throw e.cause;return e},e.prototype.set=function(e){if(this.setter){xe(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,e)}finally{this.isRunningSetter=!1}}else xe(!1,"[ComputedValue '"+this.name+"'] It is not possible to assign a new value to a computed value.")},e.prototype.trackAndCompute=function(){s()&&f({object:this.scope,type:"compute",fn:this.derivation});var e=this.value,t=this.dependenciesState===Qn.NOT_TRACKING,n=this.value=this.computeValue(!0);return t||mt(e)||mt(n)||!this.equals(e,n)},e.prototype.computeValue=function(e){this.isComputing=!0,Kn.computationDepth++;var t;if(e)t=Ot(this,this.derivation,this.scope);else try{t=this.derivation.call(this.scope)}catch(e){t=new Zn(e)}return Kn.computationDepth--,this.isComputing=!1,t},e.prototype.observe=function(e,t){var n=this,r=!0,o=void 0;return q(function(){var i=n.get();if(!r||t){var a=kt();e({type:"update",object:n,newValue:i,oldValue:o}),xt(a)}r=!1,o=i})},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},e.prototype.valueOf=function(){return Ge(this.get())},e.prototype.whyRun=function(){var e=Boolean(Kn.trackingDerivation),t=Se(this.isComputing?this.newObserving:this.observing).map(function(e){return e.name}),n=Se(at(this).map(function(e){return e.name}));return"\nWhyRun? computation '"+this.name+"':\n * Running because: "+(e?"[active] the value of this computation is needed by a reaction":this.isComputing?"[get] The value of this computed was requested outside a reaction":"[idle] not running at the moment")+"\n"+(this.dependenciesState===Qn.NOT_TRACKING?O("m032"):" * This computation will re-run if any of the following observables changes:\n    "+Me(t)+"\n    "+(this.isComputing&&e?" (... or any observable accessed during the remainder of the current run)":"")+"\n    "+O("m038")+"\n\n  * If the outcome of this computation changes, the following observers will be re-run:\n    "+Me(n)+"\n")},e}();jn.prototype[Ke()]=jn.prototype.valueOf;var Cn=Ve("ComputedValue",jn),kn=function(){function e(e,t){this.target=e,this.name=t,this.values={},this.changeListeners=null,this.interceptors=null}return e.prototype.observe=function(e,t){return xe(!0!==t,"`observe` doesn't support the fire immediately property for observable objects."),l(this,e)},e.prototype.intercept=function(e){return i(this,e)},e}(),xn={},En={},Tn=Ve("ObservableObjectAdministration",kn),Sn=ce(be),Mn=ce(me),In=ce(ge),Nn=ce(_e),Dn=ce(we),Rn={box:function(e,t){return arguments.length>2&&ye("box"),new vn(e,be,t)},shallowBox:function(e,t){return arguments.length>2&&ye("shallowBox"),new vn(e,ge,t)},array:function(e,t){return arguments.length>2&&ye("array"),new pn(e,be,t)},shallowArray:function(e,t){return arguments.length>2&&ye("shallowArray"),new pn(e,ge,t)},map:function(e,t){return arguments.length>2&&ye("map"),new Fn(e,be,t)},shallowMap:function(e,t){return arguments.length>2&&ye("shallowMap"),new Fn(e,ge,t)},object:function(e,t){arguments.length>2&&ye("object");var n={};return J(n,t),se(n,e),n},shallowObject:function(e,t){arguments.length>2&&ye("shallowObject");var n={};return J(n,t),fe(n,e),n},ref:function(){return arguments.length<2?ve(ge,arguments[0]):In.apply(null,arguments)},shallow:function(){return arguments.length<2?ve(me,arguments[0]):Mn.apply(null,arguments)},deep:function(){return arguments.length<2?ve(be,arguments[0]):Sn.apply(null,arguments)},struct:function(){return arguments.length<2?ve(_e,arguments[0]):Nn.apply(null,arguments)}},zn=de;Object.keys(Rn).forEach(function(e){return zn[e]=Rn[e]}),zn.deep.struct=zn.struct,zn.ref.struct=function(){return arguments.length<2?ve(we,arguments[0]):Dn.apply(null,arguments)};var An={},Fn=function(){function e(e,t,n){void 0===t&&(t=be),void 0===n&&(n="ObservableMap@"+Ce()),this.enhancer=t,this.name=n,this.$mobx=An,this._data=Object.create(null),this._hasMap=Object.create(null),this._keys=new pn(void 0,ge,this.name+".keys()",!0),this.interceptors=null,this.changeListeners=null,this.dehancer=void 0,this.merge(e)}return e.prototype._has=function(e){return void 0!==this._data[e]},e.prototype.has=function(e){return!!this.isValidKey(e)&&(e=""+e,this._hasMap[e]?this._hasMap[e].get():this._updateHasMapEntry(e,!1).get())},e.prototype.set=function(e,t){this.assertValidKey(e),e=""+e;var n=this._has(e);if(o(this)){var r=a(this,{type:n?"update":"add",object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this._updateValue(e,t):this._addValue(e,t),this},e.prototype.delete=function(e){var t=this;if(this.assertValidKey(e),e=""+e,o(this)){var n=a(this,{type:"delete",object:this,name:e});if(!n)return!1}if(this._has(e)){var r=s(),i=u(this),n=i||r?{type:"delete",object:this,oldValue:this._data[e].value,name:e}:null;return r&&p(n),Oe(function(){t._keys.remove(e),t._updateHasMapEntry(e,!1),t._data[e].setNewValue(void 0),t._data[e]=void 0}),i&&c(this,n),r&&d(),!0}return!1},e.prototype._updateHasMapEntry=function(e,t){var n=this._hasMap[e];return n?n.setNewValue(t):n=this._hasMap[e]=new vn(t,ge,this.name+"."+e+"?",!1),n},e.prototype._updateValue=function(e,t){var n=this._data[e];if((t=n.prepareNewValue(t))!==hn){var r=s(),o=u(this),i=o||r?{type:"update",object:this,oldValue:n.value,name:e,newValue:t}:null;r&&p(i),n.setNewValue(t),o&&c(this,i),r&&d()}},e.prototype._addValue=function(e,t){var n=this;Oe(function(){var r=n._data[e]=new vn(t,n.enhancer,n.name+"."+e,!1);t=r.value,n._updateHasMapEntry(e,!0),n._keys.push(e)});var r=s(),o=u(this),i=o||r?{type:"add",object:this,name:e,newValue:t}:null;r&&p(i),o&&c(this,i),r&&d()},e.prototype.get=function(e){return e=""+e,this.has(e)?this.dehanceValue(this._data[e].get()):this.dehanceValue(void 0)},e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.keys=function(){return v(this._keys.slice())},e.prototype.values=function(){return v(this._keys.map(this.get,this))},e.prototype.entries=function(){var e=this;return v(this._keys.map(function(t){return[t,e.get(t)]}))},e.prototype.forEach=function(e,t){var n=this;this.keys().forEach(function(r){return e.call(t,n.get(r),r,n)})},e.prototype.merge=function(e){var t=this;return Un(e)&&(e=e.toJS()),Oe(function(){Ne(e)?Object.keys(e).forEach(function(n){return t.set(n,e[n])}):Array.isArray(e)?e.forEach(function(e){var n=e[0],r=e[1];return t.set(n,r)}):He(e)?e.forEach(function(e,n){return t.set(n,e)}):null!==e&&void 0!==e&&ke("Cannot initialize map from "+e)}),this},e.prototype.clear=function(){var e=this;Oe(function(){Ct(function(){e.keys().forEach(e.delete,e)})})},e.prototype.replace=function(e){var t=this;return Oe(function(){var n=We(e);t.keys().filter(function(e){return-1===n.indexOf(e)}).forEach(function(e){return t.delete(e)}),t.merge(e)}),this},Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.toJS=function(){var e=this,t={};return this.keys().forEach(function(n){return t[n]=e.get(n)}),t},e.prototype.toJSON=function(){return this.toJS()},e.prototype.isValidKey=function(e){return null!==e&&void 0!==e&&("string"==typeof e||"number"==typeof e||"boolean"==typeof e)},e.prototype.assertValidKey=function(e){if(!this.isValidKey(e))throw new Error("[mobx.map] Invalid key: '"+e+"', only strings, numbers and booleans are accepted as key in observable maps.")},e.prototype.toString=function(){var e=this;return this.name+"[{ "+this.keys().map(function(t){return t+": "+e.get(t)}).join(", ")+" }]"},e.prototype.observe=function(e,t){return xe(!0!==t,O("m033")),l(this,e)},e.prototype.intercept=function(e){return i(this,e)},e}();b(Fn.prototype,function(){return this.entries()});var Un=Ve("ObservableMap",Fn),Vn=[];Object.freeze(Vn);var Ln=[],Bn=function(){},Hn=Object.prototype.hasOwnProperty,Wn=["mobxGuid","resetId","spyListeners","strictMode","runId"],$n=function(){function e(){this.version=5,this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.strictMode=!1,this.resetId=0,this.spyListeners=[],this.globalReactionErrorHandlers=[]}return e}(),Kn=new $n,Gn=!1,qn=!1,Xn=!1,Yn=je();Yn.__mobxInstanceCount?(Yn.__mobxInstanceCount++,setTimeout(function(){Gn||qn||Xn||(Xn=!0,console.warn("[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details."))},1)):Yn.__mobxInstanceCount=1;var Qn;!function(e){e[e.NOT_TRACKING=-1]="NOT_TRACKING",e[e.UP_TO_DATE=0]="UP_TO_DATE",e[e.POSSIBLY_STALE=1]="POSSIBLY_STALE",e[e.STALE=2]="STALE"}(Qn||(Qn={}));var Jn;!function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Jn||(Jn={}));var Zn=function(){function e(e){this.cause=e}return e}(),er=function(){function e(e,t){void 0===e&&(e="Reaction@"+Ce()),this.name=e,this.onInvalidate=t,this.observing=[],this.newObserving=[],this.dependenciesState=Qn.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+Ce(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=Jn.NONE}return e.prototype.onBecomeStale=function(){this.schedule()},e.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,Kn.pendingReactions.push(this),Rt())},e.prototype.isScheduled=function(){return this._isScheduled},e.prototype.runReaction=function(){this.isDisposed||(st(),this._isScheduled=!1,gt(this)&&(this._isTrackPending=!0,this.onInvalidate(),this._isTrackPending&&s()&&f({object:this,type:"scheduled-reaction"})),ft())},e.prototype.track=function(e){st();var t,n=s();n&&(t=Date.now(),p({object:this,type:"reaction",fn:e})),this._isRunning=!0;var r=Ot(this,e,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&jt(this),mt(r)&&this.reportExceptionInDerivation(r.cause),n&&d({time:Date.now()-t}),ft()},e.prototype.reportExceptionInDerivation=function(e){var t=this;if(this.errorHandler)return void this.errorHandler(e,this);var n="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this,r=O("m037");console.error(n||r,e),s()&&f({type:"error",message:n,error:e,object:this}),Kn.globalReactionErrorHandlers.forEach(function(n){return n(e,t)})},e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(st(),jt(this),ft()))},e.prototype.getDisposer=function(){var e=this.dispose.bind(this);return e.$mobx=this,e.onError=Nt,e},e.prototype.toString=function(){return"Reaction["+this.name+"]"},e.prototype.whyRun=function(){var e=Se(this._isRunning?this.newObserving:this.observing).map(function(e){return e.name});return"\nWhyRun? reaction '"+this.name+"':\n * Status: ["+(this.isDisposed?"stopped":this._isRunning?"running":this.isScheduled()?"scheduled":"idle")+"]\n * This reaction will re-run if any of the following observables changes:\n    "+Me(e)+"\n    "+(this._isRunning?" (... or any observable accessed during the remainder of the current run)":"")+"\n\t"+O("m038")+"\n"},e.prototype.trace=function(e){void 0===e&&(e=!1),Mt(this,e)},e}(),tr=100,nr=function(e){return e()},rr=Ve("Reaction",er),or=Bt(Pn.default),ir=Bt(Pn.structural),ar=function(e,t,n){if("string"==typeof t)return or.apply(null,arguments);xe("function"==typeof e,O("m011")),xe(arguments.length<3,O("m012"));var r="object"==typeof t?t:{};r.setter="function"==typeof t?t:r.setter;var o=r.equals?r.equals:r.compareStructural||r.struct?Pn.structural:Pn.default;return new jn(e,r.context,o,r.name||e.name||"",r.setter)};ar.struct=ir,ar.equals=Bt;var ur={allowStateChanges:T,deepEqual:V,getAtom:Je,getDebugName:et,getDependencyTree:tt,getAdministration:Ze,getGlobalState:Ye,getObserverTree:rt,interceptReads:en,isComputingDerivation:_t,isSpyEnabled:s,onReactionError:Dt,reserveArrayBuffer:_,resetGlobalState:Qe,isolateGlobalState:qe,shareGlobalState:Xe,spyReport:f,spyReportEnd:d,spyReportStart:p,setReactionScheduler:At},lr={Reaction:er,untracked:Ct,Atom:rn,BaseAtom:nn,useStrict:x,isStrictModeEnabled:E,spy:y,comparer:Pn,asReference:Ft,asFlat:Vt,asStructure:Ut,asMap:Lt,isModifierDescriptor:he,isObservableObject:ue,isBoxedObservable:bn,isObservableArray:w,ObservableMap:Fn,isObservableMap:Un,map:Pe,transaction:Oe,observable:zn,computed:ar,isObservable:le,isComputed:Ht,extendObservable:se,extendShallowObservable:fe,observe:Wt,intercept:Gt,autorun:q,autorunAsync:Y,when:X,reaction:Q,action:wn,isAction:F,runInAction:A,expr:Yt,toJS:Qt,createTransformer:Jt,whyRun:St,isArrayLike:Be,extras:ur},cr=!1;for(var sr in lr)!function(e){var t=lr[e];Object.defineProperty(lr,e,{get:function(){return cr||(cr=!0,console.warn("Using default export (`import mobx from 'mobx'`) is deprecated and won’t work in mobx@4.0.0\nUse `import * as mobx from 'mobx'` instead")),t}})}(sr);"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:y,extras:ur}),t.default=lr}.call(t,n(98))},function(e,t,n){"use strict";function r(e){function t(t,n,r,o,i,a){for(var u=arguments.length,l=Array(u>6?u-6:0),c=6;c<u;c++)l[c-6]=arguments[c];return Object(O.untracked)(function(){if(o=o||"<<anonymous>>",a=a||r,null==n[r]){if(t){var u=null===n[r]?"null":"undefined";return new Error("The "+i+" `"+a+"` is marked as required in `"+o+"`, but its value is `"+u+"`.")}return null}return e.apply(void 0,[n,r,o,i,a].concat(l))})}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function o(e,t){return"symbol"===e||("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}function i(e){var t=void 0===e?"undefined":k(e);return Array.isArray(e)?"array":e instanceof RegExp?"object":o(t,e)?"symbol":t}function a(e){var t=i(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function u(e,t){return r(function(n,r,o,u,l){return Object(O.untracked)(function(){if(e&&i(n[r])===t.toLowerCase())return null;var u=void 0;switch(t){case"Array":u=O.isObservableArray;break;case"Object":u=O.isObservableObject;break;case"Map":u=O.isObservableMap;break;default:throw new Error("Unexpected mobxType: "+t)}var c=n[r];if(!u(c)){var s=a(c),f=e?" or javascript `"+t.toLowerCase()+"`":"";return new Error("Invalid prop `"+l+"` of type `"+s+"` supplied to `"+o+"`, expected `mobx.Observable"+t+"`"+f+".")}return null})})}function l(e,t){return r(function(n,r,o,i,a){for(var l=arguments.length,c=Array(l>5?l-5:0),s=5;s<l;s++)c[s-5]=arguments[s];return Object(O.untracked)(function(){if("function"!=typeof t)return new Error("Property `"+a+"` of component `"+o+"` has invalid PropType notation.");var l=u(e,"Array")(n,r,o);if(l instanceof Error)return l;for(var s=n[r],f=0;f<s.length;f++)if((l=t.apply(void 0,[s,f,o,i,a+"["+f+"]"].concat(c)))instanceof Error)return l;return null})})}function c(e){return!(e.prototype&&e.prototype.render)}function s(e,t,n){var r,o,i="inject-"+(t.displayName||t.name||t.constructor&&t.constructor.name||"Unknown");n&&(i+="-with-"+n);var a=(o=r=function(n){function r(){var e,t,n,o;x(this,r);for(var i=arguments.length,a=Array(i),u=0;u<i;u++)a[u]=arguments[u];return t=n=S(this,(e=r.__proto__||Object.getPrototypeOf(r)).call.apply(e,[this].concat(a))),n.storeRef=function(e){n.wrappedInstance=e},o=t,S(n,o)}return T(r,n),E(r,[{key:"render",value:function(){var n={};for(var r in this.props)this.props.hasOwnProperty(r)&&(n[r]=this.props[r]);var o=e(this.context.mobxStores||{},n,this.context)||{};for(var i in o)n[i]=o[i];return c(t)||(n.ref=this.storeRef),Object(P.createElement)(t,n)}}]),r}(P.Component),r.displayName=i,o);return V(a,t),a.wrappedComponent=t,Object.defineProperties(a,Y),a}function f(e){return function(t,n){return e.forEach(function(e){if(!(e in n)){if(!(e in t))throw new Error("MobX injector: Store '"+e+"' is not available! Make sure it is provided by some Provider");n[e]=t[e]}}),n}}function p(){var e=void 0;if("function"==typeof arguments[0])return e=arguments[0],function(t){var n=s(e,t);return n.isMobxInjector=!1,n=_(n),n.isMobxInjector=!0,n};for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e=f(t),function(n){return s(e,n,t.join("-"))}}function d(e){if(C.findDOMNode)try{return Object(C.findDOMNode)(e)}catch(e){return null}return null}function y(e){var t=d(e);t&&ee&&ee.set(t,e),te.emit({event:"render",renderTime:e.__$mobRenderEnd-e.__$mobRenderStart,totalTime:Date.now()-e.__$mobRenderStart,component:e,node:t})}function h(){if("undefined"==typeof WeakMap)throw new Error("[mobx-react] tracking components is not supported in this browser.");Q||(Q=!0)}function v(e){J=e}function b(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e[t],o=re[t],i=r?!0===n?function(){o.apply(this,arguments),r.apply(this,arguments)}:function(){r.apply(this,arguments),o.apply(this,arguments)}:o;e[t]=i}function m(e,t){if(g(e,t))return!0;if("object"!==(void 0===e?"undefined":k(e))||null===e||"object"!==(void 0===t?"undefined":k(t))||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!hasOwnProperty.call(t,n[o])||!g(e[n[o]],t[n[o]]))return!1;return!0}function g(e,t){return e===t?0!==e||1/e==1/t:e!==e&&t!==t}function _(e,t){if("string"==typeof e)throw new Error("Store names should be provided as array");if(Array.isArray(e))return Z||(Z=!0,console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`')),t?p.apply(null,e)(_(t)):function(t){return _(e,t)};var n=e;if(!0===n.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),!("function"!=typeof n||n.prototype&&n.prototype.render||n.isReactClass||P.Component.isPrototypeOf(n))){var r,o;return _((o=r=function(e){function t(){return x(this,t),S(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return T(t,e),E(t,[{key:"render",value:function(){return n.call(this,this.props,this.context)}}]),t}(P.Component),r.displayName=n.displayName||n.name,r.contextTypes=n.contextTypes,r.propTypes=n.propTypes,r.defaultProps=n.defaultProps,o))}if(!n)throw new Error("Please pass a valid component to 'observer'");return w(n.prototype||n),n.isMobXReactObserver=!0,n}function w(e){b(e,"componentWillMount",!0),["componentDidMount","componentWillUnmount","componentDidUpdate"].forEach(function(t){b(e,t)}),e.shouldComponentUpdate||(e.shouldComponentUpdate=re.shouldComponentUpdate)}Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"propTypes",function(){return q}),n.d(t,"PropTypes",function(){return q}),n.d(t,"onError",function(){return se}),n.d(t,"observer",function(){return _}),n.d(t,"Observer",function(){return oe}),n.d(t,"renderReporter",function(){return te}),n.d(t,"componentByNodeRegistery",function(){return ee}),n.d(t,"trackComponents",function(){return h}),n.d(t,"useStaticRendering",function(){return v}),n.d(t,"Provider",function(){return ce}),n.d(t,"inject",function(){return p});var O=n(2),P=n(1),j=n.n(P),C=n(33),k=(n.n(C),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e}),x=(function(){function e(e){this.value=e}function t(t){function n(e,t){return new Promise(function(n,o){var u={key:e,arg:t,resolve:n,reject:o,next:null};a?a=a.next=u:(i=a=u,r(e,t))})}function r(n,i){try{var a=t[n](i),u=a.value;u instanceof e?Promise.resolve(u.value).then(function(e){r("next",e)},function(e){r("throw",e)}):o(a.done?"return":"normal",a.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":i.resolve({value:t,done:!0});break;case"throw":i.reject(t);break;default:i.resolve({value:t,done:!1})}i=i.next,i?r(i.key,i.arg):a=null}var i,a;this._invoke=n,"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}),E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),T=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},S=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},M=function(){function e(){x(this,e),this.listeners=[]}return E(e,[{key:"on",value:function(e){var t=this;return this.listeners.push(e),function(){var n=t.listeners.indexOf(e);-1!==n&&t.listeners.splice(n,1)}}},{key:"emit",value:function(e){this.listeners.forEach(function(t){return t(e)})}}]),e}(),I={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},N={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},D=Object.defineProperty,R=Object.getOwnPropertyNames,z=Object.getOwnPropertySymbols,A=Object.getOwnPropertyDescriptor,F=Object.getPrototypeOf,U=F&&F(Object),V=function e(t,n,r){if("string"!=typeof n){if(U){var o=F(n);o&&o!==U&&e(t,o,r)}var i=R(n);z&&(i=i.concat(z(n)));for(var a=0;a<i.length;++a){var u=i[a];if(!(I[u]||N[u]||r&&r[u])){var l=A(n,u);try{D(t,u,l)}catch(e){}}}return t}return t},L=u(!1,"Array"),B=l.bind(null,!1),H=u(!1,"Map"),W=u(!1,"Object"),$=u(!0,"Array"),K=l.bind(null,!0),G=u(!0,"Object"),q=Object.freeze({observableArray:L,observableArrayOf:B,observableMap:H,observableObject:W,arrayOrObservableArray:$,arrayOrObservableArrayOf:K,objectOrObservableObject:G}),X={mobxStores:G};Object.seal(X);var Y={contextTypes:{get:function(){return X},set:function(e){console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`")},configurable:!0,enumerable:!1},isMobxInjector:{value:!0,writable:!0,configurable:!0,enumerable:!0}},Q=!1,J=!1,Z=!1,ee="undefined"!=typeof WeakMap?new WeakMap:void 0,te=new M,ne=new M,re={componentWillMount:function(){function e(e){var t=this[e],n=new O.Atom("reactive "+e);Object.defineProperty(this,e,{configurable:!0,enumerable:!0,get:function(){return n.reportObserved(),t},set:function(e){i||m(t,e)?t=e:(t=e,o=!0,n.reportChanged(),o=!1)}})}var t=this;if(!0!==J){var n=this.displayName||this.name||this.constructor&&(this.constructor.displayName||this.constructor.name)||"<component>",r=this._reactInternalInstance&&this._reactInternalInstance._rootNodeID||this._reactInternalFiber&&this._reactInternalFiber._debugID,o=!1,i=!1;e.call(this,"props"),e.call(this,"state");var a=this.render.bind(this),u=null,l=!1,c=function(){return u=new O.Reaction(n+"#"+r+".render()",function(){if(!l&&(l=!0,"function"==typeof t.componentWillReact&&t.componentWillReact(),!0!==t.__$mobxIsUnmounted)){var e=!0;try{i=!0,o||P.Component.prototype.forceUpdate.call(t),e=!1}finally{i=!1,e&&u.dispose()}}}),u.reactComponent=t,s.$mobx=u,t.render=s,s()},s=function(){l=!1;var e=void 0,n=void 0;if(u.track(function(){Q&&(t.__$mobRenderStart=Date.now());try{n=O.extras.allowStateChanges(!1,a)}catch(t){e=t}Q&&(t.__$mobRenderEnd=Date.now())}),e)throw ne.emit(e),e;return n};this.render=c}},componentWillUnmount:function(){if(!0!==J&&(this.render.$mobx&&this.render.$mobx.dispose(),this.__$mobxIsUnmounted=!0,Q)){var e=d(this);e&&ee&&ee.delete(e),te.emit({event:"destroy",component:this,node:e})}},componentDidMount:function(){Q&&y(this)},componentDidUpdate:function(){Q&&y(this)},shouldComponentUpdate:function(e,t){return J&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!m(this.props,e)}},oe=_(function(e){var t=e.children,n=e.inject,r=e.render,o=t||r;if(void 0===o)return null;if(!n)return o();var i=p(n)(o);return j.a.createElement(i,null)});oe.displayName="Observer";var ie=function(e,t,n,r,o){var i="children"===t?"render":"children";if("function"==typeof e[t]&&"function"==typeof e[i])return new Error("Invalid prop,do not use children and render in the same time in`"+n);if("function"!=typeof e[t]&&"function"!=typeof e[i])return new Error("Invalid prop `"+o+"` of type `"+k(e[t])+"` supplied to `"+n+"`, expected `function`.")};oe.propTypes={render:ie,children:ie};var ae,ue,le={children:!0,key:!0,ref:!0},ce=(ue=ae=function(e){function t(){return x(this,t),S(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return T(t,e),E(t,[{key:"render",value:function(){return P.Children.only(this.props.children)}},{key:"getChildContext",value:function(){var e={},t=this.context.mobxStores;if(t)for(var n in t)e[n]=t[n];for(var r in this.props)le[r]||"suppressChangedStoreWarning"===r||(e[r]=this.props[r]);return{mobxStores:e}}},{key:"componentWillReceiveProps",value:function(e){if(Object.keys(e).length!==Object.keys(this.props).length&&console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children"),!e.suppressChangedStoreWarning)for(var t in e)le[t]||this.props[t]===e[t]||console.warn("MobX Provider: Provided store '"+t+"' has changed. Please avoid replacing stores as the change might not propagate to all children")}}]),t}(P.Component),ae.contextTypes={mobxStores:G},ae.childContextTypes={mobxStores:G.isRequired},ue);if(!P.Component)throw new Error("mobx-react requires React to be available");if(!O.extras)throw new Error("mobx-react requires mobx to be available");"function"==typeof C.unstable_batchedUpdates&&O.extras.setReactionScheduler(C.unstable_batchedUpdates);var se=function(e){return ne.on(e)};if("object"===("undefined"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__?"undefined":k(__MOBX_DEVTOOLS_GLOBAL_HOOK__))){var fe={spy:O.spy,extras:O.extras},pe={renderReporter:te,componentByNodeRegistery:ee,trackComponents:h};__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(pe,fe)}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(71);Object.defineProperty(t,"EdgeConverter",{enumerable:!0,get:function(){return r(o).default}});var i=n(72);Object.defineProperty(t,"NodeConverter",{enumerable:!0,get:function(){return r(i).default}});var a=n(28);Object.defineProperty(t,"RelationConverter",{enumerable:!0,get:function(){return r(a).default}});var u=n(18);Object.defineProperty(t,"ComponentConverter",{enumerable:!0,get:function(){return r(u).default}});var l=n(73);Object.defineProperty(t,"ModelConverter",{enumerable:!0,get:function(){return r(l).default}});var c=n(29);Object.defineProperty(t,"Converter",{enumerable:!0,get:function(){return r(c).default}});var s=n(108);Object.defineProperty(t,"Storage",{enumerable:!0,get:function(){return r(s).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(34);Object.defineProperty(t,"EndEventView",{enumerable:!0,get:function(){return r(o).default}});var i=n(47);Object.defineProperty(t,"StartEventView",{enumerable:!0,get:function(){return r(i).default}});var a=n(11);Object.defineProperty(t,"EventView",{enumerable:!0,get:function(){return r(a).default}});var u=n(48);Object.defineProperty(t,"SequenceFlowView",{enumerable:!0,get:function(){return r(u).default}});var l=n(49);Object.defineProperty(t,"DVCMViewFactory",{enumerable:!0,get:function(){return r(l).default}});var c=n(50);Object.defineProperty(t,"DVCMView",{enumerable:!0,get:function(){return r(c).default}});var s=n(51);Object.defineProperty(t,"PoolView",{enumerable:!0,get:function(){return r(s).default}});var f=n(53);Object.defineProperty(t,"ActivityView",{enumerable:!0,get:function(){return r(f).default}});var p=n(54);Object.defineProperty(t,"TransactionView",{enumerable:!0,get:function(){return r(p).default}});var d=n(55);Object.defineProperty(t,"EndEvent",{enumerable:!0,get:function(){return r(d).default}});var y=n(56);Object.defineProperty(t,"StartEvent",{enumerable:!0,get:function(){return r(y).default}});var h=n(17);Object.defineProperty(t,"Event",{enumerable:!0,get:function(){return r(h).default}});var v=n(26);Object.defineProperty(t,"SequenceFlow",{enumerable:!0,get:function(){return r(v).default}});var b=n(25);Object.defineProperty(t,"Pool",{enumerable:!0,get:function(){return r(b).default}});var m=n(16);Object.defineProperty(t,"Activity",{enumerable:!0,get:function(){return r(m).default}});var g=n(24);Object.defineProperty(t,"DVCM",{enumerable:!0,get:function(){return r(g).default}});var _=n(15);Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return r(_).default}});var w=n(23);Object.defineProperty(t,"InTransaction",{enumerable:!0,get:function(){return r(w).default}});var O=n(52);Object.defineProperty(t,"DVCMModel",{enumerable:!0,get:function(){return r(O).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(57);Object.defineProperty(t,"Actor",{enumerable:!0,get:function(){return r(o).default}});var i=n(58);Object.defineProperty(t,"Association",{enumerable:!0,get:function(){return r(i).default}});var a=n(59);Object.defineProperty(t,"Extension",{enumerable:!0,get:function(){return r(a).default}});var u=n(60);Object.defineProperty(t,"Inclusion",{enumerable:!0,get:function(){return r(u).default}});var l=n(61);Object.defineProperty(t,"System",{enumerable:!0,get:function(){return r(l).default}});var c=n(62);Object.defineProperty(t,"UseCase",{enumerable:!0,get:function(){return r(c).default}});var s=n(63);Object.defineProperty(t,"UseCases",{enumerable:!0,get:function(){return r(s).default}});var f=n(64);Object.defineProperty(t,"ActorView",{enumerable:!0,get:function(){return r(f).default}});var p=n(65);Object.defineProperty(t,"AssociationView",{enumerable:!0,get:function(){return r(p).default}});var d=n(66);Object.defineProperty(t,"ExtensionView",{enumerable:!0,get:function(){return r(d).default}});var y=n(67);Object.defineProperty(t,"InclusionView",{enumerable:!0,get:function(){return r(y).default}});var h=n(68);Object.defineProperty(t,"SystemView",{enumerable:!0,get:function(){return r(h).default}});var v=n(69);Object.defineProperty(t,"UseCaseView",{enumerable:!0,get:function(){return r(v).default}});var b=n(70);Object.defineProperty(t,"UseCasesView",{enumerable:!0,get:function(){return r(b).default}});var m=n(27);Object.defineProperty(t,"UseCasesViewFactory",{enumerable:!0,get:function(){return r(m).default}});var g=n(0);Object.defineProperty(t,"UseCasesModel",{enumerable:!0,get:function(){return g.Model}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var c,s,f,p,d,y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),h=n(2),v=n(21),b=r(v),m=n(42),g=r(m),_=n(10),w=r(_),O=(c=function(e){function t(){i(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o(e,"_position",s,e),o(e,"_width",f,e),o(e,"_borderWidth",p,e),o(e,"_height",d,e),e._position=new w.default,e.createModel(),e}return u(t,e),y(t,[{key:"getWidth",value:function(){return this._width}},{key:"setWidth",value:function(e){this._width=e}},{key:"getBorderWidth",value:function(){return this._borderWidth}},{key:"setBorderWidth",value:function(e){this._borderWidth=e}},{key:"createModel",value:function(){var e=this.getModelClass();this.model=new e,this.model.addAsRoot(this)}},{key:"getModelClass",value:function(){return g.default}},{key:"append",value:function(e){this.model.addNode(e,this)}},{key:"getChildren",value:function(){return this.model.getChildren(this)}},{key:"_getInRange",value:function(e,t,n){return e<0?0:e>t?t:e}},{key:"getEdgePointPosition",value:function(e){var t={};t.y=this._getInRange(e.y,this.height),t.x=this._getInRange(e.x,this.width);var n=this.width-t.x,r=this.height-t.y;switch(Math.min(t.y,t.x,n,r)){case t.y:t.y=0;break;case t.x:t.x=0;break;case n:t.x=this.width;break;case r:t.y=this.height}return t}},{key:"position",get:function(){return this._position},set:function(e){this._position=e}},{key:"width",get:function(){return this.getWidth()},set:function(e){this.setWidth(e)}},{key:"height",get:function(){return this._height},set:function(e){this._height=e}},{key:"borderWidth",get:function(){return this.getBorderWidth()},set:function(e){this.setBorderWidth(e)}},{key:"contentHeight",get:function(){return this.endPosition.y-this.startPosition.y}},{key:"startPosition",get:function(){return{x:0,y:0}}},{key:"endPosition",get:function(){return{x:this.width,y:this.height}}},{key:"positionInRoot",get:function(){var e=new w.default,t=!0,n=!1,r=void 0;try{for(var o,i=this.parents[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;e.x=e.x+a.position.x+a.startPosition.x,e.y=e.y+a.position.y+a.startPosition.y}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return e.x+=this.position.x,e.y+=this.position.y,e}},{key:"parent",get:function(){return this.model.getParent(this)},set:function(e){console.warn("setting parent not implemented")}},{key:"parents",get:function(){return this.model.getParents(this)},set:function(e){console.warn("setting parents not implemented")}},{key:"children",get:function(){return this.getChildren()}},{key:"descendants",get:function(){this.model.getDescendants(this)}}]),t}(b.default),s=l(c.prototype,"_position",[h.observable],{enumerable:!0,initializer:function(){return null}}),f=l(c.prototype,"_width",[h.observable],{enumerable:!0,initializer:function(){return null}}),p=l(c.prototype,"_borderWidth",[h.observable],{enumerable:!0,initializer:function(){return 1}}),d=l(c.prototype,"_height",[h.observable],{enumerable:!0,initializer:function(){return null}}),l(c.prototype,"position",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"position"),c.prototype),l(c.prototype,"width",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"width"),c.prototype),l(c.prototype,"height",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"height"),c.prototype),l(c.prototype,"borderWidth",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"borderWidth"),c.prototype),l(c.prototype,"contentHeight",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"contentHeight"),c.prototype),l(c.prototype,"startPosition",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"startPosition"),c.prototype),l(c.prototype,"endPosition",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"endPosition"),c.prototype),l(c.prototype,"positionInRoot",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"positionInRoot"),c.prototype),l(c.prototype,"parent",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"parent"),c.prototype),l(c.prototype,"parents",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"parents"),c.prototype),l(c.prototype,"children",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"children"),c.prototype),l(c.prototype,"descendants",[h.computed],Object.getOwnPropertyDescriptor(c.prototype,"descendants"),c.prototype),c);t.default=O},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(106);Object.defineProperty(t,"localizable",{enumerable:!0,get:function(){return r(o).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(1),f=r(s),p=n(3),d=n(20),y=r(d),h=n(100),v=r(h),b=(0,p.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getStyleClass",value:function(){var e="modeling-component",t=this.props.className;return t&&(e+=" "+t),this.component.selected&&(e+=" selected"),e}},{key:"getHandledEvents",value:function(){return null}},{key:"getCss",value:function(){return{}}},{key:"getChildrenViews",value:function(){var e=this.component.getChildren(),t=[],n=!0,r=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value;this.viewFactory.addViews(u,t)}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}if(this.component.model.root!=this.component)return t;var l=this.component.model.edges,c=!0,s=!1,f=void 0;try{for(var p,d=l[Symbol.iterator]();!(c=(p=d.next()).done);c=!0){var y=p.value;this.viewFactory.addViews(y,t)}}catch(e){s=!0,f=e}finally{try{!c&&d.return&&d.return()}finally{if(s)throw f}}var h=this.component.model.selected;return h&&t.push(this._getSelectionView(h)),t}},{key:"_getSelectionView",value:function(e){return f.default.createElement(v.default,{component:e,key:"selection-view"})}},{key:"getContent",value:function(){return this.getChildrenViews()}},{key:"getdefaultViewFactory",value:function(){return new y.default}},{key:"initialize",value:function(e){this.viewFactory=e.viewFactory,this.viewFactory||(this.viewFactory=this.getdefaultViewFactory()),this.component=e.component}},{key:"render",value:function(){this.initialize(this.props);var e=Object.assign({},this.getCss(),this.props.style);return f.default.createElement("div",l({className:this.getStyleClass()},this.getHandledEvents(),{style:e}),this.getContent())}}]),t}(f.default.Component))||u;t.default=b},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l,c=n(2),s=(a=function e(t,n){o(this,e),r(this,"x",u,this),r(this,"y",l,this),t&&(this.x=t),n&&(this.y=n)},u=i(a.prototype,"x",[c.observable],{enumerable:!0,initializer:function(){return 0}}),l=i(a.prototype,"y",[c.observable],{enumerable:!0,initializer:function(){return 0}}),a);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=(function(e){e&&e.__esModule}(c),n(0)),f=(0,s.move)(a=(0,s.select)(a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"getStyleClass",value:function(){return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" event"}}]),t}(s.NodeView))||a)||a;t.default=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=(r(s),n(3)),p=n(9),d=r(p),y=(0,f.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"getCss",value:function(){var e=c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getCss",this).call(this);return e.width=this.component.width+"px",e.height=this.component.height+"px",e.top=this.component.position.y+"px",e.left=this.component.position.x+"px",e.borderWidth=this.component.borderWidth+"px",e}}]),t}(d.default))||u;t.default=y},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c,s,f=n(2),p=n(21),d=function(e){return e&&e.__esModule?e:{default:e}}(p),y=(l=function(e){function t(){var e,n,a,u;o(this,t);for(var l=arguments.length,f=Array(l),p=0;p<l;p++)f[p]=arguments[p];return n=a=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(f))),r(a,"source",c,a),r(a,"target",s,a),u=n,i(a,u)}return a(t,e),t}(d.default),c=u(l.prototype,"source",[f.observable],{enumerable:!0,initializer:function(){return null}}),s=u(l.prototype,"target",[f.observable],{enumerable:!0,initializer:function(){return null}}),l);t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var c,s,f,p,d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=n(2),h=n(13),v=r(h),b=n(10),m=r(b),g=(c=function(e){function t(){i(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o(e,"bendPoints",s,e),o(e,"sourcePoint",f,e),o(e,"targetPoint",p,e),e._initializeSourcePoints(),e}return u(t,e),d(t,[{key:"_initializeSourcePoints",value:function(){this.sourcePoint=new m.default,this.targetPoint=new m.default}},{key:"addBendPoint",value:function(e,t){this.bendPoints.push(new m.default(e,t))}}]),t}(v.default),s=l(c.prototype,"bendPoints",[y.observable],{enumerable:!0,initializer:function(){return[]}}),f=l(c.prototype,"sourcePoint",[y.observable],{enumerable:!0,initializer:null}),p=l(c.prototype,"targetPoint",[y.observable],{enumerable:!0,initializer:null}),l(c.prototype,"addBendPoint",[y.action],Object.getOwnPropertyDescriptor(c.prototype,"addBendPoint"),c.prototype),c);t.default=g},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var c,s,f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),p=n(2),d=n(0),y=n(23),h=function(e){return e&&e.__esModule?e:{default:e}}(y),v=(c=function(e){function t(e){i(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return o(n,"name",s,n),n.name=e,n}return u(t,e),f(t,[{key:"activities",get:function(){var e=[],t=!0,n=!1,r=void 0;try{for(var o,i=this.inTransactions[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;e.push(a.target)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return e}},{key:"inTransactions",get:function(){var e=this;return this.model.inTransactions.filter(function(t){return t.source==e})}}]),f(t,[{key:"_getSurroundingPoints",value:function(e){if(0==e)return[];var t=99999999,n=99999999,r=0,o=0,i=!0,a=!1,u=void 0;try{for(var l,c=e[Symbol.iterator]();!(i=(l=c.next()).done);i=!0){var s=l.value,f=s.positionInRoot.x,p=s.positionInRoot.y,y=f+2*s.borderWidth+s.width,h=p+2*s.borderWidth+s.height;f<t&&(t=f),p<n&&(n=p),y>r&&(r=y),h>o&&(o=h)}}catch(e){a=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}return t-=20,n-=20,r+=20,o+=20,{topLeft:new d.Point(t,n),topRight:new d.Point(r,n),botLeft:new d.Point(t,o),botRight:new d.Point(r,o)}}},{key:"addActivity",value:function(e){var t=new h.default;t.source=this,t.target=e,this.model.addRelation(t)}},{key:"removeActivity",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.inTransactions[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.target==e&&this.model.removeComponent(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}},{key:"processes",get:function(){var e=[],t=!0,n=!1,r=void 0;try{for(var o,i=this.activities[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.parents.includes(this.model.root.processesPool)&&e.push(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return e}},{key:"functions",get:function(){var e=[],t=!0,n=!1,r=void 0;try{for(var o,i=this.activities[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.parents.includes(this.model.root.functionsPool)&&e.push(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return e}},{key:"processesPoints",get:function(){var e=this.processes,t=this._getSurroundingPoints(e);return t.botRight?[t.botRight,t.botLeft,t.topLeft,t.topRight]:[]}},{key:"functionsPoints",get:function(){var e=this.functions,t=this._getSurroundingPoints(e);return t.topLeft?[t.topLeft,t.topRight,t.botRight,t.botLeft]:[]}},{key:"transactionBounds",get:function(){var e=[],t=this.functionsPoints,n=this.processesPoints;return e.push.apply(e,r(t)),e.push.apply(e,r(n)),e}}]),t}(d.Component),l(c.prototype,"activities",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"activities"),c.prototype),l(c.prototype,"inTransactions",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"inTransactions"),c.prototype),s=l(c.prototype,"name",[p.observable],{enumerable:!0,initializer:function(){return"Transaction"}}),l(c.prototype,"processes",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"processes"),c.prototype),l(c.prototype,"functions",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"functions"),c.prototype),l(c.prototype,"processesPoints",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"processesPoints"),c.prototype),l(c.prototype,"functionsPoints",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"functionsPoints"),c.prototype),l(c.prototype,"transactionBounds",[p.computed],Object.getOwnPropertyDescriptor(c.prototype,"transactionBounds"),c.prototype),c);t.default=v},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c,s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(2),p=n(0),d=(l=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r(n,"name",c,n),n.name=e,n.width=80,n.height=80,n}return a(t,e),s(t,[{key:"isFunction",get:function(){return this.parents.includes(this.model.root.functionsPool)}},{key:"isProcess",get:function(){return this.parents.includes(this.model.root.processesPool)}}]),t}(p.Node),c=u(l.prototype,"name",[f.observable],{enumerable:!0,initializer:function(){return"Activity"}}),u(l.prototype,"isFunction",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"isFunction"),l.prototype),u(l.prototype,"isProcess",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"isProcess"),l.prototype),l);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(2),c=n(0),s=(a=function(e){function t(e){r(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.width=50,n.height=50,n}return i(t,e),u(t,[{key:"_getR",value:function(){return this.width/2+this._distanceFromContent}},{key:"_getInRange",value:function(e){var t=-this._distanceFromContent,n=this.width+this._distanceFromContent;return e<t?t:e>n?n:e}},{key:"getEdgePointPosition",value:function(e){var t={};t.y=this._getInRange(e.y)+this._distanceFromContent,t.x=this._getInRange(e.x)+this._distanceFromContent;var n=this._getR(),r=t.x-n,o=n*n,i=r*r,a=o-i,u=Math.sqrt(a),l=t.y>n?u:-u;return t.y=n+l,t.y-=this._distanceFromContent,t.x-=this._distanceFromContent,t}},{key:"_distanceFromContent",get:function(){return this.borderWidth}}]),t}(c.Node),function(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}(a.prototype,"_distanceFromContent",[l.computed],Object.getOwnPropertyDescriptor(a.prototype,"_distanceFromContent"),a.prototype),a);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(0),c=n(29),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"modeling.Component"}},{key:"createModelInstance",value:function(){return new l.Component}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.id=e.id,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.id=e.id,n}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.Event"}},{key:"createModelInstance",value:function(){return new u.Event}}]),t}(l.NodeConverter);t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),u=r(a),l=n(35),c=r(l),s=n(37),f=r(s),p=n(38),d=r(p),y=n(44),h=r(y),v=n(12),b=r(v),m=n(9),g=(r(m),n(45)),_=r(g),w=n(46),O=r(w),P=n(7),j=r(P),C=n(14),k=r(C),x=function(){function e(){o(this,e)}return i(e,[{key:"_addEdgePoints",value:function(e,t){t.push(u.default.createElement(d.default,{component:e,point:e.sourcePoint,targetNode:e.source,key:e.id+"_sourcePoint",viewFactory:this})),t.push(u.default.createElement(d.default,{component:e,targetNode:e.target,point:e.targetPoint,key:e.id+"_targetPoint",viewFactory:this}));var n=!0,r=!1,o=void 0;try{for(var i,a=e.bendPoints[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var l=i.value;t.push(u.default.createElement(d.default,{component:e,point:l,key:e.id+"_bendpoint_"+l.x+", "+l.y,viewFactory:this}))}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}}},{key:"getEdgeViewClass",value:function(e){return h.default}},{key:"_addEdgeViews",value:function(e,t){var n=this.getEdgeViewClass(e),r=[],o={source:e.sourcePoint},i=!0,a=!1,l=void 0;try{for(var c,s=e.bendPoints[Symbol.iterator]();!(i=(c=s.next()).done);i=!0){var f=c.value;o.target=f,r.push(o),o={source:f}}}catch(e){a=!0,l=e}finally{try{!i&&s.return&&s.return()}finally{if(a)throw l}}o.target=e.targetPoint,r.push(o);var p=r.length-1,d=0==p?e.target:null;t.push(u.default.createElement(n,{sourcePoint:r[0].source,sourceTargetNode:e.source,targetPoint:r[0].target,targetNode:d,component:e,key:e.id+"_edge",viewFactory:this})),p>0&&t.push(u.default.createElement(n,{sourcePoint:r[p].source,targetPoint:r[p].target,targetNode:e.target,component:e,key:e.id+"_edge_end",viewFactory:this}));for(var y=1;y<p;y++)t.push(u.default.createElement(n,{sourcePoint:r[y].source,targetPoint:r[y].target,component:e,key:e.id+"_edge_"+y,viewFactory:this}))}},{key:"_addEdgeComponents",value:function(e,t){this._addEdgePoints(e,t),this._addEdgeViews(e,t)}},{key:"getNodeViewClass",value:function(e){return e instanceof O.default?c.default:e instanceof _.default?f.default:b.default}},{key:"addViews",value:function(e,t){if(e instanceof k.default)return void this._addEdgeComponents(e,t);if(e instanceof j.default){var n=this.getNodeViewClass(e);return void t.push(u.default.createElement(n,{component:e,key:e.id,viewFactory:this}))}console.warn("Unknown component (id='"+e.id+"')")}}]),e}();t.default=x},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),f=(a=function(){function e(){o(this,e),r(this,"id",u,this),r(this,"model",l,this)}return c(e,[{key:"remove",value:function(){this.model.removeComponent(this)}},{key:"select",value:function(){this.selected=!0}},{key:"selected",get:function(){return this.model.selected==this},set:function(e){if(e)return void(this.model.selected=this);this.model.selected=null}}]),e}(),u=i(a.prototype,"id",[s.observable],{enumerable:!0,initializer:function(){return null}}),l=i(a.prototype,"model",[s.observable],{enumerable:!0,initializer:function(){return null}}),i(a.prototype,"selected",[s.computed],Object.getOwnPropertyDescriptor(a.prototype,"selected"),a.prototype),a);t.default=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(40),i=r(o),a=n(102),u=r(a),l=function(e){var t=e.prototype.getHandledEvents;e.prototype.getHandledEvents=function(){var e=new u.default(this.component),n={onMouseDown:e.handleMouseDown.bind(e)},r=t.apply(this,arguments);return i.default.combineActions(n,r)}};t.default=l},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(0)),u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(a.Relation);t.default=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},f=n(2),p=n(0),d=n(16),y=r(d),h=n(25),v=r(h),b=n(52),m=r(b),g=(l=function(e){function t(){o(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.width=900,e.height=900,e}return a(t,e),c(t,[{key:"createModel",value:function(){s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"createModel",this).call(this),this._addProcessPool(),this._addFunctionsPool()}},{key:"getModelClass",value:function(){return m.default}},{key:"_addFunctionsPool",value:function(){var e=new v.default;e.name="Functions",this.append(e)}},{key:"_addProcessPool",value:function(){var e=new v.default;e.name="Processes",this.append(e)}},{key:"functionsPool",get:function(){return this.children[1]}},{key:"processesPool",get:function(){return this.children[0]}},{key:"activities",get:function(){return this.functionsPool.descendants.filter(function(e){return e instanceof y.default})}},{key:"processes",get:function(){return this.processesPool.descendants.filter(function(e){return e instanceof y.default})}}]),t}(p.Node),u(l.prototype,"functionsPool",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"functionsPool"),l.prototype),u(l.prototype,"processesPool",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"processesPool"),l.prototype),u(l.prototype,"activities",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"activities"),l.prototype),u(l.prototype,"processes",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"processes"),l.prototype),l);t.default=g},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c,s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(2),p=n(0),d=(l=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r(n,"name",c,n),n.name=e,n.width=300,n}return a(t,e),s(t,[{key:"fitInParent",get:function(){return this.parent!=this.model.root}},{key:"startPosition",get:function(){return{x:0,y:61}}}]),s(t,[{key:"height",get:function(){return this.parent.contentHeight},set:function(e){}}]),t}(p.Column),c=u(l.prototype,"name",[f.observable],{enumerable:!0,initializer:function(){return"Pool"}}),u(l.prototype,"fitInParent",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"fitInParent"),l.prototype),u(l.prototype,"startPosition",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"startPosition"),l.prototype),u(l.prototype,"height",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"height"),l.prototype),l);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(0)),u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(a.Edge);t.default=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=(r(c),n(57)),f=r(s),p=n(58),d=r(p),y=n(61),h=r(y),v=n(62),b=r(v),m=n(63),g=r(m),_=n(59),w=r(_),O=n(60),P=r(O),j=n(64),C=r(j),k=n(65),x=r(k),E=n(68),T=r(E),S=n(69),M=r(S),I=n(70),N=r(I),D=n(66),R=r(D),z=n(67),A=r(z),F=n(0),U=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getEdgeViewClass",value:function(e){return e instanceof d.default?x.default:e instanceof w.default?R.default:e instanceof P.default?A.default:l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getEdgeViewClass",this).call(this)}},{key:"getNodeViewClass",value:function(e){return e instanceof g.default?N.default:e instanceof b.default?M.default:e instanceof h.default?T.default:e instanceof f.default?C.default:l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getNodeViewClass",this).call(this,e)}}]),t}(F.ViewFactory);t.default=U},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(0),c=n(18),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"modeling.Relation"}},{key:"createModelInstance",value:function(){return new l.Relation}},{key:"convertToModel",value:function(e,n,r){var o=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments),i=r.get(e.source),a=r.get(e.target);return o.source=n.getComponent(i),o.target=n.getComponent(a),o}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.source=e.source.id,n.target=e.target.id,n}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=(n(0),function(){function e(){r(this,e),this._registeredClasses=new Map,this._classTree=[],this.registerClasses&&this.registerClasses(),this.getClassId&&(this.classId=this.getClassId())}return o(e,[{key:"convertToModel",value:function(){return this.createModelInstance()}},{key:"convertToObject",value:function(){return{classId:this.classId}}},{key:"createModelInstance",value:function(){return null}},{key:"getConverterByObject",value:function(e){return this._getLeaf(e).converter}},{key:"getConverterByClassId",value:function(e){return this._registeredClasses.get(e).converter}},{key:"_getLeaf",value:function(e){for(var t=this._classTree,n=null,r=0;r<t.length;){var o=t[r];e instanceof o.classInstance?(n=o,r=0,t=o.leaves):r++}return n}},{key:"_registerLeafInTree",value:function(e,t){for(var n=0;n<t.length;n++){var r=t[n];if(e.objectInstance instanceof r.classInstance)return void this._registerLeafInTree(e,r.leaves);if(r.objectInstance instanceof e.classInstance)return t[n]=e,void e.leaves.push(r)}t.push(e)}},{key:"registerClass",value:function(e){this._registeredClasses.get(e.converter.classId)||(e.objectInstance=new e.converter.createModelInstance,e.leaves=[],this._registeredClasses.set(e.converter.classId,e),this._registerLeafInTree(e,this._classTree))}}]),e}());t.default=i},function(e,t,n){"use strict";function r(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=r(e),c=1;c<arguments.length;c++){n=Object(arguments[c]);for(var s in n)i.call(n,s)&&(l[s]=n[s]);if(o){u=o(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";var r={};e.exports=r},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function r(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r)}catch(e){console.error(e)}}r(),e.exports=n(89)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=r(c),f=n(11),p=r(f),d=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getStyleClass",value:function(){return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" end-event"}},{key:"getContent",value:function(){return[s.default.createElement("div",{className:"outer",key:"outer"},s.default.createElement("div",{key:"inner",className:"inner"}))]}}]),t}(p.default);t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=(r(s),n(3)),p=n(12),d=r(p),y=(0,f.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"getStyleClass",value:function(){var e=c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" column";return this.component.resizable||(e+=" no-resize"),e}}]),t}(d.default))||u;t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(1),f=r(s),p=n(3),d=n(20),y=(r(d),(0,p.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getStyleClass",value:function(){return"line"}},{key:"initialize",value:function(){this.p1=this.getP1(),this.p2=this.getP2()}},{key:"getHandledEvents",value:function(){return null}},{key:"render",value:function(){return this.initialize(),f.default.createElement("div",l({className:this.getStyleClass(),style:this.getCss(this.p1,this.p2)},this.getHandledEvents()))}},{key:"getP1",value:function(){return this.props.p1}},{key:"getP2",value:function(){return this.props.p2}},{key:"getCss",value:function(e,t){var n=e.x,r=t.x,o=e.y,i=t.y,a=Math.ceil(Math.sqrt((n-r)*(n-r)+(o-i)*(o-i)));return{top:(o+i)/2+"px",left:(n+r)/2-a/2+"px",width:a+"px",transform:"rotate("+180*Math.atan2(i-o,r-n)/Math.PI+"deg)"}}}]),t}(f.default.Component))||u);t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=(r(s),n(3)),p=n(12),d=r(p),y=(0,f.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"getStyleClass",value:function(){return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" row"}}]),t}(d.default))||u;t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=(r(s),n(3)),p=n(9),d=r(p),y=n(39),h=r(y),v=n(22),b=r(v),m=(0,b.default)(u=(0,h.default)(u=(0,f.observer)(u=function(e){function t(){var e,n,r,a;o(this,t);for(var u=arguments.length,l=Array(u),c=0;c<u;c++)l[c]=arguments[c];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),r.borderWidth=8,a=n,i(r,a)}return a(t,e),l(t,[{key:"initialize",value:function(e){c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e),this.point=e.point,this.targetNode=e.targetNode}},{key:"getStyleClass",value:function(){return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" join-point"}},{key:"getContent",value:function(e){}},{key:"setposition",value:function(e){if(this.targetNode){var t=this.targetNode.getEdgePointPosition({x:this.point.x,y:this.point.y});return e.top=this.targetNode.positionInRoot.y+this.targetNode.startPosition.y+t.y-this.borderWidth+"px",void(e.left=this.targetNode.positionInRoot.x+this.targetNode.startPosition.x+t.x-this.borderWidth+"px")}e.top=this.point.y-this.borderWidth+"px",e.left=this.point.x-this.borderWidth+"px"}},{key:"getCss",value:function(){var e=c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getCss",this).call(this);return this.setposition(e),e}}]),t}(d.default))||u)||u)||u;t.default=m},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(40),i=r(o),a=n(41),u=r(a),l=n(101),c=r(l),s=n(14),f=r(s),p=function(e,t){var n,r=function(e){var t=e.prototype.getHandledEvents;e.prototype.getHandledEvents=function(){var e=void 0;this.component instanceof f.default?(e=new c.default(this.component,!0,!0),e.point=this.point,e.targetNode=this.targetNode):e=new u.default(this.component,!0,!0);var n={onMouseDown:e.handleMouseDown.bind(e)},r=t.apply(this,arguments);return i.default.combineActions(n,r)}};return 0==arguments.length?r:"function"==typeof e?void r.apply(void 0,arguments):e&&t?r:e||t?function(n){var r=n.prototype.getHandledEvents;n.prototype.getHandledEvents=function(){var n=void 0;this.component instanceof f.default?(n=new c.default(this.component,e,t),n.point=this.point,n.targetNode=this.targetNode):n=new u.default(this.component,e,t);var o={onMouseDown:n.handleMouseDown.bind(n)},a=r.apply(this,arguments);return i.default.combineActions(o,a)}}:void(n=console).warn.apply(n,["wrong arguments"].concat(Array.prototype.slice.call(arguments)))};t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={combineActions:function(e,t){if(null==t)return e;var n=!0,r=!1,o=void 0;try{for(var i,a=Object.keys(e)[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value;(function(n){var r=t[n];if(!r)return"continue";var o=e[n];e[n]=function(){r.apply(null,arguments),o.apply(null,arguments)}})(u)}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return e}};t.default=r},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(2),a=n(7),u=(function(e){e&&e.__esModule}(a),function(){function e(t,n,o){r(this,e),this.previousMouseY=0,this.previousMouseX=0,this.grid=10,this.model=t,this.moveX=!!n,this.moveY=!!o,this.mouseUpHandler=(0,i.action)(this.handleMouseUp.bind(this)),this.mouseMoveHandler=(0,i.action)(this.handleMouseMove.bind(this))}return o(e,[{key:"handleMouseDown",value:function(e){0==e.button&&(this.previousMouseY=e.clientY,this.previousMouseX=e.clientX,document.addEventListener("mousemove",this.mouseMoveHandler),document.addEventListener("mouseup",this.mouseUpHandler),e.preventDefault(),e.stopPropagation())}},{key:"handleMouseUp",value:function(e){document.removeEventListener("mousemove",this.mouseMoveHandler),document.removeEventListener("mouseup",this.mouseUpHandler),e.preventDefault(),e.stopPropagation()}},{key:"applyGrid",value:function(e){return Math.round(e/this.grid)*this.grid}},{key:"getCurrentPosition",value:function(){return{x:this.model.position.x,y:this.model.position.y}}},{key:"setCurrentPosition",value:function(e,t){this.model.position.x=e,this.model.position.y=t}},{key:"handleMouseMove",value:function(e){e.preventDefault(),e.stopPropagation();var t=e.clientX-this.previousMouseX,n=e.clientY-this.previousMouseY;t=this.applyGrid(t),n=this.applyGrid(n);var r=this.getCurrentPosition(),o=this.moveY?r.y+n:r.y,i=this.moveX?r.x+t:r.x;o<0&&(o=0),i<0&&(i=0),this.setCurrentPosition(i,o);var a=this.getCurrentPosition();r.y!=a.y&&(this.previousMouseY=this.previousMouseY+n),r.x!=a.x&&(this.previousMouseX=this.previousMouseX+t)}}]),e}());t.default=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c,s,f,p=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=n(2),y=n(43),h=r(y),v=n(7),b=r(v),m=n(14),g=r(m),_=n(13),w=r(_),O=(l=function(){function e(){a(this,e),this._nextId=1,i(this,"name",c,this),i(this,"selected",s,this),i(this,"_componentMap",f,this),this.root=null}return p(e,[{key:"nodes",get:function(){return this.getNodes()},set:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.nodes[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){o.value.remove()}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}if(e){var a=!0,u=!1,l=void 0;try{for(var c,s=e[Symbol.iterator]();!(a=(c=s.next()).done);a=!0){var f=c.value;this._addNodePart(f)}}catch(e){u=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(u)throw l}}}}},{key:"edges",get:function(){return this.getEdges()}},{key:"relations",get:function(){return this.getRelations()}},{key:"components",get:function(){return this._componentMap.values()},set:function(e){if(this._componentMap.clear(),e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.id=this.generateId(a.id),this._componentMap.set(a.id,a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}}}]),p(e,[{key:"addAsRoot",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.relations[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;0==a.source.id&&(a.source=e),0==a.target.id&&(a.target=e)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}this.root=e,e.id=0,e.model=this}},{key:"_generateUniqueId",value:function(){for(var e=this._nextId++;void 0!=this._componentMap.get(e);)e=this._nextId++;return e}},{key:"generateId",value:function(e){return void 0==e||null==e?this._generateUniqueId():void 0==this._componentMap.get(e)?e:this._generateUniqueId()}},{key:"getDescendants",value:function(e){var t=[],n=this.getChildren(e),r=!0,i=!1,a=void 0;try{for(var u,l=n[Symbol.iterator]();!(r=(u=l.next()).done);r=!0){var c=u.value;t.push.apply(t,[c].concat(o(this.getDescendants(c))))}}catch(e){i=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(i)throw a}}return t}},{key:"_validateParent",value:function(e){if(!e)return this.root;if(!(e instanceof b.default))return null;var t=this.getDescendants(this.root).filter(function(t){return t.id==e.id});return e==this.root||t.length>0?e:null}},{key:"moveNode",value:function(e,t){console.warn("node moving not implemented yet")}},{key:"_addNodePart",value:function(e){var t=this.generateId(e.id);e.id=t,e.model=this,this._componentMap.set(t,e)}},{key:"_addNodeTree",value:function(e,t){if(!(e&&e instanceof b.default))return void console.warn("Not a node");if(null==(t=this._validateParent(t,e)))return void console.warn("Invalid parent");var n=e.model;this._addNodePart(e);var r=new h.default;r.source=t,r.target=e;var o=this.generateId();r.id=o,r.model=this,this._componentMap.set(o,r);var i=n.getChildren(e),a=!0,u=!1,l=void 0;try{for(var c,s=i[Symbol.iterator]();!(a=(c=s.next()).done);a=!0){var f=c.value;this._addNodeTree(f,e)}}catch(e){u=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(u)throw l}}}},{key:"addNode",value:function(e,t){if(e.model==this)return void this.moveNode(e,t);var n=e.model;this._addNodeTree(e,t);var r=n.relations.filter(function(e){return!(e instanceof h.default)}),o=!0,i=!1,a=void 0;try{for(var u,l=r[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;this.getComponent(c.source.id)==c.source&&this.getComponent(c.target.id)==c.target&&this._componentMap.set(c.id,c)}}catch(e){i=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(i)throw a}}}},{key:"addComponent",value:function(e){var t=this.generateId(e.id);e.id=t,e.model=this,this._componentMap.set(t,e)}},{key:"addRelation",value:function(e){this.addComponent(e)}},{key:"addEdge",value:function(e){this.addRelation(e)}},{key:"_removeEdge",value:function(e){this._componentMap.delete(e.id)}},{key:"_removeHierarchy",value:function(e){this._componentMap.delete(e.id)}},{key:"_removeRelation",value:function(e){return e instanceof g.default?void this._removeEdge(e):e instanceof h.default?void this._removeHierarchy(e):void this._componentMap.delete(e.id)}},{key:"_removeNode",value:function(e){var t=this.getChildren(e),n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value;this._removeNode(u)}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}var l=this.relations.filter(function(t){return t.source==e||t.target==e}),c=!0,s=!1,f=void 0;try{for(var p,d=l[Symbol.iterator]();!(c=(p=d.next()).done);c=!0){var y=p.value;this._removeRelation(y)}}catch(e){s=!0,f=e}finally{try{!c&&d.return&&d.return()}finally{if(s)throw f}}this._componentMap.delete(e.id)}},{key:"removeComponent",value:function(e){return e instanceof w.default?void this._removeRelation(e):e instanceof b.default?void this._removeNode(e):void this._componentMap.delete(e.id)}},{key:"getChildren",value:function(e){var t=this.getHierarchyRelations().filter(function(t){return t.source==e}),n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value;n.push(l.target)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}},{key:"getNodes",value:function(){return this.components.filter(function(e){return e instanceof b.default})}},{key:"getEdges",value:function(){return this.relations.filter(function(e){return e instanceof g.default})}},{key:"getRelations",value:function(){return this.components.filter(function(e){return e instanceof w.default&&e.source&&e.target})}},{key:"getHierarchyRelations",value:function(){return this.relations.filter(function(e){return e instanceof h.default})}},{key:"getComponent",value:function(e){return this._componentMap.get(e)}},{key:"getParent",value:function(e){return e==this.root?null:this.getHierarchyRelations().filter(function(t){return t.target==e})[0].source}},{key:"getParents",value:function(e){var t=[];if(e==this.root)return t;for(var n=e.parent;n!=this.root;n=n.parent)t.push(n);return t}}]),e}(),c=u(l.prototype,"name",[d.observable],{enumerable:!0,initializer:null}),s=u(l.prototype,"selected",[d.observable],{enumerable:!0,initializer:null}),f=u(l.prototype,"_componentMap",[d.observable],{enumerable:!0,initializer:function(){return new Map}}),u(l.prototype,"nodes",[d.computed],Object.getOwnPropertyDescriptor(l.prototype,"nodes"),l.prototype),u(l.prototype,"edges",[d.computed],Object.getOwnPropertyDescriptor(l.prototype,"edges"),l.prototype),u(l.prototype,"relations",[d.computed],Object.getOwnPropertyDescriptor(l.prototype,"relations"),l.prototype),u(l.prototype,"components",[d.computed],Object.getOwnPropertyDescriptor(l.prototype,"components"),l.prototype),u(l.prototype,"_addNodeTree",[d.action],Object.getOwnPropertyDescriptor(l.prototype,"_addNodeTree"),l.prototype),u(l.prototype,"addNode",[d.action],Object.getOwnPropertyDescriptor(l.prototype,"addNode"),l.prototype),u(l.prototype,"addComponent",[d.action],Object.getOwnPropertyDescriptor(l.prototype,"addComponent"),l.prototype),u(l.prototype,"addRelation",[d.action],Object.getOwnPropertyDescriptor(l.prototype,"addRelation"),l.prototype),u(l.prototype,"addEdge",[d.action],Object.getOwnPropertyDescriptor(l.prototype,"addEdge"),l.prototype),l);t.default=O},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=n(13),u=function(e){return e&&e.__esModule?e:{default:e}}(a),l=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(u.default);t.default=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=r(s),p=n(3),d=n(9),y=r(d),h=n(22),v=r(h),b=(0,v.default)(u=(0,p.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"initialize",value:function(e){c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e),this.sourcePoint=e.sourcePoint,this.sourceTargetNode=e.sourceTargetNode,this.targetPoint=e.targetPoint,this.targetNode=e.targetNode}},{key:"getStyleClass",value:function(){return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" edge"}},{key:"getContent",value:function(e){var t=[f.default.createElement("div",{className:"selection-helper",key:"selection-div"})];return this.targetNode&&t.push(f.default.createElement("div",{key:"arrow",className:"edge-end-right"})),t}},{key:"_getEdgePointPosition",value:function(e,t){if(e){var n=e.getEdgePointPosition({x:t.x,y:t.y});return{x:e.positionInRoot.x+e.startPosition.x+n.x,y:e.positionInRoot.y+e.startPosition.y+n.y}}return{x:t.x,y:t.y}}},{key:"_getSourcePosition",value:function(){return this._getEdgePointPosition(this.sourceTargetNode,this.sourcePoint)}},{key:"_getTargetPosition",value:function(){return this._getEdgePointPosition(this.targetNode,this.targetPoint)}},{key:"getCss",value:function(){var e=this._getSourcePosition(),t=this._getTargetPosition(),n=e.x,r=t.x,o=e.y,i=t.y,a=Math.ceil(Math.sqrt((n-r)*(n-r)+(o-i)*(o-i)));return{top:(o+i)/2+"px",left:(n+r)/2-a/2+"px",width:a+"px",transform:"rotate("+180*Math.atan2(i-o,r-n)/Math.PI+"deg)"}}}]),t}(y.default))||u)||u;t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),f=n(7),p=r(f),d=n(10),y=r(d),h=(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"position",get:function(){var e=this.parent.children.filter(function(e){return e instanceof t}),n=new y.default,r=null,o=!0,i=!1,a=void 0;try{for(var u,l=e[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;if(c==this)break;r=c}}catch(e){i=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(i)throw a}}if(!r)return n;var s=r.position;return n.y=s.y+2*r.borderWidth+r.height,n}},{key:"width",get:function(){return this.parent.width},set:function(e){console.warn("Row width is not resizable")}}]),t}(p.default),u(l.prototype,"position",[s.computed],Object.getOwnPropertyDescriptor(l.prototype,"position"),l.prototype),u(l.prototype,"width",[s.computed],Object.getOwnPropertyDescriptor(l.prototype,"width"),l.prototype),l);t.default=h},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},f=n(2),p=n(7),d=r(p),y=n(10),h=r(y),v=(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getWidth",value:function(){if(!this.fitInParent)return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getWidth",this).call(this);var e=this.parent;if(!e)return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getWidth",this).call(this);var n=e.children.filter(function(e){return e instanceof t});if(n.length<2)return e.width;if(n[n.length-1]!=this)return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getWidth",this).call(this);var r=n[n.length-2],o=r.position;return e.width-(o.x+2*r.borderWidth+r.width)}},{key:"isResizable",value:function(){if(!this.fitInParent)return!0;var e=this.parent;if(!e)return!0;var n=e.children.filter(function(e){return e instanceof t});return n[n.length-1]!=this}},{key:"fitInParent",get:function(){return!1}},{key:"position",get:function(){var e=new h.default,n=this.parent;if(!n)return e;var r=n.children.filter(function(e){return e instanceof t}),o=null,i=!0,a=!1,u=void 0;try{for(var l,c=r[Symbol.iterator]();!(i=(l=c.next()).done);i=!0){var s=l.value;if(s==this)break;o=s}}catch(e){a=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}if(!o)return e;var f=o.position;return e.x=f.x+2*o.borderWidth+o.width,e},set:function(e){}},{key:"resizable",get:function(){return this.isResizable()}},{key:"height",get:function(){return this.parent.height},set:function(e){console.warn("Column height is not resizable")}}]),t}(d.default),u(l.prototype,"fitInParent",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"fitInParent"),l.prototype),u(l.prototype,"position",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"position"),l.prototype),u(l.prototype,"resizable",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"resizable"),l.prototype),u(l.prototype,"height",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"height"),l.prototype),l);t.default=v},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=r(c),f=n(11),p=r(f),d=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getStyleClass",value:function(){return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" start-event"}},{key:"getContent",value:function(){return[s.default.createElement("div",{key:"outer",className:"outer"})]}}]),t}(p.default);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(1),c=(function(e){e&&e.__esModule}(l),n(0)),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getStyleClass",value:function(){return u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" sequence-flow"}}]),t}(c.EdgeView);t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=r(c),f=n(34),p=r(f),d=n(47),y=r(d),h=n(11),v=r(h),b=n(50),m=r(b),g=n(51),_=r(g),w=n(53),O=r(w),P=n(48),j=r(P),C=n(54),k=r(C),x=n(55),E=r(x),T=n(56),S=r(T),M=n(17),I=r(M),N=n(24),D=r(N),R=n(25),z=r(R),A=n(16),F=r(A),U=n(26),V=r(U),L=n(15),B=r(L),H=n(0),W=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getEdgeViewClass",value:function(e){return e instanceof V.default?j.default:l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getEdgeViewClass",this).call(this)}},{key:"getNodeViewClass",value:function(e){return e instanceof F.default?O.default:e instanceof D.default?m.default:e instanceof z.default?_.default:e instanceof I.default?e instanceof S.default?y.default:e instanceof E.default?p.default:v.default:l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getNodeViewClass",this).call(this,e)}},{key:"addViews",value:function(e,n){if(e instanceof B.default)return void n.push(s.default.createElement(k.default,{component:e,key:e.id,viewFactory:this}));l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addViews",this).apply(this,arguments)}}]),t}(H.ViewFactory);t.default=W},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},f=n(1),p=(r(f),n(0)),d=n(15),y=r(d),h=n(49),v=r(h),b=(u=(0,p.resize)({right:!0,bottom:!0,rightBottom:!0}))(l=(0,p.select)(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getdefaultViewFactory",value:function(){return new v.default}},{key:"getStyleClass",value:function(){return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" dvcm"}},{key:"getCss",value:function(){return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getCss",this).call(this)}},{key:"getChildrenViews",value:function(){var e=s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getChildrenViews",this).call(this);if(this.component.model.root!=this.component)return e;var n=this.component.model.components.filter(function(e){return e instanceof y.default}),r=!0,o=!1,i=void 0;try{for(var a,u=n[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value;this.viewFactory.addViews(l,e)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return e}}]),t}(p.NodeView))||l)||l;t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},f=n(1),p=r(f),d=n(3),y=n(0),h=n(24),v=(r(h),(u=(0,y.resize)({right:!0}))(l=(0,y.select)(l=(0,d.observer)(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getContent",value:function(){var e={height:this.component.contentHeight+"px"};return[p.default.createElement("div",{key:"name-div",className:"name-div"},this.component.name),p.default.createElement("div",{style:e,key:"content-div",className:"content-div"},this.getChildrenViews())]}},{key:"getCss",value:function(){var e=s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getCss",this).call(this);return e.height="100%",e}},{key:"getStyleClass",value:function(){return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" pool"}}]),t}(y.ColumnView))||l)||l)||l);t.default=v},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),f=n(0),p=n(15),d=r(p),y=n(23),h=r(y),v=n(26),b=r(v),m=n(16),g=r(m),_=(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"transactions",get:function(){return this.components.filter(function(e){return e instanceof d.default})}},{key:"activities",get:function(){return this.nodes.filter(function(e){return e instanceof g.default})}},{key:"inTransactions",get:function(){return this.relations.filter(function(e){return e instanceof h.default})}},{key:"sequenceFlows",get:function(){return this.edges.filter(function(e){return e instanceof b.default})}}]),t}(f.Model),u(l.prototype,"transactions",[s.computed],Object.getOwnPropertyDescriptor(l.prototype,"transactions"),l.prototype),u(l.prototype,"activities",[s.computed],Object.getOwnPropertyDescriptor(l.prototype,"activities"),l.prototype),u(l.prototype,"inTransactions",[s.computed],Object.getOwnPropertyDescriptor(l.prototype,"inTransactions"),l.prototype),u(l.prototype,"sequenceFlows",[s.computed],Object.getOwnPropertyDescriptor(l.prototype,"sequenceFlows"),l.prototype),l);t.default=_},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=n(3),p=n(0),d=(0,p.move)(a=(0,p.select)(a=(0,f.observer)(a=(0,p.resize)(a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"getContent",value:function(){return[s.default.createElement("p",{key:"name"},this.component.name)]}},{key:"getStyleClass",value:function(){return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" activity"}}]),t}(p.NodeView))||a)||a)||a)||a;t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),s=r(c),f=n(3),p=n(0),d=n(105),y=r(d),h=(0,p.select)(u=(0,f.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"render",value:function(){var e=this.props.component,t=e.transactionBounds;if(0==t.length)return[];var n=[],r=t[t.length-1],o=!0,i=!1,a=void 0;try{for(var u,l=t[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;n.push(s.default.createElement(y.default,{component:e,key:e.id+"_"+r.x+";"+r.y+"_"+c.x+";"+c.y,p1:r,p2:c})),r=c}}catch(e){i=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(i)throw a}}if(4==e.functionsPoints.length){var f=t[1],p=t[2],d=f.x,h=p.y-f.y,v=Math.floor(h/2)+f.y,b={position:"absolute",top:v+"px",left:d+"px",paddingLeft:"10px",textAlign:"center"};n.push(s.default.createElement("div",{style:b,key:"transaction-name"},e.name))}return n}}]),t}(s.default.Component))||u)||u;t.default=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(17)),u=function(e){return e&&e.__esModule?e:{default:e}}(a),l=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(u.default);t.default=l},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(17)),u=function(e){return e&&e.__esModule?e:{default:e}}(a),l=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(u.default);t.default=l},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c,s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(2),p=n(0),d=(l=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r(n,"name",c,n),n.name=e,n.width=80,n}return a(t,e),s(t,[{key:"height",get:function(){return 2*this.width},set:function(e){this.width=Math.floor(e/2)}}]),t}(p.Node),c=u(l.prototype,"name",[f.observable],{enumerable:!0,initializer:function(){return"Actor"}}),u(l.prototype,"height",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"height"),l.prototype),l);t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(0)),u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(a.Edge);t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(0)),u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(a.Edge);t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(n(2),n(0)),u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(a.Edge);t.default=u},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=n(2),s=n(0),f=(u=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r(n,"name",l,n),n.name=e,n.width=400,n.height=400,n}return a(t,e),t}(s.Node),l=function(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}(u.prototype,"name",[c.observable],{enumerable:!0,initializer:function(){return"System"}}),u);t.default=f},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,c,s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(2),p=n(0),d=(l=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r(n,"name",c,n),n.name=e,n.height=80,n}return a(t,e),s(t,[{key:"width",get:function(){return 2*this.height},set:function(e){this.height=Math.floor(e/2)}}]),t}(p.Node),c=u(l.prototype,"name",[f.observable],{enumerable:!0,initializer:function(){return"UseCase"}}),u(l.prototype,"width",[f.computed],Object.getOwnPropertyDescriptor(l.prototype,"width"),l.prototype),l);t.default=d},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=n(2),s=n(0),f=(u=function(e){function t(e){o(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return r(n,"name",l,n),n.name=e,n.width=900,n.height=900,n}return a(t,e),t}(s.Node),l=function(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}(u.prototype,"name",[c.observable],{enumerable:!0,initializer:function(){return"UseCases"}}),u);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=n(3),p=n(0),d=(0,p.move)(a=(0,p.select)(a=(0,f.observer)(a=(0,p.resize)(a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"getContent",value:function(){return[s.default.createElement("div",{key:"name",className:"name"},this.component.name),s.default.createElement("div",{key:"head",className:"head"}),s.default.createElement("div",{key:"body",className:"body"}),s.default.createElement("div",{key:"arms",className:"endings-wrapper arms"},s.default.createElement("div",{className:"endings"})),s.default.createElement("div",{key:"legs",className:"endings-wrapper legs"},s.default.createElement("div",{className:"endings"}))]}},{key:"getStyleClass",value:function(){return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" actor"}}]),t}(p.NodeView))||a)||a)||a)||a;t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=(function(e){e&&e.__esModule}(c),n(3)),f=n(0),p=(0,s.observer)(a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"getStyleClass",value:function(){return l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" association "}}]),t}(f.EdgeView))||a;t.default=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=function(e){return e&&e.__esModule?e:{default:e}}(s),p=n(3),d=n(0),y=n(8),h=(a=(0,y.localizable)({extend:"Extend"}))(u=(0,p.observer)(u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"getStyleClass",value:function(){return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" extension "}},{key:"getContent",value:function(e){var n=c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getContent",this).call(this),r=this._getSourcePosition(),o=this._getTargetPosition(),i=r.x>o.x?"title reversed-title":"title normal-title";return n.push(f.default.createElement("div",{className:i,key:"title"},"<<"+this.locale.extend+">>")),n}}]),t}(d.EdgeView))||u)||u;t.default=h},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=function(e){return e&&e.__esModule?e:{default:e}}(s),p=n(3),d=n(0),y=n(8),h=(a=(0,y.localizable)({include:"Include"}))(u=(0,p.observer)(u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"getStyleClass",value:function(){return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" inclusion "}},{key:"getContent",value:function(e){var n=c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getContent",this).call(this),r=this._getSourcePosition(),o=this._getTargetPosition(),i=r.x>o.x?"title reversed-title":"title normal-title";return n.push(f.default.createElement("div",{className:i,key:"title"},"<<"+this.locale.include+">>")),n}}]),t}(d.EdgeView))||u)||u;t.default=h},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},f=n(1),p=function(e){return e&&e.__esModule?e:{default:e}}(f),d=n(3),y=n(0),h=(u=(0,y.resize)({right:!0,bottom:!0,rightBottom:!0}),(0,y.move)(l=(0,y.select)(l=(0,d.observer)(l=u(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getContent",value:function(){return[p.default.createElement("div",{className:"name",key:"name"},this.component.name)].concat(r(this.getChildrenViews()))}},{key:"getStyleClass",value:function(){return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" system"}}]),t}(y.NodeView))||l)||l)||l)||l);t.default=h},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},s=n(1),f=r(s),p=n(3),d=n(0),y=n(27),h=r(y),v=(0,d.move)(u=(0,d.select)(u=(0,p.observer)(u=(0,d.resize)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"getdefaultViewFactory",value:function(){return new h.default}},{key:"getContent",value:function(){return[f.default.createElement("p",{key:"name"},this.component.name)]}},{key:"getStyleClass",value:function(){return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" use-case"}}]),t}(d.NodeView))||u)||u)||u)||u;t.default=v},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},f=n(1),p=r(f),d=n(3),y=n(0),h=n(27),v=r(h),b=(u=(0,y.resize)({right:!0,bottom:!0,rightBottom:!0}))(l=(0,y.select)(l=(0,d.observer)(l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),c(t,[{key:"getdefaultViewFactory",value:function(){return new v.default}},{key:"getContent",value:function(){return[p.default.createElement("p",{key:"name"},this.component.name),s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getContent",this).call(this)]}},{key:"getStyleClass",value:function(){return s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" use-cases"}}]),t}(y.NodeView))||l)||l)||l;t.default=b},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(0),c=n(28),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"modeling.Edge"}},{key:"createModelInstance",value:function(){return new l.Edge}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);n.sourcePoint.x=e.sourcePoint.x,n.sourcePoint.y=e.sourcePoint.y,n.targetPoint.x=e.targetPoint.x,n.targetPoint.y=e.targetPoint.y;var r=!0,o=!1,i=void 0;try{for(var a,l=e.bendPoints[Symbol.iterator]();!(r=(a=l.next()).done);r=!0){var c=a.value;n.addBendPoint(c.x,c.y)}}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);n.sourcePoint={x:e.sourcePoint.x,y:e.sourcePoint.y},n.targetPoint={x:e.targetPoint.x,y:e.targetPoint.y},n.bendPoints=[];var r=!0,o=!1,i=void 0;try{for(var a,l=e.bendPoints[Symbol.iterator]();!(r=(a=l.next()).done);r=!0){var c=a.value;n.bendPoints.push({x:c.x,y:c.y})}}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(0),c=n(18),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"modeling.Node"}},{key:"createModelInstance",value:function(){return new l.Node}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.position.x=e.position.x,n.position.y=e.position.y,n.width=e.width,n.height=e.height,n.borderWidth=e.borderWidth,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.position={x:e.position.x,y:e.position.y},n.width=e.width,n.height=e.height,n.borderWidth=e.borderWidth,n}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(0),s=n(18),f=r(s),p=n(71),d=r(p),y=n(72),h=r(y),v=n(28),b=r(v),m=n(29),g=r(m),_=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getClassId",value:function(){return"modeling.Model"}},{key:"createModelInstance",value:function(){return new c.Model}},{key:"addComponents",value:function(e,t){t.name=e.name;var n=this.getConverterByClassId(e.root.classId),r=n.convertToModel(e.root);t.addAsRoot(r),this.idMap=new Map,this._setNodeTree(e.root,t.root)}},{key:"convertToModel",value:function(e){var n=l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);this.addComponents(e,n);var r=!0,o=!1,i=void 0;try{for(var a,u=e.relations[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var c=a.value,s=this.getConverterByClassId(c.classId),f=s.convertToModel(c,n,this.idMap);n.addRelation(f)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}},{key:"convertToObject",value:function(e){var n=l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);n.name=e.name;var r=this.getConverterByObject(e.root);n.root=r.convertToObject(e.root),this._getNodeTree(e.root,n.root),n.relations=[];var o=!0,i=!1,a=void 0;try{for(var u,s=e.relations[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var f=u.value;if(!(f instanceof c.HierarchyRelation)){var p=this.getConverterByObject(f);n.relations.push(p.convertToObject(f))}}}catch(e){i=!0,a=e}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}return n}},{key:"registerClasses",value:function(){this.registerClass({classInstance:c.Component,converter:new f.default}),this.registerClass({classInstance:c.Edge,converter:new d.default}),this.registerClass({classInstance:c.Node,converter:new h.default}),this.registerClass({classInstance:c.Relation,converter:new b.default})}},{key:"_setNodeTree",value:function(e,t){var n=e.children,r=!0,o=!1,i=void 0;try{for(var a,u=n[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value,c=this.getConverterByClassId(l.classId),s=c.convertToModel(l);t.append(s),this.idMap.set(l.id,s.id),this._setNodeTree(l,s)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}},{key:"_getNodeTree",value:function(e,t){t.children=[];var n=e.children,r=!0,o=!1,i=void 0;try{for(var a,u=n[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value,c=this.getConverterByObject(l),s=c.convertToObject(l);t.children.push(s),this._getNodeTree(l,s)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}}]),t}(g.default);t.default=_},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(6),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.Actor"}},{key:"createModelInstance",value:function(){return new l.Actor}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.name=e.name,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.name=e.name,n}}]),t}(c.NodeConverter);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(6),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.Association"}},{key:"createModelInstance",value:function(){return new u.Association}}]),t}(l.EdgeConverter);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(6),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.System"}},{key:"createModelInstance",value:function(){return new l.System}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.name=e.name,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.name=e.name,n}}]),t}(c.NodeConverter);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(6),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.UseCase"}},{key:"createModelInstance",value:function(){return new l.UseCase}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.name=e.name,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.name=e.name,n}}]),t}(c.NodeConverter);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(6),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.UseCases"}},{key:"createModelInstance",value:function(){return new u.UseCases}}]),t}(l.NodeConverter);t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(4),s=n(6),f=n(74),p=r(f),d=n(75),y=r(d),h=n(76),v=r(h),b=n(77),m=r(b),g=n(78),_=r(g),w=n(117),O=r(w),P=n(118),j=r(P),C=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getClassId",value:function(){return"use-cases.UseCasesModel"}},{key:"createModelInstance",value:function(){return new s.UseCasesModel}},{key:"registerClasses",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"registerClasses",this).call(this),this.registerClass({classInstance:s.Actor,converter:new p.default}),this.registerClass({classInstance:s.Association,converter:new y.default}),this.registerClass({classInstance:s.System,converter:new v.default}),this.registerClass({classInstance:s.UseCase,converter:new m.default}),this.registerClass({classInstance:s.UseCases,converter:new _.default}),this.registerClass({classInstance:s.Inclusion,converter:new O.default}),this.registerClass({classInstance:s.Extension,converter:new j.default})}}]),t}(c.ModelConverter);t.default=C},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),l=n(19),c=function(e){return e&&e.__esModule?e:{default:e}}(l),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.StartEvent"}},{key:"createModelInstance",value:function(){return new u.StartEvent}}]),t}(c.default);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),l=n(19),c=function(e){return e&&e.__esModule?e:{default:e}}(l),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.EndEvent"}},{key:"createModelInstance",value:function(){return new u.EndEvent}}]),t}(c.default);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(5),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.Pool"}},{key:"createModelInstance",value:function(){return new l.Pool}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.name=e.name,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.name=e.name,n}}]),t}(c.NodeConverter);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.DVCM"}},{key:"createModelInstance",value:function(){return new u.DVCM}}]),t}(l.NodeConverter);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(5),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.Activity"}},{key:"createModelInstance",value:function(){return new l.Activity}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.name=e.name,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.name=e.name,n}}]),t}(c.NodeConverter);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.SequenceFlow"}},{key:"createModelInstance",value:function(){return new u.SequenceFlow}}]),t}(l.EdgeConverter);t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(4),s=n(5),f=n(80),p=r(f),d=n(81),y=r(d),h=n(19),v=r(h),b=n(82),m=r(b),g=n(83),_=r(g),w=n(84),O=r(w),P=n(121),j=r(P),C=n(122),k=r(C),x=n(85),E=r(x),T=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getClassId",value:function(){return"dvcm.DVCMModel"}},{key:"createModelInstance",value:function(){return new s.DVCMModel}},{key:"addComponents",value:function(e,n){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addComponents",this).apply(this,arguments);var r=!0,o=!1,i=void 0;try{for(var a,u=e.transactions[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var c=a.value,s=this.getConverterByClassId(c.classId),f=s.convertToModel(c);n.addComponent(f),this.idMap.set(c.id,f.id)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}},{key:"convertToObject",value:function(e){var n=l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);n.transactions=[];var r=!0,o=!1,i=void 0;try{for(var a,u=e.transactions[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var c=a.value,s=this.getConverterByObject(c);n.transactions.push(s.convertToObject(c))}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}},{key:"registerClasses",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"registerClasses",this).call(this),this.registerClass({classInstance:s.Transaction,converter:new j.default}),this.registerClass({classInstance:s.SequenceFlow,converter:new E.default}),this.registerClass({classInstance:s.Activity,converter:new O.default}),this.registerClass({classInstance:s.DVCM,converter:new _.default}),this.registerClass({classInstance:s.Pool,converter:new m.default}),this.registerClass({classInstance:s.Event,converter:new v.default}),this.registerClass({classInstance:s.EndEvent,converter:new y.default}),this.registerClass({classInstance:s.StartEvent,converter:new p.default}),this.registerClass({classInstance:s.InTransaction,converter:new k.default})}}]),t}(c.ModelConverter);t.default=T},function(e,t,n){"use strict";var r=n(1),o=function(e){return e&&e.__esModule?e:{default:e}}(r),i=n(33),a=n(96);n(130);var u=o.default.createElement(a.DiagramsEditor,null);(0,i.render)(u,document.getElementById("app"))},function(e,t,n){"use strict";function r(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||S}function i(){}function a(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||S}function u(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)N.call(t,r)&&!D.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:w,type:e,key:i,ref:a,props:o,_owner:I.current}}function l(e){return"object"==typeof e&&null!==e&&e.$$typeof===w}function c(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}function s(e,t,n,r){if(z.length){var o=z.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function f(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>z.length&&z.push(e)}function p(e,t,n,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var a=!1;if(null===e)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case w:case O:a=!0}}if(a)return n(o,e,""===t?"."+d(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var u=0;u<e.length;u++){i=e[u];var l=t+d(i,u);a+=p(i,l,n,o)}else if(null===e||void 0===e?l=null:(l=T&&e[T]||e["@@iterator"],l="function"==typeof l?l:null),"function"==typeof l)for(e=l.call(e),u=0;!(i=e.next()).done;)i=i.value,l=t+d(i,u++),a+=p(i,l,n,o);else"object"===i&&(n=""+e,r("31","[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return a}function d(e,t){return"object"==typeof e&&null!==e&&null!=e.key?c(e.key):t.toString(36)}function y(e,t){e.func.call(e.context,t,e.count++)}function h(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?v(e,r,n,g.thatReturnsArgument):null!=e&&(l(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n,e={$$typeof:w,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function v(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),t=s(t,i,r,o),null==e||p(e,"",h,t),f(t)}/** @license React v16.3.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b=n(30),m=n(31),g=n(32),_="function"==typeof Symbol&&Symbol.for,w=_?Symbol.for("react.element"):60103,O=_?Symbol.for("react.portal"):60106,P=_?Symbol.for("react.fragment"):60107,j=_?Symbol.for("react.strict_mode"):60108,C=_?Symbol.for("react.provider"):60109,k=_?Symbol.for("react.context"):60110,x=_?Symbol.for("react.async_mode"):60111,E=_?Symbol.for("react.forward_ref"):60112,T="function"==typeof Symbol&&Symbol.iterator,S={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};o.prototype.isReactComponent={},o.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&r("85"),this.updater.enqueueSetState(this,e,t,"setState")},o.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},i.prototype=o.prototype;var M=a.prototype=new i;M.constructor=a,b(M,o.prototype),M.isPureReactComponent=!0;var I={current:null},N=Object.prototype.hasOwnProperty,D={key:!0,ref:!0,__self:!0,__source:!0},R=/\/+/g,z=[],A={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return v(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=s(null,null,t,n),null==e||p(e,"",y,t),f(t)},count:function(e){return null==e?0:p(e,"",g.thatReturnsNull,null)},toArray:function(e){var t=[];return v(e,t,null,g.thatReturnsArgument),t},only:function(e){return l(e)||r("143"),e}},createRef:function(){return{current:null}},Component:o,PureComponent:a,createContext:function(e,t){return void 0===t&&(t=null),e={$$typeof:k,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null},e.Provider={$$typeof:C,context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:E,render:e}},Fragment:P,StrictMode:j,unstable_AsyncMode:x,createElement:u,cloneElement:function(e,t,n){var r=void 0,o=b({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(a=t.ref,u=I.current),void 0!==t.key&&(i=""+t.key);var l=void 0;e.type&&e.type.defaultProps&&(l=e.type.defaultProps);for(r in t)N.call(t,r)&&!D.hasOwnProperty(r)&&(o[r]=void 0===t[r]&&void 0!==l?l[r]:t[r])}if(1===(r=arguments.length-2))o.children=n;else if(1<r){l=Array(r);for(var c=0;c<r;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:w,type:e.type,key:i,ref:a,props:o,_owner:u}},createFactory:function(e){var t=u.bind(null,e);return t.type=e,t},isValidElement:l,version:"16.3.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:I,assign:b}},F=Object.freeze({default:A}),U=F&&A||F;e.exports=U.default?U.default:U},function(e,t,n){"use strict";function r(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}function i(){if(bn._hasRethrowError){var e=bn._rethrowError;throw bn._rethrowError=null,bn._hasRethrowError=!1,e}}function a(){if(mn)for(var e in gn){var t=gn[e],n=mn.indexOf(e);if(-1<n||r("96",e),!_n[n]){t.extractEvents||r("97",e),_n[n]=t,n=t.eventTypes;for(var o in n){var i=void 0,a=n[o],l=t,c=o;wn.hasOwnProperty(c)&&r("99",c),wn[c]=a;var s=a.phasedRegistrationNames;if(s){for(i in s)s.hasOwnProperty(i)&&u(s[i],l,c);i=!0}else a.registrationName?(u(a.registrationName,l,c),i=!0):i=!1;i||r("98",o,e)}}}}function u(e,t,n){On[e]&&r("100",e),On[e]=t,Pn[e]=t.eventTypes[n].dependencies}function l(e){mn&&r("101"),mn=Array.prototype.slice.call(e),a()}function c(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];gn.hasOwnProperty(t)&&gn[t]===o||(gn[t]&&r("102",t),gn[t]=o,n=!0)}n&&a()}function s(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=xn(r),bn.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function f(e,t){return null==t&&r("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function p(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}function d(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)s(e,t,n[o],r[o]);else n&&s(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function y(e){return d(e,!0)}function h(e){return d(e,!1)}function v(e,t){var n=e.stateNode;if(!n)return null;var o=Cn(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(e=e.type,o=!("button"===e||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&r("231",t,typeof n),n)}function b(e,t){null!==e&&(En=f(En,e)),e=En,En=null,e&&(t?p(e,y):p(e,h),En&&r("95"),bn.rethrowCaughtError())}function m(e,t,n,r){for(var o=null,i=0;i<_n.length;i++){var a=_n[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=f(o,a))}b(o,!1)}function g(e){if(e[In])return e[In];for(;!e[In];){if(!e.parentNode)return null;e=e.parentNode}return e=e[In],5===e.tag||6===e.tag?e:null}function _(e){if(5===e.tag||6===e.tag)return e.stateNode;r("33")}function w(e){return e[Nn]||null}function O(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function P(e,t,n){for(var r=[];e;)r.push(e),e=O(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function j(e,t,n){(t=v(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=f(n._dispatchListeners,t),n._dispatchInstances=f(n._dispatchInstances,e))}function C(e){e&&e.dispatchConfig.phasedRegistrationNames&&P(e._targetInst,j,e)}function k(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;t=t?O(t):null,P(t,j,e)}}function x(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=v(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=f(n._dispatchListeners,t),n._dispatchInstances=f(n._dispatchInstances,e))}function E(e){e&&e.dispatchConfig.registrationName&&x(e._targetInst,null,e)}function T(e){p(e,C)}function S(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=O(u))a++;u=0;for(var l=i;l;l=O(l))u++;for(;0<a-u;)o=O(o),a--;for(;0<u-a;)i=O(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=O(o),i=O(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=O(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=O(r);for(r=0;r<o.length;r++)x(o[r],"bubbled",e);for(e=n.length;0<e--;)x(n[e],"captured",t)}function M(){return!zn&&sn.canUseDOM&&(zn="textContent"in document.documentElement?"textContent":"innerText"),zn}function I(){if(An._fallbackText)return An._fallbackText;var e,t,n=An._startText,r=n.length,o=N(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return An._fallbackText=o.slice(e,1<t?1-t:void 0),An._fallbackText}function N(){return"value"in An._root?An._root.value:An._root[M()]}function D(e,t,n,r){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface;for(var o in e)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?pn.thatReturnsTrue:pn.thatReturnsFalse,this.isPropagationStopped=pn.thatReturnsFalse,this}function R(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function z(e){e instanceof this||r("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function A(e){e.eventPool=[],e.getPooled=R,e.release=z}function F(e,t){switch(e){case"topKeyUp":return-1!==Bn.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function U(e){return e=e.detail,"object"==typeof e&&"data"in e?e.data:null}function V(e,t){switch(e){case"topCompositionEnd":return U(t);case"topKeyPress":return 32!==t.which?null:(Xn=!0,Gn);case"topTextInput":return e=t.data,e===Gn&&Xn?null:e;default:return null}}function L(e,t){if(Yn)return"topCompositionEnd"===e||!Hn&&F(e,t)?(e=I(),An._root=null,An._startText=null,An._fallbackText=null,Yn=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return Kn?null:t.data;default:return null}}function B(e){if(e=kn(e)){Jn&&"function"==typeof Jn.restoreControlledState||r("194");var t=Cn(e.stateNode);Jn.restoreControlledState(e.stateNode,e.type,t)}}function H(e){Zn?er?er.push(e):er=[e]:Zn=e}function W(){return null!==Zn||null!==er}function $(){if(Zn){var e=Zn,t=er;if(er=Zn=null,B(e),t)for(e=0;e<t.length;e++)B(t[e])}}function K(e,t){return e(t)}function G(e,t,n){return e(t,n)}function q(){}function X(e,t){if(rr)return e(t);rr=!0;try{return K(e,t)}finally{rr=!1,W()&&(q(),$())}}function Y(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!or[e.type]:"textarea"===t}function Q(e){return e=e.target||window,e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function J(e,t){return!(!sn.canUseDOM||t&&!("addEventListener"in document))&&(e="on"+e,t=e in document,t||(t=document.createElement("div"),t.setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function Z(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ee(e){var t=Z(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}function te(e){e._valueTracker||(e._valueTracker=ee(e))}function ne(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Z(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function re(e){return null===e||void 0===e?null:(e=br&&e[br]||e["@@iterator"],"function"==typeof e?e:null)}function oe(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case fr:return"ReactFragment";case sr:return"ReactPortal";case lr:return"ReactCall";case cr:return"ReactReturn"}return null}function ie(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=oe(e),i=null;n&&(i=oe(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}function ae(e){return!!_r.hasOwnProperty(e)||!gr.hasOwnProperty(e)&&(mr.test(e)?_r[e]=!0:(gr[e]=!0,!1))}function ue(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}function le(e,t,n,r){if(null===t||void 0===t||ue(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function ce(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}function se(e){return e[1].toUpperCase()}function fe(e,t,n,r){var o=wr.hasOwnProperty(t)?wr[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(le(t,n,o,r)&&(n=null),r||null===o?ae(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(o=o.type,n=3===o||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function pe(e,t){var n=t.checked;return fn({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function de(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=me(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ye(e,t){null!=(t=t.checked)&&fe(e,"checked",t,!1)}function he(e,t){ye(e,t);var n=me(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?be(e,t.type,n):t.hasOwnProperty("defaultValue")&&be(e,t.type,me(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ve(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),t=e.name,""!==t&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function be(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function me(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ge(e,t,n){return e=D.getPooled(Pr.change,e,t,n),e.type="change",H(n),T(e),e}function _e(e){b(e,!1)}function we(e){if(ne(_(e)))return e}function Oe(e,t){if("topChange"===e)return t}function Pe(){jr&&(jr.detachEvent("onpropertychange",je),Cr=jr=null)}function je(e){"value"===e.propertyName&&we(Cr)&&(e=ge(Cr,e,Q(e)),X(_e,e))}function Ce(e,t,n){"topFocus"===e?(Pe(),jr=t,Cr=n,jr.attachEvent("onpropertychange",je)):"topBlur"===e&&Pe()}function ke(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return we(Cr)}function xe(e,t){if("topClick"===e)return we(t)}function Ee(e,t){if("topInput"===e||"topChange"===e)return we(t)}function Te(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Se(){return Te}function Me(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(t=t.return,0!=(2&t.effectTag))return 1}return 3===t.tag?2:3}function Ie(e){return!!(e=e._reactInternalFiber)&&2===Me(e)}function Ne(e){2!==Me(e)&&r("188")}function De(e){var t=e.alternate;if(!t)return t=Me(e),3===t&&r("188"),1===t?null:e;for(var n=e,o=t;;){var i=n.return,a=i?i.alternate:null;if(!i||!a)break;if(i.child===a.child){for(var u=i.child;u;){if(u===n)return Ne(i),e;if(u===o)return Ne(i),t;u=u.sibling}r("188")}if(n.return!==o.return)n=i,o=a;else{u=!1;for(var l=i.child;l;){if(l===n){u=!0,n=i,o=a;break}if(l===o){u=!0,o=i,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,o=i;break}if(l===o){u=!0,o=a,n=i;break}l=l.sibling}u||r("189")}}n.alternate!==o&&r("190")}return 3!==n.tag&&r("188"),n.stateNode.current===n?e:t}function Re(e){if(!(e=De(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function ze(e){if(!(e=De(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ae(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Fe(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;n="top"+n,t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},Hr[e]=t,Wr[n]=t}function Ue(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=g(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],m(e.topLevelType,t,e.nativeEvent,Q(e.nativeEvent))}function Ve(e){qr=!!e}function Le(e,t,n){if(!n)return null;e=(Kr(e)?He:We).bind(null,e),n.addEventListener(t,e,!1)}function Be(e,t,n){if(!n)return null;e=(Kr(e)?He:We).bind(null,e),n.addEventListener(t,e,!0)}function He(e,t){G(We,e,t)}function We(e,t){if(qr){var n=Q(t);if(n=g(n),null!==n&&"number"==typeof n.tag&&2!==Me(n)&&(n=null),Gr.length){var r=Gr.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{X(Ue,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Gr.length&&Gr.push(e)}}}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}function Ke(e){if(Qr[e])return Qr[e];if(!Yr[e])return e;var t,n=Yr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Jr)return Qr[e]=n[t];return e}function Ge(e){return Object.prototype.hasOwnProperty.call(e,ro)||(e[ro]=no++,to[e[ro]]={}),to[e[ro]]}function qe(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xe(e,t){var n=qe(e);e=0;for(var r;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=qe(n)}}function Ye(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}function Qe(e,t){if(co||null==ao||ao!==dn())return null;var n=ao;return"selectionStart"in n&&Ye(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?(n=window.getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}):n=void 0,lo&&yn(lo,n)?null:(lo=n,e=D.getPooled(io.select,uo,e,t),e.type="select",e.target=ao,T(e),e)}function Je(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Ze(e,t,n){var r=e.alternate;return null===r?(r=new Je(e.tag,t,e.key,e.mode),r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function et(e,t,n){var o=e.type,i=e.key;e=e.props;var a=void 0;if("function"==typeof o)a=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)a=5;else switch(o){case fr:return tt(e.children,t,n,i);case hr:a=11,t|=3;break;case pr:a=11,t|=2;break;case lr:a=7;break;case cr:a=9;break;default:if("object"==typeof o&&null!==o)switch(o.$$typeof){case dr:a=13;break;case yr:a=12;break;case vr:a=14;break;default:if("number"==typeof o.tag)return t=o,t.pendingProps=e,t.expirationTime=n,t;r("130",null==o?o:typeof o,"")}else r("130",null==o?o:typeof o,"")}return t=new Je(a,e,i,t),t.type=o,t.expirationTime=n,t}function tt(e,t,n,r){return e=new Je(10,e,r,t),e.expirationTime=n,e}function nt(e,t,n){return e=new Je(6,e,null,t),e.expirationTime=n,e}function rt(e,t,n){return t=new Je(4,null!==e.children?e.children:[],e.key,t),t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ot(e){return function(t){try{return e(t)}catch(e){}}}function it(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);fo=ot(function(e){return t.onCommitFiberRoot(n,e)}),po=ot(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}function at(e){"function"==typeof fo&&fo(e)}function ut(e){"function"==typeof po&&po(e)}function lt(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ct(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}function st(e){yo=ho=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=lt(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=lt(null)):e=null,yo=n,ho=e!==n?e:null}function ft(e,t){st(e),e=yo;var n=ho;null===n?ct(e,t):null===e.last||null===n.last?(ct(e,t),ct(n,t)):(ct(e,t),n.last=t)}function pt(e,t,n,r){return e=e.partialState,"function"==typeof e?e.call(t,n,r):e}function dt(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var a=!0,u=n.first,l=!1;null!==u;){var c=u.expirationTime;if(c>i){var s=n.expirationTime;(0===s||s>c)&&(n.expirationTime=c),l||(l=!0,n.baseState=e)}else l||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=pt(u,r,e,o),a=!0):(c=pt(u,r,e,o))&&(e=a?fn({},e,c):fn(e,c),a=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(c=n.callbackList,null===c&&(c=n.callbackList=[]),c.push(u)),null!==u.capturedValue&&(c=n.capturedValues,null===c?n.capturedValues=[u.capturedValue]:c.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),l||(n.baseState=e),e}function yt(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var o=n[e],i=o.callback;o.callback=null,"function"!=typeof i&&r("191",i),i.call(t)}}function ht(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!e.prototype||!e.prototype.isPureReactComponent||(!yn(t,n)||!yn(r,o))}function a(e,t){t.updater=y,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&y.enqueueReplaceState(t,t.state,null)}function l(e,t,n,r){if(e=e.type,"function"==typeof e.getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var c=e.cacheContext,s=e.getMaskedContext,f=e.getUnmaskedContext,p=e.isContextConsumer,d=e.hasContextChanged,y={isMounted:Ie,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);ft(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);ft(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);ft(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:a,callGetDerivedStateFromProps:l,constructClassInstance:function(e,t){var n=e.type,r=f(e),o=p(e),i=o?s(e,r):vn;n=new n(t,i);var u=null!==n.state&&void 0!==n.state?n.state:null;return a(e,n),e.memoizedState=u,t=l(e,n,t,u),null!==t&&void 0!==t&&(e.memoizedState=fn({},e.memoizedState,t)),o&&c(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=f(e);o.props=i,o.state=e.memoizedState,o.refs=vn,o.context=s(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&y.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=dt(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,a=e.stateNode;a.props=e.memoizedProps,a.state=e.memoizedState;var c=e.memoizedProps,p=e.pendingProps,y=a.context,h=f(e);h=s(e,h),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==p||y!==h)&&u(e,a,p,h),y=e.memoizedState,t=null!==e.updateQueue?dt(null,e,e.updateQueue,a,p,t):y;var v=void 0;return c!==p&&(v=l(e,a,p,t)),null!==v&&void 0!==v&&(t=null===t||void 0===t?v:fn({},t,v)),c!==p||y!==t||d()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((c=i(e,c,p,y,t,h))?(n||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.effectTag|=4)):("function"==typeof a.componentDidMount&&(e.effectTag|=4),r(e,p),o(e,t)),a.props=p,a.state=t,a.context=h,c):("function"==typeof a.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var a=t.type,c=t.stateNode;c.props=t.memoizedProps,c.state=t.memoizedState;var p=t.memoizedProps,y=t.pendingProps,h=c.context,v=f(t);v=s(t,v),(a="function"==typeof a.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(p!==y||h!==v)&&u(t,c,y,v),h=t.memoizedState,n=null!==t.updateQueue?dt(e,t,t.updateQueue,c,y,n):h;var b=void 0;return p!==y&&(b=l(t,c,y,n)),null!==b&&void 0!==b&&(n=null===n||void 0===n?b:fn({},n,b)),p!==y||h!==n||d()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((b=i(t,p,y,h,n,v))?(a||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(y,n,v),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(y,n,v)),"function"==typeof c.componentDidUpdate&&(t.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||p===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||p===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=2048),r(t,y),o(t,n)),c.props=y,c.state=n,c.context=v,b):("function"!=typeof c.componentDidUpdate||p===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||p===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=2048),!1)}}}function vt(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var o=void 0;n&&(2!==n.tag&&r("110"),o=n.stateNode),o||r("147",e);var i=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs===vn?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}"string"!=typeof e&&r("148"),n._owner||r("254",e)}return e}function bt(e,t){"textarea"!==e.type&&r("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mt(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return e=Ze(e,t,n),e.index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index,r<n?(t.effectTag=2,n):r):(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?(t=nt(n,e.mode,r),t.return=e,t):(t=i(t,n,r),t.return=e,t)}function c(e,t,n,r){return null!==t&&t.type===n.type?(r=i(t,n.props,r),r.ref=vt(e,t,n),r.return=e,r):(r=et(n,e.mode,r),r.ref=vt(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?(t=rt(n,e.mode,r),t.return=e,t):(t=i(t,n.children||[],r),t.return=e,t)}function f(e,t,n,r,o){return null===t||10!==t.tag?(t=tt(n,e.mode,r,o),t.return=e,t):(t=i(t,n,r),t.return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return t=nt(""+t,e.mode,n),t.return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ur:return n=et(t,e.mode,n),n.ref=vt(e,null,t),n.return=e,n;case sr:return t=rt(t,e.mode,n),t.return=e,t}if(vo(t)||re(t))return t=tt(t,e.mode,n,null),t.return=e,t;bt(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ur:return n.key===o?n.type===fr?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case sr:return n.key===o?s(e,t,n,r):null}if(vo(n)||re(n))return null!==o?null:f(e,t,n,r,null);bt(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return e=e.get(n)||null,l(t,e,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ur:return e=e.get(null===r.key?n:r.key)||null,r.type===fr?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case sr:return e=e.get(null===r.key?n:r.key)||null,s(t,e,r,o)}if(vo(r)||re(r))return e=e.get(n)||null,f(t,e,r,o,null);bt(t,r)}return null}function h(r,i,u,l){for(var c=null,s=null,f=i,h=i=0,v=null;null!==f&&h<u.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var b=d(r,f,u[h],l);if(null===b){null===f&&(f=v);break}e&&f&&null===b.alternate&&t(r,f),i=a(b,i,h),null===s?c=b:s.sibling=b,s=b,f=v}if(h===u.length)return n(r,f),c;if(null===f){for(;h<u.length;h++)(f=p(r,u[h],l))&&(i=a(f,i,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=o(r,f);h<u.length;h++)(v=y(f,r,h,u[h],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),i=a(v,i,h),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(r,e)}),c}function v(i,u,l,c){var s=re(l);"function"!=typeof s&&r("150"),null==(l=s.call(l))&&r("151");for(var f=s=null,h=u,v=u=0,b=null,m=l.next();null!==h&&!m.done;v++,m=l.next()){h.index>v?(b=h,h=null):b=h.sibling;var g=d(i,h,m.value,c);if(null===g){h||(h=b);break}e&&h&&null===g.alternate&&t(i,h),u=a(g,u,v),null===f?s=g:f.sibling=g,f=g,h=b}if(m.done)return n(i,h),s;if(null===h){for(;!m.done;v++,m=l.next())null!==(m=p(i,m.value,c))&&(u=a(m,u,v),null===f?s=m:f.sibling=m,f=m);return s}for(h=o(i,h);!m.done;v++,m=l.next())null!==(m=y(h,i,v,m.value,c))&&(e&&null!==m.alternate&&h.delete(null===m.key?v:m.key),u=a(m,u,v),null===f?s=m:f.sibling=m,f=m);return e&&h.forEach(function(e){return t(i,e)}),s}return function(e,o,a,l){"object"==typeof a&&null!==a&&a.type===fr&&null===a.key&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case ur:e:{var s=a.key;for(c=o;null!==c;){if(c.key===s){if(10===c.tag?a.type===fr:c.type===a.type){n(e,c.sibling),o=i(c,a.type===fr?a.props.children:a.props,l),o.ref=vt(e,c,a),o.return=e,e=o;break e}n(e,c);break}t(e,c),c=c.sibling}a.type===fr?(o=tt(a.props.children,e.mode,l,a.key),o.return=e,e=o):(l=et(a,e.mode,l),l.ref=vt(e,o,a),l.return=e,e=l)}return u(e);case sr:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(e,o.sibling),o=i(o,a.children||[],l),o.return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}o=rt(a,e.mode,l),o.return=e,e=o}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==o&&6===o.tag?(n(e,o.sibling),o=i(o,a,l)):(n(e,o),o=nt(a,e.mode,l)),o.return=e,e=o,u(e);if(vo(a))return h(e,o,a,l);if(re(a))return v(e,o,a,l);if(c&&bt(e,a),void 0===a)switch(e.tag){case 2:case 1:l=e.type,r("152",l.displayName||l.name||"Component")}return n(e,o)}}function gt(e,t,n,o,i,a,u){function l(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,r){t.child=null===e?mo(t,null,n,r):bo(t,e.child,n,r)}function s(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function f(e,t,n,r,o,i){if(s(e,t),!n&&!o)return r&&k(t,!1),h(e,t);n=t.stateNode,ir.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(c(e,t,null,i),t.child=null),c(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&k(t,!0),t.child}function p(e){var t=e.stateNode;t.pendingContext?C(e,t.pendingContext,t.pendingContext!==t.context):t.context&&C(e,t.context,!1),g(e,t.containerInfo)}function d(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function y(e,t,n){var r=t.type.context,o=t.pendingProps,i=t.memoizedProps;if(!P()&&i===o)return t.stateNode=0,_(t),h(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,_(t),h(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!==u&&a!==a){if(i.children===o.children)return t.stateNode=0,_(t),h(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0===(a|=0)){if(i.children===o.children)return t.stateNode=0,_(t),h(e,t)}else d(t,r,a,n)}return t.stateNode=a,_(t),l(e,t,o.children),t.child}function h(e,t){if(null!==e&&t.child!==e.child&&r("153"),null!==t.child){e=t.child;var n=Ze(e,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,n=n.sibling=Ze(e,e.pendingProps,e.expirationTime),n.return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,m=t.pushHostContext,g=t.pushHostContainer,_=o.pushProvider,w=n.getMaskedContext,O=n.getUnmaskedContext,P=n.hasContextChanged,j=n.pushContextProvider,C=n.pushTopLevelContextObject,k=n.invalidateContextProvider,x=i.enterHydrationState,E=i.resetHydrationState,T=i.tryToClaimNextHydratableInstance;e=ht(n,a,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t});var S=e.adoptClassInstance,M=e.callGetDerivedStateFromProps,I=e.constructClassInstance,N=e.mountClassInstance,D=e.resumeMountClassInstance,R=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:p(t);break;case 2:j(t);break;case 4:g(t,t.stateNode.containerInfo);break;case 13:_(t)}return null}switch(t.tag){case 0:null!==e&&r("155");var o=t.type,i=t.pendingProps,a=O(t);return a=w(t,a),o=o(i,a),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof a.getDerivedStateFromProps&&null!==(i=M(t,o,i,t.memoizedState))&&void 0!==i&&(t.memoizedState=fn({},t.memoizedState,i)),i=j(t),S(t,o),N(t,n),e=f(e,t,!0,i,!1,n)):(t.tag=1,l(e,t,o),t.memoizedProps=i,e=t.child),e;case 1:return i=t.type,n=t.pendingProps,P()||t.memoizedProps!==n?(o=O(t),o=w(t,o),i=i(n,o),t.effectTag|=1,l(e,t,i),t.memoizedProps=n,e=t.child):e=h(e,t),e;case 2:i=j(t),null===e?null===t.stateNode?(I(t,t.pendingProps),N(t,n),o=!0):o=D(t,n):o=R(e,t,n),a=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(a=o=!0),f(e,t,o,i,a,n);case 3:e:if(p(t),null!==(o=t.updateQueue)){if(a=t.memoizedState,i=dt(e,t,o,null,null,n),t.memoizedState=i,null!==(o=t.updateQueue)&&null!==o.capturedValues)o=null;else{if(a===i){E(),e=h(e,t);break e}o=i.element}a=t.stateNode,(null===e||null===e.child)&&a.hydrate&&x(t)?(t.effectTag|=2,t.child=mo(t,null,o,n)):(E(),l(e,t,o)),t.memoizedState=i,e=t.child}else E(),e=h(e,t);return e;case 5:return m(t),null===e&&T(t),i=t.type,u=t.memoizedProps,o=t.pendingProps,a=null!==e?e.memoizedProps:null,P()||u!==o||((u=1&t.mode&&b(i,o))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=o.children,v(i,o)?u=null:a&&v(i,a)&&(t.effectTag|=16),s(e,t),1073741823!==n&&1&t.mode&&b(i,o)?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(l(e,t,u),t.memoizedProps=o,e=t.child)):e=h(e,t),e;case 6:return null===e&&T(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return i=t.pendingProps,P()||t.memoizedProps!==i||(i=t.memoizedProps),o=i.children,t.stateNode=null===e?mo(t,t.stateNode,o,n):bo(t,e.stateNode,o,n),t.memoizedProps=i,t.stateNode;case 9:return null;case 4:return g(t,t.stateNode.containerInfo),i=t.pendingProps,P()||t.memoizedProps!==i?(null===e?t.child=bo(t,null,i,n):l(e,t,i),t.memoizedProps=i,e=t.child):e=h(e,t),e;case 14:return n=t.type.render,n=n(t.pendingProps,t.ref),l(e,t,n),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,P()||t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=h(e,t),e;case 11:return n=t.pendingProps.children,P()||null!==n&&t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=h(e,t),e;case 13:return y(e,t,n);case 12:o=t.type,a=t.pendingProps;var c=t.memoizedProps;return i=o._currentValue,u=o._changedBits,P()||0!==u||c!==a?(t.memoizedProps=a,c=a.unstable_observedBits,void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(u&c)&&d(t,o,u,n),n=a.children,n=n(i),l(e,t,n),e=t.child):e=h(e,t),e;default:r("156")}}}}function _t(e,t,n,o,i){function a(e){e.effectTag|=4}var u=e.createInstance,l=e.createTextInstance,c=e.appendInitialChild,s=e.finalizeInitialChildren,f=e.prepareUpdate,p=e.persistence,d=t.getRootHostContainer,y=t.popHostContext,h=t.getHostContext,v=t.popHostContainer,b=n.popContextProvider,m=n.popTopLevelContextObject,g=o.popProvider,_=i.prepareToHydrateHostInstance,w=i.prepareToHydrateHostTextInstance,O=i.popHydrationState,P=void 0,j=void 0,C=void 0;return e.mutation?(P=function(){},j=function(e,t,n){(t.updateQueue=n)&&a(t)},C=function(e,t,n,r){n!==r&&a(t)}):r(p?"235":"236"),{completeWork:function(e,t,n){var o=t.pendingProps;switch(t.tag){case 1:return null;case 2:return b(t),e=t.stateNode,o=t.updateQueue,null!==o&&null!==o.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:o.capturedValues=null),null;case 3:return v(t),m(t),o=t.stateNode,o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(O(t),t.effectTag&=-3),P(t),e=t.updateQueue,null!==e&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:y(t),n=d();var i=t.type;if(null!==e&&null!=t.stateNode){var p=e.memoizedProps,k=t.stateNode,x=h();k=f(k,i,p,o,n,x),j(e,t,k,i,p,o,n,x),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!o)return null===t.stateNode&&r("166"),null;if(e=h(),O(t))_(t,n,e)&&a(t);else{p=u(i,o,n,e,t);e:for(x=t.child;null!==x;){if(5===x.tag||6===x.tag)c(p,x.stateNode);else if(4!==x.tag&&null!==x.child){x.child.return=x,x=x.child;continue}if(x===t)break;for(;null===x.sibling;){if(null===x.return||x.return===t)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}s(p,i,o,n,e)&&a(t),t.stateNode=p}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)C(e,t,e.memoizedProps,o);else{if("string"!=typeof o)return null===t.stateNode&&r("166"),null;e=d(),n=h(),O(t)?w(t)&&a(t):t.stateNode=l(o,e,n,t)}return null;case 7:(o=t.memoizedProps)||r("165"),t.tag=8,i=[];e:for((p=t.stateNode)&&(p.return=t);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)r("247");else if(9===p.tag)i.push(p.pendingProps.value);else if(null!==p.child){p.child.return=p,p=p.child;continue}for(;null===p.sibling;){if(null===p.return||p.return===t)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}return p=o.handler,o=p(o.props,i),t.child=bo(t,null!==e?e.child:null,o,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return v(t),P(t),null;case 13:return g(t),null;case 12:return null;case 0:r("167");default:r("156")}}}}function wt(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,l=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ie(t)};do{switch(e.tag){case 3:return st(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){st(e),n=e.updateQueue;var r=n.capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),l(e),t=e.effectTag,1024&t?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),l(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}function Ot(e,t){var n=t.source;null===t.stack&&ie(n),null!==n&&oe(n),t=t.value,null!==e&&2===e.tag&&oe(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Pt(e,t,n,o,i){function a(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function u(e){switch("function"==typeof ut&&ut(e),e.tag){case 2:a(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:a(e);break;case 7:l(e.stateNode);break;case 4:p&&s(e)}}function l(e){for(var t=e;;)if(u(t),null===t.child||p&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function c(e){return 5===e.tag||3===e.tag||4===e.tag}function s(e){for(var t=e,n=!1,o=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&r("160"),n.tag){case 5:o=n.stateNode,i=!1;break e;case 3:case 4:o=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)l(t),i?O(o,t.stateNode):w(o,t.stateNode);else if(4===t.tag?o=t.stateNode.containerInfo:u(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return,4===t.tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var f=e.getPublicInstance,p=e.mutation;e=e.persistence,p||r(e?"235":"236");var d=p.commitMount,y=p.commitUpdate,h=p.resetTextContent,v=p.commitTextUpdate,b=p.appendChild,m=p.appendChildToContainer,g=p.insertBefore,_=p.insertInContainerBefore,w=p.removeChild,O=p.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,o=e.memoizedState;e=t.stateNode,e.props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,o),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:r("163")}},commitResetTextContent:function(e){h(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(c(t)){var n=t;break e}t=t.return}r("160"),n=void 0}var o=t=void 0;switch(n.tag){case 5:t=n.stateNode,o=!1;break;case 3:case 4:t=n.stateNode.containerInfo,o=!0;break;default:r("161")}16&n.effectTag&&(h(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||c(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)n?o?_(t,i.stateNode,n):g(t,i.stateNode,n):o?m(t,i.stateNode):b(t,i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},commitDeletion:function(e){s(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var i=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&y(n,a,i,e,o,t)}break;case 6:null===t.stateNode&&r("162"),n=t.memoizedProps,v(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:r("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var o=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}n=n.updateQueue,null!==n&&yt(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=f(n.child.stateNode);break;case 2:e=n.child.stateNode}yt(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:r("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var o=e.updateQueue;(null===o||null===o.capturedValues)&&r("264");var a=o.capturedValues;for(o.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&i(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<a.length;n++){o=a[n];var u=o.value,l=o.stack;Ot(e,o),t.componentDidCatch(u,{componentStack:null!==l?l:""})}break;case 3:for(n=e.updateQueue,(null===n||null===n.capturedValues)&&r("264"),a=n.capturedValues,n.capturedValues=null,n=0;n<a.length;n++)o=a[n],Ot(e,o),t(o.value);break;default:r("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=f(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}function jt(e,t){function n(e){return e===go&&r("174"),e}var o=e.getChildHostContext,i=e.getRootHostContext;e=t.createCursor;var a=t.push,u=t.pop,l=e(go),c=e(go),s=e(go);return{getHostContext:function(){return n(l.current)},getRootHostContainer:function(){return n(s.current)},popHostContainer:function(e){u(l,e),u(c,e),u(s,e)},popHostContext:function(e){c.current===e&&(u(l,e),u(c,e))},pushHostContainer:function(e,t){a(s,t,e),t=i(t),a(c,e,e),a(l,t,e)},pushHostContext:function(e){var t=n(s.current),r=n(l.current);t=o(r,e.type,t),r!==t&&(a(c,e,e),a(l,t,e))}}}function Ct(e){function t(e,t){var n=new Je(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=u(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var i=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){r("175")},prepareToHydrateHostTextInstance:function(){r("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,u=e.canHydrateTextInstance,l=e.getNextHydratableSibling,c=e.getFirstHydratableChild,s=e.hydrateInstance,f=e.hydrateTextInstance,p=null,d=null,y=!1;return{enterHydrationState:function(e){return d=c(e.stateNode.containerInfo),p=e,y=!0},resetHydrationState:function(){d=p=null,y=!1},tryToClaimNextHydratableInstance:function(e){if(y){var r=d;if(r){if(!n(e,r)){if(!(r=l(r))||!n(e,r))return e.effectTag|=2,y=!1,void(p=e);t(p,d)}p=e,d=c(r)}else e.effectTag|=2,y=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return f(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!y)return o(e),y=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!i(n,e.memoizedProps))for(n=d;n;)t(e,n),n=l(n);return o(e),d=p?l(e.stateNode):null,!0}}}function kt(e){function t(e,t,n){e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function o(e,t){var n=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;n=n.getChildContext();for(var i in n)i in o||r("108",oe(e)||"Unknown",i);return fn({},t,n)}var i=e.createCursor,a=e.push,u=e.pop,l=i(vn),c=i(!1),s=vn;return{getUnmaskedContext:function(e){return n(e)?s:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return vn;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(c,e),u(l,e))},popTopLevelContextObject:function(e){u(c,e),u(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&r("168"),a(l,t,e),a(c,n,e)},processChildContext:o,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||vn,s=l.current,a(l,t,e),a(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||r("169"),t){var i=o(e,s);n.__reactInternalMemoizedMergedChildContext=i,u(c,e),u(l,e),a(l,i,e)}else u(c,e);a(c,t,e)},findCurrentUnmaskedContext:function(e){for(2!==Me(e)||2!==e.tag?r("170"):void 0;3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||r("171")}return e.stateNode.context}}}function xt(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type.context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),e=e.type.context,e._currentValue=n,e._changedBits=t}}}function Et(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){t++,e[t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}function Tt(e){function t(){if(null!==Z)for(var e=Z.return;null!==e;)I(e),e=e.return;ee=null,te=0,Z=null,oe=!1}function n(e){return null!==ae&&ae.has(e)}function o(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=T(t,e,te);var o=e;if(1073741823===te||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){oe=!0;break}e=n}else{if(null!==(e=M(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function i(e){var t=E(e.alternate,e,te);return null===t&&(t=o(e)),ir.current=null,t}function a(e,n,a){J&&r("243"),J=!0,n===te&&e===ee&&null!==Z||(t(),ee=e,te=n,Z=Ze(ee.current,null,te),e.pendingCommitExpirationTime=0);for(var u=!1;;){try{if(a)for(;null!==Z&&!O();)Z=i(Z);else for(;null!==Z;)Z=i(Z)}catch(e){if(null===Z){u=!0,P(e);break}a=Z;var l=a.return;if(null===l){u=!0,P(e);break}S(l,a,e),Z=o(a)}break}return J=!1,u||null!==Z?null:oe?(e.pendingCommitExpirationTime=n,e.current.alternate):void r("262")}function u(e,t,n,r){e={value:n,source:e,stack:ie(e)},ft(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e,next:null}),s(t,r)}function l(e,t){e:{J&&!re&&r("263");for(var o=e.return;null!==o;){switch(o.tag){case 2:var i=o.stateNode;if("function"==typeof o.type.getDerivedStateFromCatch||"function"==typeof i.componentDidCatch&&!n(i)){u(e,o,t,1),e=void 0;break e}break;case 3:u(e,o,t,1),e=void 0;break e}o=o.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function c(e){return e=0!==Q?Q:J?re?1:te:1&e.mode?we?10*(1+((f()+50)/10|0)):25*(1+((f()+500)/25|0)):1,we&&(0===ye||e>ye)&&(ye=e),e}function s(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var o=e.stateNode;!J&&0!==te&&n<te&&t(),J&&!re&&ee===o||y(o,n),je>Pe&&r("185")}e=e.return}n=void 0}return n}function f(){return X=B()-G,q=2+(X/10|0)}function p(e,t,n,r,o){var i=Q;Q=1;try{return e(t,n,r,o)}finally{Q=i}}function d(e){if(0!==ce){if(e>ce)return;W(se)}var t=B()-G;ce=e,se=H(v,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(ue=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e,le.nextScheduledRoot=ue);else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ge?_e&&(pe=e,de=1,_(e,1,!1)):1===t?b():d(t))}function h(){var e=0,t=null;if(null!==le)for(var n=le,o=ue;null!==o;){var i=o.remainingExpirationTime;if(0===i){if((null===n||null===le)&&r("244"),o===o.nextScheduledRoot){ue=le=o.nextScheduledRoot=null;break}if(o===ue)ue=i=o.nextScheduledRoot,le.nextScheduledRoot=i,o.nextScheduledRoot=null;else{if(o===le){le=n,le.nextScheduledRoot=ue,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((0===e||i<e)&&(e=i,t=o),o===le)break;n=o,o=o.nextScheduledRoot}}n=pe,null!==n&&n===t&&1===e?je++:je=0,pe=t,de=e}function v(e){m(0,!0,e)}function b(){m(1,!1,null)}function m(e,t,n){if(me=n,h(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!he||f()>=de);)_(pe,de,!he),h();else for(;null!==pe&&0!==de&&(0===e||e>=de);)_(pe,de,!1),h();null!==me&&(ce=0,se=-1),0!==de&&d(de),me=null,he=!1,g()}function g(){if(je=0,null!==Oe){var e=Oe;Oe=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ve||(ve=!0,be=e)}}}if(ve)throw e=be,be=null,ve=!1,e}function _(e,t,n){fe&&r("245"),fe=!0,n?(n=e.finishedWork,null!==n?w(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!0))&&(O()?e.finishedWork=n:w(e,n,t)))):(n=e.finishedWork,null!==n?w(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!1))&&w(e,n,t))),fe=!1}function w(e,t,n){var o=e.firstBatch;if(null!==o&&o._expirationTime<=n&&(null===Oe?Oe=[o]:Oe.push(o),o._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,re=J=!0,n=t.stateNode,n.current===t&&r("177"),o=n.pendingCommitExpirationTime,0===o&&r("261"),n.pendingCommitExpirationTime=0;var i=f();if(ir.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;for($(n.containerInfo),ne=a;null!==ne;){var u=!1,c=void 0;try{for(;null!==ne;)2048&ne.effectTag&&N(ne.alternate,ne),ne=ne.nextEffect}catch(e){u=!0,c=e}u&&(null===ne&&r("178"),l(ne,c),null!==ne&&(ne=ne.nextEffect))}for(ne=a;null!==ne;){u=!1,c=void 0;try{for(;null!==ne;){var s=ne.effectTag;if(16&s&&D(ne),128&s){var p=ne.alternate;null!==p&&L(p)}switch(14&s){case 2:R(ne),ne.effectTag&=-3;break;case 6:R(ne),ne.effectTag&=-3,A(ne.alternate,ne);break;case 4:A(ne.alternate,ne);break;case 8:z(ne)}ne=ne.nextEffect}}catch(e){u=!0,c=e}u&&(null===ne&&r("178"),l(ne,c),null!==ne&&(ne=ne.nextEffect))}for(K(n.containerInfo),n.current=t,ne=a;null!==ne;){s=!1,p=void 0;try{for(a=n,u=i,c=o;null!==ne;){var d=ne.effectTag;36&d&&F(a,ne.alternate,ne,u,c),256&d&&U(ne,P),128&d&&V(ne);var y=ne.nextEffect;ne.nextEffect=null,ne=y}}catch(e){s=!0,p=e}s&&(null===ne&&r("178"),l(ne,p),null!==ne&&(ne=ne.nextEffect))}J=re=!1,"function"==typeof at&&at(t.stateNode),t=n.current.expirationTime,0===t&&(ae=null),e.remainingExpirationTime=t}function O(){return!(null===me||me.timeRemaining()>Ce)&&(he=!0)}function P(e){null===pe&&r("246"),pe.remainingExpirationTime=0,ve||(ve=!0,be=e)}var j=Et(),C=jt(e,j),k=kt(j);j=xt(j);var x=Ct(e),E=gt(e,C,k,j,x,s,c).beginWork,T=_t(e,C,k,j,x).completeWork;C=wt(C,k,j,s,n);var S=C.throwException,M=C.unwindWork,I=C.unwindInterruptedWork;C=Pt(e,l,s,c,function(e){null===ae?ae=new Set([e]):ae.add(e)},f);var N=C.commitBeforeMutationLifeCycles,D=C.commitResetTextContent,R=C.commitPlacement,z=C.commitDeletion,A=C.commitWork,F=C.commitLifeCycles,U=C.commitErrorLogging,V=C.commitAttachRef,L=C.commitDetachRef,B=e.now,H=e.scheduleDeferredCallback,W=e.cancelDeferredCallback,$=e.prepareForCommit,K=e.resetAfterCommit,G=B(),q=2,X=G,Y=0,Q=0,J=!1,Z=null,ee=null,te=0,ne=null,re=!1,oe=!1,ae=null,ue=null,le=null,ce=0,se=-1,fe=!1,pe=null,de=0,ye=0,he=!1,ve=!1,be=null,me=null,ge=!1,_e=!1,we=!1,Oe=null,Pe=1e3,je=0,Ce=1;return{recalculateCurrentTime:f,computeExpirationForFiber:c,scheduleWork:s,requestWork:y,flushRoot:function(e,t){fe&&r("253"),pe=e,de=t,_(e,t,!1),b(),g()},batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||fe||b()}},unbatchedUpdates:function(e,t){if(ge&&!_e){_e=!0;try{return e(t)}finally{_e=!1}}return e(t)},flushSync:function(e,t){fe&&r("187");var n=ge;ge=!0;try{return p(e,t)}finally{ge=n,b()}},flushControlled:function(e){var t=ge;ge=!0;try{p(e)}finally{(ge=t)||fe||m(1,!1,null)}},deferredUpdates:function(e){var t=Q;Q=25*(1+((f()+500)/25|0));try{return e()}finally{Q=t}},syncUpdates:p,interactiveUpdates:function(e,t,n){if(we)return e(t,n);ge||fe||0===ye||(m(ye,!1,null),ye=0);var r=we,o=ge;ge=we=!0;try{return e(t,n)}finally{we=r,(ge=o)||fe||b()}},flushInteractiveUpdates:function(){fe||0===ye||(m(ye,!1,null),ye=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((f()+500)/25|0));return e<=Y&&(e=Y+1),Y=e},legacyContext:k}}function St(e){function t(e,t,n,r,o,i){if(r=t.current,n){n=n._reactInternalFiber;var u=l(n);n=c(n)?s(n,u):u}else n=vn;return null===t.context?t.context=n:t.pendingContext=n,t=i,ft(r,{expirationTime:o,partialState:{element:e},callback:void 0===t?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),a(r,o),o}function n(e){return e=Re(e),null===e?null:e.stateNode}var r=e.getPublicInstance;e=Tt(e);var o=e.recalculateCurrentTime,i=e.computeExpirationForFiber,a=e.scheduleWork,u=e.legacyContext,l=u.findCurrentUnmaskedContext,c=u.isContextProvider,s=u.processChildContext;return{createContainer:function(e,t,n){return t=new Je(3,null,null,t?3:0),e={current:t,containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,r,a){var u=n.current,l=o();return u=i(u),t(e,n,r,l,u,a)},updateContainerAtExpirationTime:function(e,n,r,i,a){return t(e,n,r,o(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return r(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:n,findHostInstanceWithNoPortals:function(e){return e=ze(e),null===e?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return it(fn({},e,{findHostInstanceByFiber:function(e){return n(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}function Mt(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:sr,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function It(e){var t="";return cn.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}function Nt(e,t){return e=fn({children:void 0},t),(t=It(t.children))&&(e.children=t),e}function Dt(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Rt(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function zt(e,t){return null!=t.dangerouslySetInnerHTML&&r("91"),fn({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function At(e,t){var n=t.value;null==n&&(n=t.defaultValue,t=t.children,null!=t&&(null!=n&&r("92"),Array.isArray(t)&&(1>=t.length||r("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Ft(e,t){var n=t.value;null!=n&&(n=""+n,n!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Ut(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}function Vt(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Lt(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Vt(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}function Bt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ht(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Vo.hasOwnProperty(o)&&Vo[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}function Wt(e,t,n){t&&(Bo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&r("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&r("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||r("61")),null!=t.style&&"object"!=typeof t.style&&r("62",n()))}function $t(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Kt(e,t){e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument;var n=Ge(e);t=Pn[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Be("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Be("topFocus","focus",e),Be("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(J("cancel",!0)&&Be("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(J("close",!0)&&Be("topClose","close",e),n.topClose=!0):Zr.hasOwnProperty(o)&&Le(o,Zr[o],e),n[o]=!0)}}function Gt(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Ho&&(r=Vt(e)),r===Ho?"script"===e?(e=n.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function qt(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Xt(e,t,n,r){var o=$t(t,n);switch(t){case"iframe":case"object":Le("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in eo)eo.hasOwnProperty(i)&&Le(i,eo[i],e);i=n;break;case"source":Le("topError","error",e),i=n;break;case"img":case"image":case"link":Le("topError","error",e),Le("topLoad","load",e),i=n;break;case"form":Le("topReset","reset",e),Le("topSubmit","submit",e),i=n;break;case"details":Le("topToggle","toggle",e),i=n;break;case"input":de(e,n),i=pe(e,n),Le("topInvalid","invalid",e),Kt(r,"onChange");break;case"option":i=Nt(e,n);break;case"select":Rt(e,n),i=fn({},n,{value:void 0}),Le("topInvalid","invalid",e),Kt(r,"onChange");break;case"textarea":At(e,n),i=zt(e,n),Le("topInvalid","invalid",e),Kt(r,"onChange");break;default:i=n}Wt(t,i,Wo);var a,u=i;for(a in u)if(u.hasOwnProperty(a)){var l=u[a];"style"===a?Ht(e,l,Wo):"dangerouslySetInnerHTML"===a?null!=(l=l?l.__html:void 0)&&Uo(e,l):"children"===a?"string"==typeof l?("textarea"!==t||""!==l)&&Bt(e,l):"number"==typeof l&&Bt(e,""+l):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(On.hasOwnProperty(a)?null!=l&&Kt(r,a):null!=l&&fe(e,a,l,o))}switch(t){case"input":te(e),ve(e,n);break;case"textarea":te(e),Ut(e,n);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,t=n.value,null!=t?Dt(e,!!n.multiple,t,!1):null!=n.defaultValue&&Dt(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=pn)}}function Yt(e,t,n,r,o){var i=null;switch(t){case"input":n=pe(e,n),r=pe(e,r),i=[];break;case"option":n=Nt(e,n),r=Nt(e,r),i=[];break;case"select":n=fn({},n,{value:void 0}),r=fn({},r,{value:void 0}),i=[];break;case"textarea":n=zt(e,n),r=zt(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=pn)}Wt(t,r,Wo),t=e=void 0;var a=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var u=n[e];for(t in u)u.hasOwnProperty(t)&&(a||(a={}),a[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(On.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(u=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==u&&(null!=l||null!=u))if("style"===e)if(u){for(t in u)!u.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(a||(a={}),a[t]="");for(t in l)l.hasOwnProperty(t)&&u[t]!==l[t]&&(a||(a={}),a[t]=l[t])}else a||(i||(i=[]),i.push(e,a)),a=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,u=u?u.__html:void 0,null!=l&&u!==l&&(i=i||[]).push(e,""+l)):"children"===e?u===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(On.hasOwnProperty(e)?(null!=l&&Kt(o,e),i||u===l||(i=[])):(i=i||[]).push(e,l))}return a&&(i=i||[]).push("style",a),i}function Qt(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&ye(e,o),$t(n,r),r=$t(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?Ht(e,u,Wo):"dangerouslySetInnerHTML"===a?Uo(e,u):"children"===a?Bt(e,u):fe(e,a,u,r)}switch(n){case"input":he(e,o);break;case"textarea":Ft(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,n=o.value,null!=n?Dt(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Dt(e,!!o.multiple,o.defaultValue,!0):Dt(e,!!o.multiple,o.multiple?[]:"",!1))}}function Jt(e,t,n,r,o){switch(t){case"iframe":case"object":Le("topLoad","load",e);break;case"video":case"audio":for(var i in eo)eo.hasOwnProperty(i)&&Le(i,eo[i],e);break;case"source":Le("topError","error",e);break;case"img":case"image":case"link":Le("topError","error",e),Le("topLoad","load",e);break;case"form":Le("topReset","reset",e),Le("topSubmit","submit",e);break;case"details":Le("topToggle","toggle",e);break;case"input":de(e,n),Le("topInvalid","invalid",e),Kt(o,"onChange");break;case"select":Rt(e,n),Le("topInvalid","invalid",e),Kt(o,"onChange");break;case"textarea":At(e,n),Le("topInvalid","invalid",e),Kt(o,"onChange")}Wt(t,n,Wo),r=null;for(var a in n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):On.hasOwnProperty(a)&&null!=i&&Kt(o,a));switch(t){case"input":te(e),ve(e,n);break;case"textarea":te(e),Ut(e,n);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=pn)}return r}function Zt(e,t){return e.nodeValue!==t}function en(e){this._expirationTime=qo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function tn(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function nn(e,t,n){this._internalRoot=qo.createContainer(e,t,n)}function rn(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function on(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function an(e,t){if(t||(t=e?9===e.nodeType?e.documentElement:e.firstChild:null,t=!(!t||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new nn(e,!1,t)}function un(e,t,n,o,i){rn(n)||r("200");var a=n._reactRootContainer;if(a){if("function"==typeof i){var u=i;i=function(){var e=qo.getPublicRootInstance(a._internalRoot);u.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,i):a.render(t,i)}else{if(a=n._reactRootContainer=an(n,o),"function"==typeof i){var l=i;i=function(){var e=qo.getPublicRootInstance(a._internalRoot);l.call(e)}}qo.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,i):a.render(t,i)})}return qo.getPublicRootInstance(a._internalRoot)}function ln(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return rn(t)||r("200"),Mt(e,t,null,n)}/** @license React v16.3.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var cn=n(1),sn=n(90),fn=n(30),pn=n(32),dn=n(91),yn=n(92),hn=n(93),vn=n(31);cn||r("227");var bn={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,i,a,u,l,c){o.apply(bn,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,l){if(bn.invokeGuardedCallback.apply(this,arguments),bn.hasCaughtError()){var c=bn.clearCaughtError();bn._hasRethrowError||(bn._hasRethrowError=!0,bn._rethrowError=c)}},rethrowCaughtError:function(){return i.apply(bn,arguments)},hasCaughtError:function(){return bn._hasCaughtError},clearCaughtError:function(){if(bn._hasCaughtError){var e=bn._caughtError;return bn._caughtError=null,bn._hasCaughtError=!1,e}r("198")}},mn=null,gn={},_n=[],wn={},On={},Pn={},jn=Object.freeze({plugins:_n,eventNameDispatchConfigs:wn,registrationNameModules:On,registrationNameDependencies:Pn,possibleRegistrationNames:null,injectEventPluginOrder:l,injectEventPluginsByName:c}),Cn=null,kn=null,xn=null,En=null,Tn={injectEventPluginOrder:l,injectEventPluginsByName:c},Sn=Object.freeze({injection:Tn,getListener:v,runEventsInBatch:b,runExtractedEventsInBatch:m}),Mn=Math.random().toString(36).slice(2),In="__reactInternalInstance$"+Mn,Nn="__reactEventHandlers$"+Mn,Dn=Object.freeze({precacheFiberNode:function(e,t){t[In]=e},getClosestInstanceFromNode:g,getInstanceFromNode:function(e){return e=e[In],!e||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:_,getFiberCurrentPropsFromNode:w,updateFiberProps:function(e,t){e[Nn]=t}}),Rn=Object.freeze({accumulateTwoPhaseDispatches:T,accumulateTwoPhaseDispatchesSkipTarget:function(e){p(e,k)},accumulateEnterLeaveDispatches:S,accumulateDirectDispatches:function(e){p(e,E)}}),zn=null,An={_root:null,_startText:null,_fallbackText:null},Fn="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Un={type:null,target:null,currentTarget:pn.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};fn(D.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=pn.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=pn.thatReturnsTrue)},persist:function(){this.isPersistent=pn.thatReturnsTrue},isPersistent:pn.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<Fn.length;t++)this[Fn[t]]=null}}),D.Interface=Un,D.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return fn(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=fn({},r.Interface,e),n.extend=r.extend,A(n),n},A(D);var Vn=D.extend({data:null}),Ln=D.extend({data:null}),Bn=[9,13,27,32],Hn=sn.canUseDOM&&"CompositionEvent"in window,Wn=null;sn.canUseDOM&&"documentMode"in document&&(Wn=document.documentMode);var $n=sn.canUseDOM&&"TextEvent"in window&&!Wn,Kn=sn.canUseDOM&&(!Hn||Wn&&8<Wn&&11>=Wn),Gn=String.fromCharCode(32),qn={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Xn=!1,Yn=!1,Qn={eventTypes:qn,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(Hn)e:{switch(e){case"topCompositionStart":o=qn.compositionStart;break e;case"topCompositionEnd":o=qn.compositionEnd;break e;case"topCompositionUpdate":o=qn.compositionUpdate;break e}o=void 0}else Yn?F(e,n)&&(o=qn.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=qn.compositionStart);return o?(Kn&&(Yn||o!==qn.compositionStart?o===qn.compositionEnd&&Yn&&(i=I()):(An._root=r,An._startText=N(),Yn=!0)),o=Vn.getPooled(o,t,n,r),i?o.data=i:null!==(i=U(n))&&(o.data=i),T(o),i=o):i=null,(e=$n?V(e,n):L(e,n))?(t=Ln.getPooled(qn.beforeInput,t,n,r),t.data=e,T(t)):t=null,null===i?t:null===t?i:[i,t]}},Jn=null,Zn=null,er=null,tr={injectFiberControlledHostComponent:function(e){Jn=e}},nr=Object.freeze({injection:tr,enqueueStateRestore:H,needsStateRestore:W,restoreStateIfNeeded:$}),rr=!1,or={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},ir=cn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,ar="function"==typeof Symbol&&Symbol.for,ur=ar?Symbol.for("react.element"):60103,lr=ar?Symbol.for("react.call"):60104,cr=ar?Symbol.for("react.return"):60105,sr=ar?Symbol.for("react.portal"):60106,fr=ar?Symbol.for("react.fragment"):60107,pr=ar?Symbol.for("react.strict_mode"):60108,dr=ar?Symbol.for("react.provider"):60109,yr=ar?Symbol.for("react.context"):60110,hr=ar?Symbol.for("react.async_mode"):60111,vr=ar?Symbol.for("react.forward_ref"):60112,br="function"==typeof Symbol&&Symbol.iterator,mr=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,gr={},_r={},wr={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){wr[e]=new ce(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];wr[t]=new ce(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){wr[e]=new ce(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){wr[e]=new ce(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){wr[e]=new ce(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){wr[e]=new ce(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){wr[e]=new ce(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){wr[e]=new ce(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){wr[e]=new ce(e,5,!1,e.toLowerCase(),null)});var Or=/[\-\:]([a-z])/g;"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Or,se);wr[t]=new ce(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Or,se);wr[t]=new ce(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Or,se);wr[t]=new ce(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),wr.tabIndex=new ce("tabIndex",1,!1,"tabindex",null);var Pr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}},jr=null,Cr=null,kr=!1;sn.canUseDOM&&(kr=J("input")&&(!document.documentMode||9<document.documentMode));var xr={eventTypes:Pr,_isInputEventSupported:kr,extractEvents:function(e,t,n,r){var o=t?_(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Oe:Y(o)?kr?i=Ee:(i=ke,a=Ce):!(u=o.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(i=xe),i&&(i=i(e,t)))return ge(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&be(o,"number",o.value)}},Er=D.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},Sr=Er.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Se,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Mr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Ir={eventTypes:Mr,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?g(t):null):e=null,e===t)return null;var i=null==e?o:_(e);o=null==t?o:_(t);var a=Sr.getPooled(Mr.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,n=Sr.getPooled(Mr.mouseEnter,t,n,r),n.type="mouseenter",n.target=o,n.relatedTarget=i,S(a,n,e,t),[a,n]}},Nr=D.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Dr=D.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Rr=Er.extend({relatedTarget:null}),zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ar={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Fr=Er.extend({key:function(e){if(e.key){var t=zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?(e=Ae(e),13===e?"Enter":String.fromCharCode(e)):"keydown"===e.type||"keyup"===e.type?Ar[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Se,charCode:function(e){return"keypress"===e.type?Ae(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ae(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ur=Sr.extend({dataTransfer:null}),Vr=Er.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Se}),Lr=D.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),Br=Sr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Hr={},Wr={};"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){Fe(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){Fe(e,!1)});var $r={eventTypes:Hr,isInteractiveTopLevelEventType:function(e){return void 0!==(e=Wr[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=Wr[e];if(!o)return null;switch(e){case"topKeyPress":if(0===Ae(n))return null;case"topKeyDown":case"topKeyUp":e=Fr;break;case"topBlur":case"topFocus":e=Rr;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Sr;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=Ur;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=Vr;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Nr;break;case"topTransitionEnd":e=Lr;break;case"topScroll":e=Er;break;case"topWheel":e=Br;break;case"topCopy":case"topCut":case"topPaste":e=Dr;break;default:e=D}return t=e.getPooled(o,t,n,r),T(t),t}},Kr=$r.isInteractiveTopLevelEventType,Gr=[],qr=!0,Xr=Object.freeze({get _enabled(){return qr},setEnabled:Ve,isEnabled:function(){return qr},trapBubbledEvent:Le,trapCapturedEvent:Be,dispatchEvent:We}),Yr={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},Qr={},Jr={};sn.canUseDOM&&(Jr=document.createElement("div").style,"AnimationEvent"in window||(delete Yr.animationend.animation,delete Yr.animationiteration.animation,delete Yr.animationstart.animation),"TransitionEvent"in window||delete Yr.transitionend.transition);var Zr={topAnimationEnd:Ke("animationend"),topAnimationIteration:Ke("animationiteration"),topAnimationStart:Ke("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Ke("transitionend"),topWheel:"wheel"},eo={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},to={},no=0,ro="_reactListenersID"+(""+Math.random()).slice(2),oo=sn.canUseDOM&&"documentMode"in document&&11>=document.documentMode,io={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},ao=null,uo=null,lo=null,co=!1,so={eventTypes:io,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Ge(i),o=Pn.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?_(t):window,e){case"topFocus":(Y(i)||"true"===i.contentEditable)&&(ao=i,uo=t,lo=null);break;case"topBlur":lo=uo=ao=null;break;case"topMouseDown":co=!0;break;case"topContextMenu":case"topMouseUp":return co=!1,Qe(n,r);case"topSelectionChange":if(oo)break;case"topKeyDown":case"topKeyUp":return Qe(n,r)}return null}};Tn.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),Cn=Dn.getFiberCurrentPropsFromNode,kn=Dn.getInstanceFromNode,xn=Dn.getNodeFromInstance,Tn.injectEventPluginsByName({SimpleEventPlugin:$r,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:xr,SelectEventPlugin:so,BeforeInputEventPlugin:Qn});var fo=null,po=null;new Set;var yo=void 0,ho=void 0,vo=Array.isArray,bo=mt(!0),mo=mt(!1),go={},_o=Object.freeze({default:St}),wo=_o&&St||_o,Oo=wo.default?wo.default:wo,Po="object"==typeof performance&&"function"==typeof performance.now,jo=void 0;jo=Po?function(){return performance.now()}:function(){return Date.now()};var Co=void 0,ko=void 0;if(sn.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var xo=null,Eo=!1,To=-1,So=!1,Mo=0,Io=33,No=33,Do=void 0;Do=Po?{didTimeout:!1,timeRemaining:function(){var e=Mo-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Mo-Date.now();return 0<e?e:0}};var Ro="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Ro){if(Eo=!1,e=jo(),0>=Mo-e){if(!(-1!==To&&To<=e))return void(So||(So=!0,requestAnimationFrame(zo)));Do.didTimeout=!0}else Do.didTimeout=!1;To=-1,e=xo,xo=null,null!==e&&e(Do)}},!1);var zo=function(e){So=!1;var t=e-Mo+No;t<No&&Io<No?(8>t&&(t=8),No=t<Io?Io:t):Io=t,Mo=e+No,Eo||(Eo=!0,window.postMessage(Ro,"*"))};Co=function(e,t){return xo=e,null!=t&&"number"==typeof t.timeout&&(To=jo()+t.timeout),So||(So=!0,requestAnimationFrame(zo)),0},ko=function(){xo=null,Eo=!1,To=-1}}else Co=window.requestIdleCallback,ko=window.cancelIdleCallback;else Co=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},ko=function(e){clearTimeout(e)};var Ao={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},Fo=void 0,Uo=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Ao.svg||"innerHTML"in e)e.innerHTML=t;else{for(Fo=Fo||document.createElement("div"),Fo.innerHTML="<svg>"+t+"</svg>",t=Fo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}),Vo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Lo=["Webkit","ms","Moz","O"];Object.keys(Vo).forEach(function(e){Lo.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Vo[t]=Vo[e]})});var Bo=fn({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),Ho=Ao.html,Wo=pn.thatReturns(""),$o=Object.freeze({createElement:Gt,createTextNode:qt,setInitialProperties:Xt,diffProperties:Yt,updateProperties:Qt,diffHydratedProperties:Jt,diffHydratedText:Zt,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(he(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var i=w(o);i||r("90"),ne(o),he(o,i)}}}break;case"textarea":Ft(e,n);break;case"select":null!=(t=n.value)&&Dt(e,!!n.multiple,t,!1)}}});tr.injectFiberControlledHostComponent($o);var Ko=null,Go=null;en.prototype.render=function(e){this._defer||r("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,o=new tn;return qo.updateContainerAtExpirationTime(e,t,null,n,o._onCommit),o},en.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},en.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||r("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,i=t;i!==this;)o=i,i=i._next;null===o&&r("251"),o._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,qo.flushRoot(e,n),t=this._next,this._next=null,t=e.firstBatch=t,null!==t&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},en.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},tn.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},tn.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&r("191",n),n()}}},nn.prototype.render=function(e,t){var n=this._internalRoot,r=new tn;return t=void 0===t?null:t,null!==t&&r.then(t),qo.updateContainer(e,n,null,r._onCommit),r},nn.prototype.unmount=function(e){var t=this._internalRoot,n=new tn;return e=void 0===e?null:e,null!==e&&n.then(e),qo.updateContainer(null,t,null,n._onCommit),n},nn.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new tn;return n=void 0===n?null:n,null!==n&&o.then(n),qo.updateContainer(t,r,e,o._onCommit),o},nn.prototype.createBatch=function(){var e=new en(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var qo=Oo({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Lt(null,"");break;default:t=8===t?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=Lt(e,t)}return e},getChildHostContext:function(e,t){return Lt(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){Ko=qr;var e=dn();if(Ye(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(u=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(a=i),f===o&&++c===n&&(u=i),null!==(p=s.nextSibling))break;s=f,f=s.parentNode}s=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;Go={focusedElem:e,selectionRange:t},Ve(!1)},resetAfterCommit:function(){var e=Go,t=dn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&hn(document.documentElement,n)){if(Ye(n))if(t=r.start,e=r.end,void 0===e&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[M()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Xe(n,e);var i=Xe(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}Go=null,Ve(Ko),Ko=null},createInstance:function(e,t,n,r,o){return e=Gt(e,t,n,r),e[In]=o,e[Nn]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return Xt(e,t,n,r),on(t,n)},prepareUpdate:function(e,t,n,r,o){return Yt(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return e=qt(e,t),e[In]=r,e},now:jo,mutation:{commitMount:function(e,t,n){on(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[Nn]=o,Qt(e,t,n,r,o)},resetTextContent:function(e){Bt(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[In]=i,e[Nn]=n,Jt(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[In]=n,Zt(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Co,cancelDeferredCallback:ko}),Xo=qo;K=Xo.batchedUpdates,G=Xo.interactiveUpdates,q=Xo.flushInteractiveUpdates;var Yo={createPortal:ln,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return qo.findHostInstance(t);"function"==typeof e.render?r("188"):r("213",Object.keys(e))},hydrate:function(e,t,n){return un(null,e,t,!0,n)},render:function(e,t,n){return un(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||void 0===e._reactInternalFiber)&&r("38"),un(e,t,n,!1,o)},unmountComponentAtNode:function(e){return rn(e)||r("40"),!!e._reactRootContainer&&(qo.unbatchedUpdates(function(){un(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ln.apply(void 0,arguments)},unstable_batchedUpdates:qo.batchedUpdates,unstable_deferredUpdates:qo.deferredUpdates,flushSync:qo.flushSync,unstable_flushControlled:qo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Sn,EventPluginRegistry:jn,EventPropagators:Rn,ReactControlledComponent:nr,ReactDOMComponentTree:Dn,ReactDOMEventListener:Xr},unstable_createRoot:function(e,t){return new nn(e,!0,null!=t&&!0===t.hydrate)}};qo.injectIntoDevTools({findFiberByHostInstance:g,bundleType:0,version:"16.3.0",rendererPackageName:"react-dom"});var Qo=Object.freeze({default:Yo}),Jo=Qo&&Yo||Qo;e.exports=Jo.default?Jo.default:Jo},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";function r(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}e.exports=r},function(e,t,n){"use strict";function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var a=0;a<n.length;a++)if(!i.call(t,n[a])||!r(e[n[a]],t[n[a]]))return!1;return!0}var i=Object.prototype.hasOwnProperty;e.exports=o},function(e,t,n){"use strict";function r(e,t){return!(!e||!t)&&(e===t||!o(e)&&(o(t)?r(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}var o=n(94);e.exports=r},function(e,t,n){"use strict";function r(e){return o(e)&&3==e.nodeType}var o=n(95);e.exports=r},function(e,t,n){"use strict";function r(e){var t=e?e.ownerDocument||e:document,n=t.defaultView||window;return!(!e||!("function"==typeof n.Node?e instanceof n.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}e.exports=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(97);Object.defineProperty(t,"DiagramsEditor",{enumerable:!0,get:function(){return r(o).default}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(1),f=r(s),p=n(3),d=n(99),y=r(d),h=n(126),v=r(h),b=n(127),m=r(b),g=n(128),_=r(g),w=n(5),O=n(6),P=n(8),j=n(129),C=r(j),k=(u=(0,P.localizable)({diagramsEditor:"Diagrams editor"}))(l=(0,p.observer)(l=function(e){function t(){o(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._editorModel=new y.default,e}return a(t,e),c(t,[{key:"_getDiagram",value:function(){return this._editorModel.diagram?this._editorModel.diagram.root instanceof w.DVCM?f.default.createElement(w.DVCMView,{component:this._editorModel.diagram.root}):this._editorModel.diagram.root instanceof O.UseCases?f.default.createElement(O.UseCasesView,{component:this._editorModel.diagram.root}):null:null}},{key:"_getContent",value:function(){return this._editorModel.pageDiagram?f.default.createElement("div",{className:"diagram"},this._getDiagram()):this._editorModel.pageNewDiagram?f.default.createElement("div",{className:"buttons"},f.default.createElement(m.default,{model:this._editorModel})):this._editorModel.pageNewUseCases?f.default.createElement("div",{className:"buttons"},f.default.createElement(_.default,{model:this._editorModel})):f.default.createElement(C.default,null)}},{key:"render",value:function(){return document.title=this.locale.diagramsEditor,f.default.createElement("div",{className:"diagrams-editor"},f.default.createElement("div",{className:"controlls"},f.default.createElement(v.default,{model:this._editorModel})),f.default.createElement("div",{className:"content"},this._getContent()))}}]),t}(f.default.Component))||l)||l;t.default=k},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l,c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),f=n(5),p=n(6),d=n(107),y=function(e){return e&&e.__esModule?e:{default:e}}(d),h=n(124),v={DIAGRAM:"/diagram",NEW_DIAGRAM:"/new",NEW_USE_CASES:"/new/use-cases"},b=(a=function(){function e(){o(this,e),r(this,"diagram",u,this),r(this,"_navigation",l,this),this._createStorage()}return c(e,[{key:"_onStorageLoad",value:function(e){this.diagram=e.model,this._navigateToDiagram()}},{key:"_onStorageSaved",value:function(){this._navigateToDiagram()}},{key:"_navigateToDiagram",value:function(){this._navigation=v.DIAGRAM}},{key:"_createStorage",value:function(){this._storage=new y.default}},{key:"import",value:function(){this._storage.onLoad=this._onStorageLoad.bind(this),this._storage.load()}},{key:"export",value:function(){this.diagram&&(this._storage.onSave=this._onStorageSaved.bind(this),this._storage.store(this.diagram))}},{key:"_generateUseCasesFromDvcmModel",value:function(e){var t=new h.UseCasesGenerator;this.diagram=t.generate(e.model),this._navigateToDiagram()}},{key:"_generateUseCasesFromDvcmFile",value:function(){this._storage.onLoad=this._generateUseCasesFromDvcmModel.bind(this),this._storage.load()}},{key:"navigateToNewDiagram",value:function(){this._navigation=v.NEW_DIAGRAM}},{key:"navigateToNewDvcm",value:function(){var e=new f.DVCM;this.diagram=e.model,this._navigateToDiagram()}},{key:"navigateToNewUseCases",value:function(){var e=new p.UseCases;this.diagram=e.model,this._navigateToDiagram()}},{key:"navigateToNewUeCases",value:function(){this._navigation=v.NEW_USE_CASES}},{key:"navigateToGenerateUseCases",value:function(){this._generateUseCasesFromDvcmFile()}},{key:"pageDiagram",get:function(){return this._navigation==v.DIAGRAM}},{key:"pageNewDiagram",get:function(){return this._navigation==v.NEW_DIAGRAM}},{key:"pageNewUseCases",get:function(){return this._navigation==v.NEW_USE_CASES}},{key:"isModelInContext",get:function(){return this.pageDiagram&&this.diagram}}]),e}(),u=i(a.prototype,"diagram",[s.observable],{enumerable:!0,initializer:null}),l=i(a.prototype,"_navigation",[s.observable],{enumerable:!0,initializer:null}),i(a.prototype,"pageDiagram",[s.computed],Object.getOwnPropertyDescriptor(a.prototype,"pageDiagram"),a.prototype),i(a.prototype,"pageNewDiagram",[s.computed],Object.getOwnPropertyDescriptor(a.prototype,"pageNewDiagram"),a.prototype),i(a.prototype,"pageNewUseCases",[s.computed],Object.getOwnPropertyDescriptor(a.prototype,"pageNewUseCases"),a.prototype),i(a.prototype,"isModelInContext",[s.computed],Object.getOwnPropertyDescriptor(a.prototype,"isModelInContext"),a.prototype),i(a.prototype,"_onStorageLoad",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"_onStorageLoad"),a.prototype),i(a.prototype,"_onStorageSaved",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"_onStorageSaved"),a.prototype),i(a.prototype,"import",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"import"),a.prototype),i(a.prototype,"export",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"export"),a.prototype),i(a.prototype,"_generateUseCasesFromDvcmModel",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"_generateUseCasesFromDvcmModel"),a.prototype),i(a.prototype,"_generateUseCasesFromDvcmFile",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"_generateUseCasesFromDvcmFile"),a.prototype),i(a.prototype,"navigateToNewDiagram",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"navigateToNewDiagram"),a.prototype),i(a.prototype,"navigateToNewDvcm",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"navigateToNewDvcm"),a.prototype),i(a.prototype,"navigateToNewUseCases",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"navigateToNewUseCases"),a.prototype),i(a.prototype,"navigateToNewUeCases",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"navigateToNewUeCases"),a.prototype),i(a.prototype,"navigateToGenerateUseCases",[s.action],Object.getOwnPropertyDescriptor(a.prototype,"navigateToGenerateUseCases"),a.prototype),a);t.default=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),s=r(c),f=n(3),p=n(36),d=r(p),y=(0,f.observer)(u=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),l(t,[{key:"getBoundingPoints",value:function(){var e=this.props.component,t=e.positionInRoot,n=e.width,r=e.height;if(!t||!n||!r)return[];return[{x:t.x-1,y:t.y-1},{x:t.x+n+1,y:t.y-1},{x:t.x+n+1,y:t.y+r+1},{x:t.x-1,y:t.y+r+1}]}},{key:"render",value:function(){var e=this.getBoundingPoints();if(e.length<2)return null;for(var t=[],n=e[e.length-1],r=0;r<e.length;r++){var o=e[r],i="selection_"+r;t.push(s.default.createElement(d.default,{p1:n,p2:o,key:i})),n=o}return t}}]),t}(s.default.Component))||u;t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=(n(2),n(7)),c=(r(l),n(41)),s=r(c),f=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),u(t,[{key:"getCurrentPosition",value:function(){return this.targetNode?{y:this.targetNode.positionInRoot.y+this.targetNode.startPosition.y+this.point.y,x:this.targetNode.positionInRoot.x+this.targetNode.startPosition.x+this.point.x}:{x:this.point.x,y:this.point.y}}},{key:"setCurrentPosition",value:function(e,t){if(this.targetNode){var n=e-this.targetNode.startPosition.x-this.targetNode.positionInRoot.x,r=t-this.targetNode.startPosition.y-this.targetNode.positionInRoot.y,o=this.targetNode.getEdgePointPosition({x:n,y:r});return this.point.x=o.x,void(this.point.y=o.y)}this.point.x=e,this.point.y=t}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t){r(this,e),this.model=t}return o(e,[{key:"handleMouseDown",value:function(e){0==e.button&&(this.model.select(),e.preventDefault(),e.stopPropagation())}}]),e}();t.default=i},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),u=r(a),l=n(104),c=r(l),s=function e(){i(this,e),this.createResizer=function(e){var t=e.prototype.getContent;if(void 0==e.prototype.getResizeProperties){var n=this;e.prototype.getResizeProperties=function(){return n.properties}}e.prototype.getContent=function(){var e=t.apply(this,arguments),n=[].concat(o(e)),r=this.getResizeProperties();if(r.right){var i=new c.default(this.component,r);n.push(u.default.createElement("div",{className:"resize-point-right",key:"resize-point-right",onMouseDown:i.handleMouseDown.bind(i)}))}if(r.bottom){var a=new c.default(this.component,r);n.push(u.default.createElement("div",{className:"resize-point-bottom",key:"resize-point-bottom",onMouseDown:a.handleMouseDown.bind(a)}))}if(r.rightBottom){var l=new c.default(this.component,r);n.push(u.default.createElement("div",{className:"resize-point-right-bottom",key:"resize-point-right-bottom",onMouseDown:l.handleMouseDown.bind(l)}))}return n}},this.properties={right:!1,bottom:!1,rightBottom:!0}},f=function(e){var t=new s,n=t.createResizer.bind(t);return 0==arguments.length?n:"function"==typeof e?void t.createResizer.apply(t,arguments):(t.properties=e,n)};t.default=f},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(2),l=(i=function(){function e(t,n){r(this,e),this.previousMouseY=0,this.previousMouseX=0,this.grid=10,this.model=t,this._properties=n,this.mouseUpHandler=(0,u.action)(this.handleMouseUp.bind(this)),this.mouseMoveHandler=(0,u.action)(this.handleMouseMove.bind(this))}return a(e,[{key:"width",get:function(){return this._properties.right||this._properties.rightBottom}},{key:"height",get:function(){return this._properties.bottom||this._properties.rightBottom}},{key:"minWidth",get:function(){return this._properties.minWidth?this._properties.minWidth:20}},{key:"minHeight",get:function(){return this._properties.minHeight?this._properties.minHeight:20}}]),a(e,[{key:"handleMouseDown",value:function(e){0==e.button&&(this.previousMouseY=e.clientY,this.previousMouseX=e.clientX,document.addEventListener("mousemove",this.mouseMoveHandler),document.addEventListener("mouseup",this.mouseUpHandler),e.preventDefault(),e.stopPropagation())}},{key:"handleMouseUp",value:function(e){document.removeEventListener("mousemove",this.mouseMoveHandler),document.removeEventListener("mouseup",this.mouseUpHandler),e.preventDefault(),e.stopPropagation()}},{key:"applyGrid",value:function(e){return Math.round(e/this.grid)*this.grid}},{key:"handleMouseMove",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.model,n=e.clientX-this.previousMouseX,r=e.clientY-this.previousMouseY;n=this.applyGrid(n),r=this.applyGrid(r);var o=t.height+r,i=t.width+n,a=t.height,u=t.width;this.height&&this.minHeight<=o&&(t.height=o),this.width&&this.minWidth<=i&&(t.width=i),a!=t.height&&(this.previousMouseY=this.previousMouseY+r),u!=t.width&&(this.previousMouseX=this.previousMouseX+n)}}]),e}(),o(i.prototype,"width",[u.computed],Object.getOwnPropertyDescriptor(i.prototype,"width"),i.prototype),o(i.prototype,"height",[u.computed],Object.getOwnPropertyDescriptor(i.prototype,"height"),i.prototype),o(i.prototype,"minWidth",[u.computed],Object.getOwnPropertyDescriptor(i.prototype,"minWidth"),i.prototype),o(i.prototype,"minHeight",[u.computed],Object.getOwnPropertyDescriptor(i.prototype,"minHeight"),i.prototype),i);t.default=l},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},c=n(1),s=(function(e){e&&e.__esModule}(c),n(3)),f=n(0),p=(0,f.select)(a=(0,s.observer)(a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"initialize",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this),this.component=this.props.component}},{key:"getStyleClass",value:function(){var e=l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"getStyleClass",this).call(this)+" transaction-border";return this.props.component.selected&&(e+=" selected"),e}}]),t}(f.LineView))||a)||a;t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){var t={defaultLocale:e,localize:function(t){var n=(this.defaultLocale,t.prototype.render);t.prototype.render=function(){if(this.locale)return n.apply(this,arguments);var t=this.props.locale;if(!t)return this.locale=e,n.apply(this,arguments);this.locale={};var r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value;this.locale[l]=null===t[l]||void 0===t[l]?e[l]:t[l]}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n.apply(this,arguments)}}},n=t.localize.bind(t);return 0==arguments.length?n:"function"==typeof properties?void n.apply(void 0,arguments):n};t.default=r},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(4),c=n(109),s=n(115),f=function(e){return e&&e.__esModule?e:{default:e}}(s),p=(0,c.localStorage)(a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),u(t,[{key:"createConverter",value:function(){return new f.default}}]),t}(l.Storage))||a;t.default=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(73),a=function(e){return e&&e.__esModule?e:{default:e}}(i),u=function(){function e(){r(this,e),this.converter=this.createConverter()}return o(e,[{key:"createConverter",value:function(){return new a.default}},{key:"_convertStoreObjectToString",value:function(e){return JSON.stringify(e,null,"\t")}},{key:"_convertModelToStoreObject",value:function(e){return this.converter.convertToObject(e)}},{key:"saveToStore",value:function(e,t){console.warn("Abstract method")}},{key:"_convertStoreObjectToModel",value:function(e){return this.converter.convertToModel(e)}},{key:"loadModel",value:function(e){var t=JSON.parse(e.responseText),n=this._convertStoreObjectToModel(t);this.onLoad&&this.onLoad({model:n,response:e})}},{key:"store",value:function(e){var t=this._convertModelToStoreObject(e),n=this._convertStoreObjectToString(t);this.saveToStore(n,t.name)}},{key:"load",value:function(){console.warn("Abstract method")}}]),e}();t.default=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(110);Object.defineProperty(t,"localStorage",{enumerable:!0,get:function(){return r(o).default}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(111),o=n(114),i=function(e){e.prototype.saveToStore=function(e,t){var n=new Blob([e],{type:"application/json"});(0,r.saveAs)(n,t+".json"),this.onsave&&setTimeout(this.onSave,500,{content:e})},e.prototype.load=function(){var e=this.loadModel.bind(this);o({multiple:!1,accept:".json"}).then(function(t){if(t&&!(t.length<1)){var n=t[0],r=new FileReader;r.onload=function(){var t={};t.responseText=r.result,e(t)},r.readAsText(n,"application/json")}})}};t.default=i},function(e,t,n){var r,o=o||function(e){"use strict";if(!(void 0===e||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},a=/constructor/i.test(e.HTMLElement)||e.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent),l=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},c=function(e){var t=function(){"string"==typeof e?n().revokeObjectURL(e):e.remove()};setTimeout(t,4e4)},s=function(e,t,n){t=[].concat(t);for(var r=t.length;r--;){var o=e["on"+t[r]];if("function"==typeof o)try{o.call(e,n||e)}catch(e){l(e)}}},f=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob([String.fromCharCode(65279),e],{type:e.type}):e},p=function(t,l,p){p||(t=f(t));var d,y=this,h=t.type,v="application/octet-stream"===h,b=function(){s(y,"writestart progress write writeend".split(" "))};if(y.readyState=y.INIT,o)return d=n().createObjectURL(t),void setTimeout(function(){r.href=d,r.download=l,i(r),b(),c(d),y.readyState=y.DONE});!function(){if((u||v&&a)&&e.FileReader){var r=new FileReader;return r.onloadend=function(){var t=u?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");e.open(t,"_blank")||(e.location.href=t),t=void 0,y.readyState=y.DONE,b()},r.readAsDataURL(t),void(y.readyState=y.INIT)}if(d||(d=n().createObjectURL(t)),v)e.location.href=d;else{e.open(d,"_blank")||(e.location.href=d)}y.readyState=y.DONE,b(),c(d)}()},d=p.prototype,y=function(e,t,n){return new p(e,t||e.name||"download",n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,n){return t=t||e.name||"download",n||(e=f(e)),navigator.msSaveOrOpenBlob(e,t)}:(d.abort=function(){},d.readyState=d.INIT=0,d.WRITING=1,d.DONE=2,d.error=d.onwritestart=d.onprogress=d.onwrite=d.onabort=d.onerror=d.onwriteend=null,y)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);void 0!==e&&e.exports?e.exports.saveAs=o:null!==n(112)&&null!==n(113)&&void 0!==(r=function(){return o}.call(t,n,t,e))&&(e.exports=r)},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){(function(t){e.exports=t}).call(t,{})},function(e,t,n){"use strict";var r,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(i){var a=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=document.createElement("input");return"object"===o(t[0])&&(!0===t[0].multiple&&r.setAttribute("multiple",""),void 0!==t[0].accept&&r.setAttribute("accept",t[0].accept)),r.setAttribute("type","file"),r.style.display="none",r.setAttribute("id","hidden-file"),document.body.appendChild(r),new Promise(function(e){r.addEventListener("change",function(){e(r.files);var n=t[t.length-1];"function"==typeof n&&n(r.files),document.body.removeChild(r)});var n=document.createEvent("MouseEvents");n.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,0,null),r.dispatchEvent(n)})};void 0!==(r=function(){return a}.call(t,n,t,e))&&(e.exports=r)}()},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(4),c=n(116),s=n(120),f=n(6),p=n(5),d=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"convertToModel",value:function(e){return this.getConverterByClassId(e.classId).convertToModel(e)}},{key:"convertToObject",value:function(e){return this.getConverterByObject(e).convertToObject(e)}},{key:"registerClasses",value:function(){u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"registerClasses",this).call(this),this.registerClass({classInstance:p.DVCMModel,converter:new s.DVCMModelConverter}),this.registerClass({classInstance:f.UseCasesModel,converter:new c.UseCasesModelConverter})}}]),t}(l.ModelConverter);t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(74);Object.defineProperty(t,"ActorConverter",{enumerable:!0,get:function(){return r(o).default}});var i=n(75);Object.defineProperty(t,"AssociationConverter",{enumerable:!0,get:function(){return r(i).default}});var a=n(76);Object.defineProperty(t,"SystemConverter",{enumerable:!0,get:function(){return r(a).default}});var u=n(77);Object.defineProperty(t,"UseCaseConverter",{enumerable:!0,get:function(){return r(u).default}});var l=n(78);Object.defineProperty(t,"UseCasesConverter",{enumerable:!0,get:function(){return r(l).default}});var c=n(79);Object.defineProperty(t,"UseCasesModelConverter",{enumerable:!0,get:function(){return r(c).default}});var s=n(119);Object.defineProperty(t,"UseCasesStorage",{enumerable:!0,get:function(){return r(s).default}})},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(6),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.Inclusion"}},{key:"createModelInstance",value:function(){return new u.Inclusion}}]),t}(l.EdgeConverter);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(6),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"use-cases.Extension"}},{key:"createModelInstance",value:function(){return new u.Extension}}]),t}(l.EdgeConverter);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(4),l=n(79),c=function(e){return e&&e.__esModule?e:{default:e}}(l),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"createConverter",value:function(){return new c.default}}]),t}(u.Storage);t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(80);Object.defineProperty(t,"StartEventConverter",{enumerable:!0,get:function(){return r(o).default}});var i=n(81);Object.defineProperty(t,"EndEventConverter",{enumerable:!0,get:function(){return r(i).default}});var a=n(19);Object.defineProperty(t,"EventConverter",{enumerable:!0,get:function(){return r(a).default}});var u=n(82);Object.defineProperty(t,"PoolConverter",{enumerable:!0,get:function(){return r(u).default}});var l=n(83);Object.defineProperty(t,"DVCMConverter",{enumerable:!0,get:function(){return r(l).default}});var c=n(84);Object.defineProperty(t,"ActivityConverter",{enumerable:!0,get:function(){return r(c).default}});var s=n(85);Object.defineProperty(t,"SequenceFlowConverter",{enumerable:!0,get:function(){return r(s).default}});var f=n(86);Object.defineProperty(t,"DVCMModelConverter",{enumerable:!0,get:function(){return r(f).default}});var p=n(123);Object.defineProperty(t,"DVCMStorage",{enumerable:!0,get:function(){return r(p).default}})},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},l=n(5),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.Transaction"}},{key:"createModelInstance",value:function(){return new l.Transaction}},{key:"convertToModel",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToModel",this).apply(this,arguments);return n.name=e.name,n}},{key:"convertToObject",value:function(e){var n=u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"convertToObject",this).apply(this,arguments);return n.name=e.name,n}}]),t}(c.ComponentConverter);t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),l=n(4),c=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"getClassId",value:function(){return"dvcm.InTransaction"}},{key:"createModelInstance",value:function(){return new u.InTransaction}}]),t}(l.RelationConverter);t.default=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(86),l=function(e){return e&&e.__esModule?e:{default:e}}(u),c=n(4),s=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),a(t,[{key:"createConverter",value:function(){return new l.default}}]),t}(c.Storage);t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(125);Object.defineProperty(t,"UseCasesGenerator",{enumerable:!0,get:function(){return r(o).default}})},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=n(6),u=function(){function e(){r(this,e),this._addCycledFlows=function(e,t,n,r,o){if(n.target==r)return!0;if(t.includes(n))return!1;if(e.includes(n))return!0;var i=o.filter(function(e){return e.source==n.target});if(0==i.length)return!1;e.push(n),t.push(n);var a=!1,u=!0,l=!1,c=void 0;try{for(var s,f=i[Symbol.iterator]();!(u=(s=f.next()).done);u=!0){var p=s.value;this._addCycledFlows(e,t,p,r,o)&&(a=!0)}}catch(e){l=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(l)throw c}}return a||e.splice(e.indexOf(n),1),t.splice(t.indexOf(n),1),a}}return o(e,[{key:"generate",value:function(e){return e instanceof i.DVCMModel?this.generateFromDVCM(e):null}},{key:"generateFromDVCM",value:function(e){var t=e.sequenceFlows,n=e.transactions,r=[],o=[],i=!0,a=!1,u=void 0;try{for(var l,c=n[Symbol.iterator]();!(i=(l=c.next()).done);i=!0){var s=l.value,f=s.processes.length>0?s.processes[0]:null;if(null!=f){var p=this._getTransactionSequenceFlows(s,t),d=this._getUseCasesForProcess(f,p);this._addNewUsecases(o,r,d,s)}}}catch(e){a=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}var y=e.activities.filter(function(e){return e.isFunction});return this._addGeneralUseCases(o,r,y),this._addUnusedCases(r,y),this._createUseCaseDiagramModel(e.name,r,o)}},{key:"_getTransactionSequenceFlows",value:function(e,t){var n=e.activities;return t.filter(function(e){return n.includes(e.source)&&n.includes(e.target)})}},{key:"_getUseCasesForProcess",value:function(e,t){var n=t.filter(function(t){return t.source==e}),r=[],o=!0,i=!1,a=void 0;try{for(var u,l=n[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;this._addCycledFlows(r,[],c,e,t)}}catch(e){i=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(i)throw a}}var s=[],f=!0,p=!1,d=void 0;try{for(var y,h=r[Symbol.iterator]();!(f=(y=h.next()).done);f=!0){var v=y.value,b=this._createUseCase(v);s.push(b)}}catch(e){p=!0,d=e}finally{try{!f&&h.return&&h.return()}finally{if(p)throw d}}return s}},{key:"_createUseCaseFromFlow",value:function(e){return{createdFromFlow:e,useCase:new a.UseCase(e.target.name),usedBy:[e.target.parent]}}},{key:"_createUseCaseFromTransaction",value:function(e){return{createdFromFlow:{},useCase:new a.UseCase(e.name),usedBy:[]}}},{key:"_createUseCaseFromActivity",value:function(e){return{createdFromFlow:{},useCase:new a.UseCase(e.name),usedBy:[e.parent]}}},{key:"_createUseCase",value:function(e){return e instanceof i.SequenceFlow?this._createUseCaseFromFlow(e):e instanceof i.Transaction?this._createUseCaseFromTransaction(e):{createdFromFlow:{},useCase:new a.UseCase(e.name),usedBy:[e.parent]}}},{key:"_createIncludeEdge",value:function(e,t){var n=new a.Inclusion;return n.source=e.useCase,n.target=t.useCase,n.sourcePoint.y=Math.floor(e.useCase.height/2),n.sourcePoint.x=0,n.targetPoint.x=t.useCase.width,n.targetPoint.y=Math.floor(t.useCase.height/2),n}},{key:"_createExtendEdge",value:function(e,t){var n=new a.Extension;return n.source=t.useCase,n.target=e.useCase,n.sourcePoint.y=Math.floor(t.useCase.height/2),n.sourcePoint.x=t.useCase.width,n.targetPoint.x=0,n.targetPoint.y=Math.floor(e.useCase.height/2),n}},{key:"_createGeneraluseCase",value:function(e){return this._createUseCaseFromActivity(e)}},{key:"_createUnusedUsecase",value:function(e){var t=this._createUseCaseFromActivity(e);return t.useCase.name+="Not in transaction",t}},{key:"_addNewUsecases",value:function(e,t,n,r){if(!(n.length<1)){var o=this._createUseCase(r);if(t.push(o),1==n.length){var i=n[0];return o.createdFromFlow=i.createdFromFlow,void(o.usedBy=i.usedBy)}var a=!0,u=!1,l=void 0;try{for(var c,s=n[Symbol.iterator]();!(a=(c=s.next()).done);a=!0){var f=c.value;t.push(f);var p=this._createIncludeEdge(o,f);e.push(p)}}catch(e){u=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(u)throw l}}}}},{key:"_addGeneralUseCases",value:function(e,t,n){var r=this,o=!0,i=!1,a=void 0;try{for(var u,l=n[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;(function(n){var o=t.filter(function(e){return e.createdFromFlow.target==n});if(o.length<2)return"continue";var i=r._createGeneraluseCase(n);i.usedBy=[],t.push(i);var a=!0,u=!1,l=void 0;try{for(var c,s=o[Symbol.iterator]();!(a=(c=s.next()).done);a=!0){var f=c.value,p=r._createExtendEdge(i,f);e.push(p)}}catch(e){u=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(u)throw l}}})(c)}}catch(e){i=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(i)throw a}}}},{key:"_addUnusedCases",value:function(e,t){var n=function(e){return e.createdFromFlow.target==this},r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value;if(!e.some(n,l)){var c=this._createUnusedUsecase(l);e.push(c)}}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}},{key:"_getActorsMap",value:function(e){var t=new Map,n=!0,r=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var l=i.value,c=!0,s=!1,f=void 0;try{for(var p,d=l.usedBy[Symbol.iterator]();!(c=(p=d.next()).done);c=!0){var y=p.value;if(!t.get(y)){var h=new a.Actor(y.name);t.set(y,h)}}}catch(e){s=!0,f=e}finally{try{!c&&d.return&&d.return()}finally{if(s)throw f}}}}catch(e){r=!0,o=e}finally{try{!n&&u.return&&u.return()}finally{if(r)throw o}}return t}},{key:"_addActors",value:function(e,t){var n=10,r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var l=a.value;l.position.x=10,l.position.y=n,e.append(l),n+=200}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}},{key:"_isFirstLevelCase",value:function(e,t){return 0==t.filter(function(t){return t instanceof a.Inclusion&&t.source==e||t instanceof a.Extension&&t.target==e}).length}},{key:"_createUseCaseDiagramModel",value:function(e,t,n,r){var o=new a.UseCases,i=o.model;o.model.name=e;var u=new a.System(e);u.position.x=200,u.position.y=50,o.append(u);var l=this._getActorsMap(t);this._addActors(o,l.values());var c=10,s=100,f=!0,p=!1,d=void 0;try{for(var y,h=t[Symbol.iterator]();!(f=(y=h.next()).done);f=!0){var v=y.value;this._isFirstLevelCase(v.useCase,n)?(v.useCase.position.x=10,v.useCase.position.y=c,c+=120):(v.useCase.position.x=400,v.useCase.position.y=s,s+=120),u.append(v.useCase);var b=!0,m=!1,g=void 0;try{for(var _,w=v.usedBy[Symbol.iterator]();!(b=(_=w.next()).done);b=!0){var O=_.value,P=l.get(O),j=new a.Association;j.sourcePoint.y=Math.floor(P.height/2),j.sourcePoint.x=P.width,j.targetPoint.y=Math.floor(v.useCase.height/2),j.source=P,j.target=v.useCase,i.addEdge(j)}}catch(e){m=!0,g=e}finally{try{!b&&w.return&&w.return()}finally{if(m)throw g}}}}catch(e){p=!0,d=e}finally{try{!f&&h.return&&h.return()}finally{if(p)throw d}}u.height=Math.max(c,s),u.width=600,o.height=u.height+100;var C=!0,k=!1,x=void 0;try{for(var E,T=n[Symbol.iterator]();!(C=(E=T.next()).done);C=!0){var S=E.value;i.addEdge(S)}}catch(e){k=!0,x=e}finally{try{!C&&T.return&&T.return()}finally{if(k)throw x}}return i}}]),e}();t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=n(3),p=n(8),d=(a=(0,p.localizable)({new:"New",import:"Import",export:"Export"}))(u=(0,f.observer)(u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"handleNewClicked",value:function(e){this.model.navigateToNewDiagram()}},{key:"handleImport",value:function(e){this.model.import()}},{key:"handleExport",value:function(e){this.model.export()}},{key:"render",value:function(){this.model=this.props.model;var e=[s.default.createElement("div",{className:"button",onClick:this.handleNewClicked.bind(this),key:"new"},s.default.createElement("div",{className:"text"},this.locale.new)),s.default.createElement("div",{className:"button",onClick:this.handleImport.bind(this),key:"import"},s.default.createElement("div",{className:"text"},this.locale.import))];return this.model.isModelInContext&&e.push(s.default.createElement("div",{className:"button",onClick:this.handleExport.bind(this),key:"export"},s.default.createElement("div",{className:"text"},this.locale.export))),e}}]),t}(s.default.Component))||u)||u;t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=n(3),p=n(8),d=(a=(0,p.localizable)({bpmn:"BPMN",useCases:"Use cases"}))(u=(0,f.observer)(u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"handleBPMNClicked",value:function(){this.model.navigateToNewDvcm()}},{key:"handleUseCasesClicked",value:function(){this.model.navigateToNewUeCases()}},{key:"render",value:function(){return this.model=this.props.model,[s.default.createElement("div",{className:"button",onClick:this.handleBPMNClicked.bind(this),key:"bpmn"},s.default.createElement("div",{className:"text"},this.locale.bpmn)),s.default.createElement("div",{className:"button",onClick:this.handleUseCasesClicked.bind(this),key:"use-cases"},s.default.createElement("div",{className:"text"},this.locale.useCases))]}}]),t}(s.default.Component))||u)||u;t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=n(3),p=n(8),d=(a=(0,p.localizable)({newDiagram:"New diagram",generateFromDVCM:"Generate from DVCM"}))(u=(0,f.observer)(u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"handleNewClicked",value:function(){this.model.navigateToNewUseCases()}},{key:"handleGenerateClicked",value:function(){this.model.navigateToGenerateUseCases()}},{key:"render",value:function(){return this.model=this.props.model,[s.default.createElement("div",{className:"button",onClick:this.handleNewClicked.bind(this),key:"new"},s.default.createElement("div",{className:"text"},this.locale.newDiagram)),s.default.createElement("div",{className:"button",onClick:this.handleGenerateClicked.bind(this),key:"generate"},s.default.createElement("div",{className:"text"},this.locale.generateFromDVCM))]}}]),t}(s.default.Component))||u)||u;t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,u,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(1),s=function(e){return e&&e.__esModule?e:{default:e}}(c),f=n(3),p=n(8),d=(a=(0,p.localizable)({welcome:"Diagrams Editor 0.0.0"}))(u=(0,f.observer)(u=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),l(t,[{key:"render",value:function(){return this.model=this.props.model,s.default.createElement("div",null,this.locale.welcome)}}]),t}(s.default.Component))||u)||u;t.default=d},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,